print("this is clean")
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
        res.append(dir_names,file_names)
first=walk()
        res.append(f'{dir_names}')
first
        res.append(f'{dir_names} {file_names}')
        res.append(f'{dir_path}{dir_names} {file_names}')
print(first)
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
dp=r'/mnt/c/you/alb'
dp=r'/mnt/c/you/'
dp=r'.'
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
os.listdir()
os.chdir(dir)
os.chdir('dir')
res
        res.append(f'{dir_path} {file_names}')
dp='/mnt/c/projects '
dp='/mnt/c/projects '.strip()
len(first)
first[1]
type(first[1])
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      
      res.append(os.path.join(root, name))
len(res)
res[:30]
for a in res:
    print(a)
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
'im' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.scandir()
for a in scandir():
for a in os.scandir():
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk('.')))
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')

# dp=r'.'
len(spaced)
mm=spaced[1]
mm
type(mm)
re.sub('[^a-zA-Z0-9]', '', mm)
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
x.close()
x=open('moves', 'w')
    print(a, file=x)
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
#    for name in dirs:
#       print(os.path.join(root, name))
x
len out
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.chdir('/mnt/c/you/')
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
import joblib
places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json
# Define list with values
basic_list = [1, "Cape Town", 4.6]
# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    json.dump(res, filehandle)
    for a in res:
        filehandle.write(f'{a}\n')
        
m1=spaced[3]
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    ins(a)
d()
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12
print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
for a in spaced[:5]:
    os.rename(oldName, newName)
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    print(f'{oldName} will be {newName}', file=log)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    print(f'{i} {len(leng)}')
r = range(1,10)
r
2 in r
2.5 in r
    leng=[a for a in res if 20< len(a)< 30]
leng=[a for a in res if 20< len(a)<30]
leng=[a for a in res if 30< len(a)<40]
    leng=[a for a in res if i< len(a)< i+10]
for i in range(2,30,2):
for i in range(2,50,2):
for i in range(2,150,20):
for i in range(0,150,20):
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    print(a, file=longf)
longf=open('longf','a')
longf.close()
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
cps(jim)
regex = r"\/mnt/you\/.*\/"
test_str = "/mnt/you/b/cc"
subst = ""
# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)
if result:
    print (result)
test_str = "/mnt/you/b/cc/this is"
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility
matches = re.search(regex, test_str)
if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))
# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
type(matches)
for a in matches:
matches.findall
matches.group(1)
matches.group(0)
matches = re.search(regex, x1)
matches = re.search(regex, x1[0])
regex
print(result)
result = re.match(regex, x1[0])
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result.group()
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
x1=nwork[1]
regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a[1])
    print(a[0])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
space(work['values'][:3][1][1])
    print(f'{a[0]} renamed to  space({a[1]})')
    print(f'{a[0]} renamed to  {space(a[1])}')
ren=open('rename', 'a')
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
ren.close()
[a[0] for a in nwork]
f=open('x')
for a in os.scandir('.'):
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    f=open('fdf.sh')
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
work=sheet('files')
nwork=work['values']
        matches = re.search(regex, a[0])
        print(matches.group())
    # os.rename(a[0], space(a[1]))
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
ren=open('rename.txt', 'a')
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
long
with open('long.txt', 'w') as filehandle:
        print(f'{a}\n', file=filehandle)
        print(f'{a}', file=filehandle)
    except Exception as e:
        print(e)
long[:10]
import logging
# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.basicConfig(level=logging.WARNING)
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5
kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
log.handlers[0].stream
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
    for a in slong:
        print(a,file=filehandle)
slong[:3]
import datetime
x = datetime.datetime.now()
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn = x.strftime("%H-%S")
long=[a for a in first if len(a)>100]
slong
slong[1]
long[1]
res[1]
walk('/mnt/c/you')
walk()
res[1][1]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
    print(res)
os.listdir('/mnt/c/you')
os.listdir(dp)
            print(name)
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
all=mywalk('/mnt/c/you')
all
del a
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong[:3]
allLong
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
from export import mywalk
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you/')
all=mywalk('.')
        return res
ff=mywalk('.')
ff
de ff
del ff
"Ayy
import export
dir(export)
import bs
import time
import requests
long=[a for a in all if len(a)>100]
slong=(sorted(long, key=len, reverse=True))
long=sorted([a for a in all and len(a)>100], key=len(a))
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
item1=Item('ethel', 20, 20)
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
del Item
    def __init__(self, name, price, quantity=0) -> None:
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
    assert 1==0
    print('no')
    assert 3/0
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
        return self.x*self.y
    def cprice(self):
        return self.x *self.y
item1.cprice(30)
item1.cprice(30, 20)
vars(Item1)
var(Item1)
item1.cprice()
        return self.price *self.quantity
item2.cprice()
    def __init__(self, name: str, price: float, quantity=0) -> None:
item1=Item('ethel', 't')
item1=Item('fred', 't')
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
item1=Item(2, 2,3)
        pay=20
item1.pay
    pay=20
item1.pay=222
    pay=220
    def discount(self):
        self.price=self.price * self.pay
item1.discount()
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
class Item:
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"
        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity
    def calculate_total_price(self):
        return self.price * self.quantity
print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
        Item.all.append(self)
    all=[]
print(Item.all)
for a in Item.all:
    print(a.name)
    print(a.name, a.price)
    def __repr__(self) -> str:
        return f'{self.name}'
    def xx(self) -> str:
item1.xx
item2.xx
        return f"Item('{self.name}'"
item2.__repr__
        return f"Item('{self.name}', {self.price}"
impor csv
import csv
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
with open('c.csv', 'w') as f
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        print(str(a), file=f)
    print(str(a))
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
with open(r'c.csv', 'w') as fp:
    for item in l2:
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
    writer.writerow(a)
mm.close()
b = (n+1 for n in a)
a='timmy'
b
next(b)
a=40
class me():
    def __init__(self, name) -> None:
class Me():
del me
me=Me('jim')
vars(me)
        self.people=[]
    def add(self, name):
        self.people.append(name)
me.add('tom')
me.add('dick')
me.add('harry')
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
    @staticmethod
    def isString(ok):
        return type(ok)==str
me.isString
Me.isString(2)
Me.isString('tom')
    cv="i class propery"
m1=Me('tom')
vars(m1)
my1.add('dick')
fc
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
type(b)
b.split('\n')
len(b)
        b=f.read()
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
m1.csv
m1.csv()
        lol=[line.strip() for line in f]
lol
            lol=[line.strip() for line in f]
        for a in lol:
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
items
import mywalk from export
len(all)
all[:10]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
with open('long', 'w') as f:
    f.write(long)
    f.write('\n'.join(long))
class Person:
p1=Person('tom')
p1
print(p1)
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        return f"{self.__class__.__name__}"
p1.__dict__
p2=Person('dick')
print(p2)
        return f"{self.name}"
class Student(Person):
    pass
s1=Student('sue')
print(s1)
    species="human"
s1.__dict__
s1=Student("sue")
p1.species
s1.species
        Person.all.append(self)
Person.all
s2=Student('mary')
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
s1=Student("sue","graf")
s1=Student("sue" "graf")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
    self.firstname = fname
    self.lastname = lname
  def printname(self):
    print(self.firstname, self.lastname)
#Use the Person class to create an object, and then execute the printname method:
x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x.__dict__
    Person.all.append(self) 
  def __repr__(self):
    return f"{self.firstname}"
  all=[]
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
s1=Student("sue","non",1)
s1
p1=Person('tom', 'smith')
    def __init__(self, fname, lname, dob=22):
s2=Student('mary', 'sue')
s2.__dict__
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
phone1.ronly
phone1.ronly='jj'
phone1.quantity=333
os.listdir('.')
os.scandir('.')
di=[]
    di.append(a)
di
di[1]
print(list(enumerate(di)))
type(di[1])
os.chdir('/mnt/c/projects/p3/gar')
with open('jq.json', 'r') as f:
    cc=f.readlines()
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
scandirtree('.')
for a in scandirtree('.'):
e4
for a in scandirtree('..'):
with open('jq.json' 'r') as f:
    f.read()
f
    print(f.read())
    rr=json.loads(f.read())
rr
type(rr)
for a in rr:
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
    print(rr[a])
    print(f'{a} {rr[a]}')
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
    [f'{a} {rr[a]}' for a in rr]
    print([f'{a} {rr[a]}' for a in rr])
match 'jim'
'i am'.split()
with open('j.json','w') as f:
    print(json.loads(f))
#!/usr/bin/python3.10 
with open('j.json','r') as f:
kk=open('j.json','r')
type(kk)
for a in kk:
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk.read()
ll=json.loads(kk)
ll=json.loads('j.json')
    print(json.load(f))
    my=json.load(f)
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
dir(In)
kk=dir(In)
print(kk)
json.dumps(kk)
mm=json.dumps(kk)
with open('xy','w') as f:
    f.write(mm)
mm.split(',')
mm[1]
mm[:10]
mm[:40]
type(mm.split(','))
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
json.load('j.json')
    json.load(f)
    ll=json.load(f)
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
sorted(ll.items(), key=lambda x:x[1])
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
sorted(my)
sorted(my, key=len)
import operator
m1[1]
my[1]
str(my)
my.items()
my.items()[1]
for a in my.items():
nnn=[]
    nnn.append(a)
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my['new']='jim'
my.update({"weight": 50, "height": 6})
my.update({3:30, 4:40})
my.update({3:50, 4:40})
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my[3]
my['company']='3m'
help(requests)
help
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(jr[a])
    print(f'{a} {jr[a]}')
len(jr)
    print(f'{a} {jr[name]}')
jr[1]
cps(str(jr))
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
    print(json.dumps(jr,indent=2), file=f)
with open('git','w') as f:
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
jr[2]
jr[3]
jr[3]['name']
    print(a['name'])
jr[1].keys()
Out
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
Out[8].keys()
type(Out[8])
OUT
json.dumps(jr,indent=3)
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
    print(f"{a['name']}: {a['updated_at']}")
    print(f"{a['name']}: \t {a['updated_at']}")
ls=[]
    ls.append(f"{a['name']}: \t {a['updated_at']}")
ls
type(ls)
print(ls)
    ls.append(f"{a['name']}:  {a['updated_at']}")
ls[2]
re.split(r'\s+',ls[2])
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
lss=sorted(ls, key=lambda x:x[1])r
lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr.keys():
j4
jr
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys() if 'at' in m]
sorted(lss)
for a in dic1:
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j={1:"A",3:None}
j={1:"A",3:}
j={1:"A",3:j}
j.update(j)
k.update(j)
3 in j
4 in j
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
list(a)
del a['license']
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
def ex(x):
    if x in a:
        return 'nope'
ex('a')
a.update({'a':333})
ex('b')
        return 'yep' 
    else:
for g, h in a.items():
    print(g,h)
    print(h)
l={}
for a in range(20):
    l.update(a, a**a)
l
l.update('a','j')
l.update({'a','j'})
h
l.update({'a':'j'})
    l.update({a: a**a})
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(1,20):
for a in range(1,16):
di={}
    di.update({a:a**2})
def mer(x, y):
    return x.update(y)
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di.update(l)
for a in range(30,40):
    l.update({a: 'nnn'})
p={}
p
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
[[a,b] for [a,b] in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()][0]
l2=[[a,b] for [a,b] in jr[0].items()]
'xx'.joint(l2)
'xx'.join(l2)
l2[:3]
'xx'.join(l2[1])
' '.join(l2[1])
"->".join(jr)
"->".join(jr[0])
"->\n".join(jr[0])
l3={}
for a in range(2,20):
    l3.update({a:a*3})
l3
2+=3
c=0
for a,b in l3:
    c=c+b
    print(a,b)
for a,b in l3.items():
c
d+=c
l3.items()
sum(l3.items())
l3.values()
sum(l3.values())
s=jr[0]
del s['watchers']
s
for a,b in s.items():
[a,b for a,b in s]
[(a,b) for a,b in s]
[(a,b) for a,b in s.items()]
[str((a,b)) for a,b in s.items()]
[str(a,b) for a,b in s.items()]
del a b
del b, a
del l2
del c
'jim'[1]
'jim'[:1]
'jimmy'[:1]
'jimmy'[:3]
'jimmy'[:-1]
'jimmy'[::-1]
'jimmy'[::1]
'jimmy'[::4]
ji={}
    ji.update({a:a*3})
ji
del ji[2]
for q,t in jim.items():
    print(q, t*30)
for q,t in ji.items():
[a for a in range(3,20)]
[a for a in range(3,20,3)]
nn={}
for d in (dic1, dic2, dic3): nn.update(d)
dic1
[a for a in dic1]
[(a,b) for a, b in dic1]
[(a,b) for (a, b) in dic1]
[(a,b) for a, b in dic1.items()]
[(a,b) for a, b in dic1.items()][1]
mm=[(a,b) for a, b in dic1.items()].copy()
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    return dd
del mm
one=[x for x in range(10,15)]
two=[x for x in range(20,25)]
del dic1, dic2, dic3
one
two
zip(one,two)
list(zip(one,two))
two.append(33)
dict(zip(one,two))
from export import sheet
t=sheet('shakes')
t
type(t)
[a for a in t]
a['values']
t['values']
import random
randdom.random
random.random
random.random()
def rnd():
    return int(random.random*1000)
rnd()
    return int(random.random()*1000)
[rnd() for a in range(30)]
def rnd(a=1000):
    return int(random.random()*a)
rnd(1000000)
[rnd(100000) for a in range(10)]
max(1,3)
ll={}
for a in range(2):
    ll.update({a:rnd()})
max[b for b in ll.values()]
max([b for b in ll.values()])
ss={}
len(ss)
bool(ss)
bool(0)
bool(None)
bool(jr)
bool(ll)
bool(False)
bool(True)
bool(3)
bool(xxx)
xxx=None
xxx=Non
xxx='n'
from export import rnd
uu={}
    uu.update({rnd():rnd()})
uu
sort(uu)
sorted(uu)
for a in sorted(uu):
    print(a, uu[a])
d1 = {'a': 100, 'b': 200, 'c':300}
for a,b in d1.items():
d2 = {'a': 300, 'b': 200, 'd':400}
d1['a']
[x for x in d1.keys()]
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
print(d1)
print(d2)
d1['c']
d1['d']
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        print(c)
up={}
        up.update({a:c})
up
d2 = {'a': 30, 'b': 2200, 'd':400}
up.update(d2)
up.update(d1)
    up.update(d1)
    up.update(d2)
        print(f'a is {a}')
        print(f'c is {c}')
from collections import counter
from collections import Counter
jj="nothing from nothing"
Counter(jj)
str(t['values'])
t1=t['values']
t1
sum(ll,[])
sum(t1,[])
type(sum(t1,[]))
sum(t1,[])[1]
sum(t1,[])[2]
t3=sum(t1,[])
t3
''.join(t3)
' '.join(t3)
'\n'.join(t3)
print('\n'.join(t3))
counter('\n'.join(t3))
Counter('\n'.join(t3))
Counter(d1)
Counter(d1)+Counter(d2)
d = dict(a=1, b=2, c=3)
d
data = open('input', 'r', encoding='utf-8').read().splitlines()
data
data[1]
sum(data,[])
type(data)
ll=sheet('shakes')
[a for a in ll.items()]
[a for a in ll.keys()]
tu=tuple([a for a in ll.keys()])
tu
a,b,c = tu
ll[c]
with open('xx', 'w').write(ll)
with open('xx', 'w').writelines(ll)
open('xx', 'w').writelines(ll)
open('xx', 'w').writelines(ll[c])
open('xx', 'w').writelines(str(ll[c]))
tx=(1,2,3)
tx+4
tx+(9,)
tx+(9)
tx+(9,20,2,)
tx=tx+(9,20,2,)
tx
tx[:3]
set(tx)
2 in tx
6 in tx
del tx[1]
tx[1]=90
tx.remove(1)
tx[3:]
ty=tx+tx
ty
ty.count(2)
tz=tuple(set(ty))
tz
ty[3:5]
typ
print(enumerate(ty))
[a for a in enumerate(ty)]
dict([a for a in enumerate(ty)])
tzz=dict([a for a in enumerate(ty)])
tzz.keys()
tzz.values()
[rnd() for a in range(10)]
rn=[rnd() for a in range(10)]
tuple(rn)
[a for a in enumerate(rn)]
rn
ty[::-1]
ty[::]
str(ty)
t=()
if t:
    print(t)
else    
    print('null')
else:
t=('')
t=('a')
t=('a',)
if t
if t:print('yes')
t=1
av=((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))
[a for a in av)
[a for a in av]
sum(ty)
def aver(a):
    den=len(a)
    nu=sum(a)
    return nu/den
aver(1,20)
aver([1,2,3])
aver([rnd() for a in range(10)])
[aver(a) for a in av]
def gg(*nums):
    print(nums)
g(1,3,4)
gg(1,3,4)
    print(type(nums))
x,y,z=[a for a in ll.keys()]
z
ll[z]
ll[z][:3]
ll[z][3:]
ll[z][:-3]
ll[z][-3:]
ll[z][1:-3]
sl=[a for a in range(8)]
sl
sl[-1]
sl[-1:3]
sl[-1:-3]
sl[-4]
sl[-4:2]
sl[4:2]
sl[:4]
sl[:-4]
sl[-4:]
ll[z][-6:]
