q
get_ipython().run_line_magic('history', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('whos', '')
import mysql.connector
db=mysql.connector.connect()
db=mysql.connector.connect(host="localhost" ,user="root", passwd="stars1")
print('thursday')
import sys
sys.executable
db=mysql.connector.connect()
db=mysql.connector.connect(host="localhost" ,user="root", passwd="stars1")
import mysql.connector
db=mysql.connector.connect()
db=mysql.connector.connect(host="localhost" ,user="root", passwd="stars1")
mycursor=db.cursor()
mycursor.execute("CREATE DATABASE testdatabase")
def ex(sq):
    mycursor.execute(sq)
    
ex('use testdatabase')
ex('CREATE DATABASE second')
ex('use second')
ex('CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),
       species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);')
ex('CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20), species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);')
import sys
sys.executable
import sys
sys.executable
import mysql.connector
import mysql.connector
db=mysql.connector.connect(host="localhost" ,user="root", passwd="rootpress")
mycursor=db.cursor()
mycursor.execute("CREATE DATABASE testdatabase")
def ex(sq):
    mycursor.execute(sq)
    
ex('show tables')
ex('use sys')
myresult = mycursor.fetchall()
for x in myresult:
  print(x)
  
ex('show tables')
myresult = mycursor.fetchall()
for x in myresult:
  print(x)
  
for x in {2, 1, 3}: ... print(x) 1 2 3
get_ipython().run_line_magic('whos', '')
print('thursday')
print('friday')
import sys
dir(sys)
get_ipython().run_line_magic('whos', '')
import clipboard
a=[1,2,3]
a in [4,5]
a in [3,4,5]
a
1 in [1,3]
1 in [2,3]
for p in a:
    print(p)
    
for p in a:
    if p in a:
      print('yes')
      
for p in a:
    print(p)
    if p in a:
      print('yes')
      
set(a)
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'test.py')
import test.py
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
doub([1,3,4])
get_ipython().run_line_magic('who', '')
dir(doub)
print(dir(doub))
x="April is the cruellest month, breeding
Lilacs out of the dead land, mixing"
x='''ok'''
x
x='''April is the cruellest month, breeding
Lilacs out of the dead land, mixing'''
x
print(x)
x
x.replace('\n',' ')
x
import re
re.sub(r"\s", "x", x)
re.sub(r"\s", "x", x)
re.sub(r",", "", x)
re.sub(r"[,\n]", "", x)
re.sub(r"[,\n]", " ", x)
re.sub(r"[^a-z]", " ", x)
re.sub(r"[^a-zA-Z]", " ", x)
re.sub(r"[^a-zA-Z]", "", x)
re.sub(r"[^a-zA-Z]", " ", x)
x
y=re.sub(r"[^a-zA-Z]", " ", x)
y
re.sub(r"\s+", " ", y)
z=re.sub(r"\s+", " ", y)
z
z
z.split(' ')
from pathlib import Path
here = Path(".")
files = here.glob("**/*")
for item in files:
    print(item)
    
from pathlib import Path
here = Path(".")
files = here.glob("**/*")
for item in files:
    print(item)
    
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
from pathlib import Path
here = Path(".")
files = here.glob("**/*")
for item in files:
    print(item)
    
get_ipython().run_line_magic('pwd', '')
import sys
print(sys.path)
f'{{ {4*10} }}'
b='hi'
f' {b} there'
k=f' {b} there'
k
lt
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
cls
c
'abc'.replace('a','x')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('whos', '')
y=re.sub(r"[^a-zA-Z]", " ", x)
import re
y=re.sub(r"[^a-zA-Z]", " ", x)
y
re.sub(r"\s+", " ", y)
re.sub(r"\{1,}", " ", y)
re.sub(r"\s{1,}", " ", y)
re.sub(r"\s{1,}", " ", 'nothing    nothing')
re.sub(r"\s{2,}", " ", 'nothing    nothing')
re.sub(r"\s{8,}", " ", 'nothing    nothing')
re.sub(r"\s{1,}", " ", 'nothing    nothing          a')
re.sub(r"x{1,}", " ", 'nothing    nothing    x      a')
re.sub(r"x{1,}", " ", 'nothing    nothing    xxxx      a')
re.sub(r"x{1,}", " ", 'nothing    nothing    xbxxx      a')
re.sub(r"x{0,}", " ", 'nothing    nothing    xbxxx      a')
re.sub(r"j{0,}", " ", 'nothing    nothing    xbxxx      a')
re.sub(r"j+", " ", 'nothing    nothing    xbxxx      a')
y=re.sub(r'[^a-zA=Z]', ' ' x)
y=re.sub(r'[^a-zA=Z]', ' ' ,x)
y
re.sub(r"\s+", " ", y)
re.sub(r"\s+", " ", y).split(' ')
z=re.sub(r"\s+", " ", y).split(' ')
z
get_ipython().run_line_magic('run', 'test.py')
z
get_ipython().run_line_magic('run', 'test.py')
set(z)
print(set(z))
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
cls
get_ipython().run_line_magic('whos', '')
print(z)
z.sort()
print(z)
z.sort(key=len)
print(z)
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
v=sorted(z)
print(v)
print(z)
len(z)
f'{len(z)} v is {len(v)}'
print(set(v))
print(sorted(set(v)))
print(sorted(set(v), key=str.lower))
'jim'[1]
print(sorted(set(v), key=lambda x:x[1]))
print(sorted(set(v), key=lambda x: x[1]))
print(sorted(set(v), key=lambda x:x[1]))
sorted(v)
people = [('Anna', 'New York', 'Data Analyst'),('Chris', 'Berlin', 'Software Developer'),('Nancy', 'Toronto', 'Data Scientist')]
sorted(people, key=lambda x:x[1])
sorted(people, key=lambda x:x[1][1])
type(people)
people.append('xxx','xxx','xxx')
people.append('xxx')
people
people.append(('xxx','yyy','zzz'))
people
sorted(people, key=lambda x:x[1][1])
'xxx' in people
'xxxx' in people
people.remove('xxx')
people
sorted(people, key=lambda x:x[1][1])
people.append(('aaa','b','c'))
sorted(people, key=lambda x:x[1][1])
people
'aaa' in people
enumerate(people)
print(enumerate(people))
list(enumerate(people))
people.pop(4)
list(enumerate(people))
sorted(people, key=lambda x:x[1][1])
people.append(('aaa','bbb','ccc'))
sorted(people, key=lambda x:x[1][1])
people.append(('  ','  ','ccc'))
sorted(people, key=lambda x:x[1][1])
type(people[1])
people.pop(0)
people
list(enumerate(people))
list(enumerate(people))[1]
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
doub(v)
doub(z)
get_ipython().run_line_magic('whos', '')
doub(x)
get_ipython().run_line_magic('run', 'test.py')
a(3)
cls
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('run', 'test.py')
a(3)
a(3,2)
a(3,2)
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
set(z)
get_ipython().run_line_magic('run', 'test.py')
a([2,2])
def a(p):
    return p
    
a([2,2])
get_ipython().run_line_magic('whos', '')
def a(p):
    return set(p)
    
a([2,2])
def a(p):
    return set(p)
print(f'the set is {a([4,4,5,6])}')
a("jim")
sorted(a("jim"))
a("jimxad")
a("zjimxad")
a("zjimxad")==a("zjimxad")
a("zjimxad")==a("zjimxadc")
set([8,9,20,1,3])
import random
random.random()
random.random()*50
for a in range(10):
    random.random()
    
for a in range(10):
    print(random.random())
    
for a in range(10):
    print(random.random())*50
    
for a in range(10):
    print(random.random()*50)
    
s=[]
for a in range(10):
    s.append(random.random*50)
    print(random.random()*50)
    
for a in range(10):
    s.append(random.random()*50)
    print(random.random()*50)
    
s
set(s)
for a in range(100):
    s.append(random.random()*50)
    
s
set(s)
print(s)
print(set(s))
print(sorted(set(s)))
sorted(set(s))==sorted(set(s))
def a(x):
    if len(x)>3:
        return x[2]
        
a("jim")
print(a("jim"))
"jim"[2]
len("jim")
print(a("jimste"))
"steffes"[2:4]
list(enumerate(s))
s[33:40]
s[-5]
a=10
if(a>10):
    print("Value of a is greater than 10")
else :
    print("Value of a is 10")
    
a=10
if(a>10):
    print("Value of a is greater than 10")
else:
    print("Value of a is 10")
    
s
list(enumerate(s))
s.remove(s[108])
list(enumerate(s))
s.remove(s[10:100])
s[10:20]
s.clear()
s
get_ipython().run_line_magic('whos', '')
dir(doub)
import inspect
inspect.getsource(doub)
print(inspect.getsource(doub))
get_ipython().run_line_magic('whos', '')
for a in range(30):
    s.append(random.random()*50)
    
s
print(s)
round(s[1])
s.clear()
for a in range(30):
    s.append(round(random.random()*50))
    
s
print(s)
print(s)
print(sorted(s))
def u(p):
    p=sorted(p)
    return p
    
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
z
z[10:20]
print(list(enumerate(z[20:30])))
s
get_ipython().run_line_magic('run', 'test.py')
s
s.clear()
for a in range(30):
    s.append(round(random.random()*50))
    
s
set(s)
print(f's is {len(s)} and set is {len(set(s))}')
print(s)
print(sorted(s))
s.count(15)
print(s)
u(s)
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('clear', '')
credits
date
import datetime
date
clear
get_ipython().run_line_magic('clear', '')
clear
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
import inspect
print(inspect.getsource(doub))
s
s
[x for x in s]
[x*200 for x in s]
round(s[1])
[round(x) for x in s]
s=[round(x) for x in s]
s
print(s)
sorted(s)
print(sorted(s))
[x for x in range(100)]
[x for x in range(100)]
print([x for x in range(100)])
print(['z' for x in range(100)])
import random
random.random()*50
round(randome.random())
round(random.random())
round(random.random()*100)
def k:
    return round(random.random()*100)
def k():
    return round(random.random()*100)
    
k
p=k
p
p=k()
p
print([k() for x in range(100)])
get_ipython().run_line_magic('whos', '')
print(inspect.getsource(s))
get_ipython().run_line_magic('whos', '')
print(inspect.getsource(u))
print(inspect.getsource(k))
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
x
cls
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('whos', '')
a
s
s=[round(x) for x in s]
for l in enumerate(s):
    print(l)
    
t=sorted(s)
cls
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
s
get_ipython().run_line_magic('whos', '')
z
get_ipython().run_line_magic('whos', '')
z
[x for x in z]
[x for x in z if x='in']
[x for x in z if x=='in']
[enumerate(x) for x in z if x=='in']
[str(enumerate(x)) for x in z if x=='in']
[x for x in enumerate(z) if x=='in']
get_ipython().run_line_magic('whos', '')
[x for x in enumerate(z) if x.startswith=='a']
[x for x in enumerate(z) if x.startswith'a']
[x for x in enumerate(z) if x.startswith('a')]
[x for x  if x.startswith('a')]
[x for x if x.startswith('a')]
[x for x in z if x.startswith('a')]
[x for x in z if not x.startswith('a')]
[x for x in z if not x.contains('a')]
[x for x in z if not x.startswith(('a','b'))]
[x for x in z if not x.startswith(('a'))]
[x for x in z if not x.startswith('a'))]
[x for x in z if not x.startswith('a')]
[x for x in z if  x.startswith('a')]
[x for x in z if  x.startswith('a','b')]
[x for x in z if  x.startswith(('a','b'))]
[x for x in z if  x.startswith(('a','b'))]
get_ipython().run_line_magic('whos', '')
x
x.replace('\n',' ')
x.replace('\n',' ').replace('  ','')
x.replace('\s','xxx')
x.replace(' ','xxx')
x.replace(' ','\t')
q== 'one\ntwo\r\nthree'
q= 'one\ntwo\r\nthree'
q
print(q)
print(repr(q))
get_ipython().run_line_magic('whos', '')
print(repr(x))
y
print(repr(y))
s.find('the')
str(s).find('the')
str(s)
type(y)
y.find('the')
y[10]
y.find('  ')
y.split('  ')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('whos', '')
x=whos
random.random()*50
s
get_ipython().run_line_magic('whos', '')
re.search('a',y)
re.search('\s',y)
re.search('\s+',y)
s[10]
y[10]
y[:10]
re.search('\s{2}',y)
re.findall(r"\w+ly\b", y)
re.findall(r"\w+y\b", y)
re.findall("\w+y\b", y)
re.findall(r"\w+y\b", y)
re.findall(r"\.+y\b", y)
re.findall(r"\.*y\b", y)
re.findall(r"\w+y\b", y)
y
y.strip()
y.strip().replace('  ', ' ')
y.strip().replace('  ', ' ').split(' ')
f=y.strip().replace('  ', ' ').split(' ')
print(f)
[a for a in f]
myString='and'
pattern = r'\b' + re.escape(myString) + r'\b'
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
s
s.pop()
s
list(enumerate(s))
s.pop()
list(enumerate(s))
s.pop(1)
list(enumerate(s))
s.find(50)
list(enumerate(s))
print(s)
s.remove(8)
print(s)
s=sorted(s)
print(s)
s.remove(37)
print(s)
del s[0]
print(s)
del s[-1]
print(s)
del s[0:10]
print(s)
del s[:3]
print(s)
del s[:]
print(s)
get_ipython().run_line_magic('whos', '')
k=random.random()
k
k=round(random.random()*100)
k
k
def k():
    return round(random.random()*100)
    
k()
k()
[k() for k in range(3)]
[k for k in range(3)]
k()
print([k() for x in range(100)])
[k() for x in range(3)]
[n in [k() for x in range(3)]]
[n for n in [k() for x in range(3)]]
[n for n in [k() for x in range(30)]]
[n for n in [k() for x in range(10)]]
[n for n in [k() for x in range(10)]]
[n for n in [k() for x in range(10)] and n %2==0]
[n for n in [k() for x in range(10)] if n %2==0]
[n for n in [k() for x in range(10)] if n %2==0]
[n for n in [k() for x in range(10)] if n %2==0]
[n for n in [k() for x in range(10)] if n %2==1]
[n for n in [k() for x in range(10)] if n %2==1]
[n for n in [k() for x in range(10)] if n %2==1]
[n for n in [k() for x in range(10)] if n %2==1]
[n for n in [k() for x in range(10)] if n %3==1]
[n for n in [k() for x in range(10)] if n %3==0]
[n for n in [k() for x in range(10)] if n %7==0]
[n for n in [k() for x in range(10)] if n %7==0]
[n for n in [k() for x in range(100)] if n %7==0]
84/7
[n for n in [k() for x in range(100)] if n %7==0]/7
[n for n in [k() for x in range(100)] if n %7==0]
[n for n in [k() for x in range(100)] if n %13==0]
del [n for n in [k() for x in range(100)] if n %13==0][:2]
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
def n(a):
    print(type(n))
    
n('a')
def n(a):
    print(type(a))
    
n('a')
n(n)
n([1])
n((2))
n((2,3))
[1,2,3].count(1)
[1,1,2,3].count(1)
def n(a):
    if type(a)==list:
        print('list')
    else:
        print(type(n))
        
n(a)
def n(a):
    if type(a)==list:
        print('list')
    else:
        print(type(a))
        
n(a)
a
n([1,2,3])
def n(a):
    if type(a)==list:
        print(f'a list {a.count(1)} has 1\'s')
        print('list')
    else:
        print(type(a))
        
n([1,2,3])
n([1,1,2,3])
def n(a):
    if type(a)==list:
        print(f'a list  has {a.count(1)} 1\'s')
        print('list')
    else:
        print(type(a))
        
n([1,1,2,3])
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
z[10:20]
print(z)
a[0]
z[0]
z[0]==null
z[0]==none
z[0] is None
z[0] = None
print(z)
len(z[0])
z[0] = ''
len(z[0])
print(z)
z=[a for a in z if len(a) !=0]
print(z)
str(z)
a=''
a=z[2]+z[3]
a
str(z)
eleven = None
print(eleven is None)
eleven
print(eleven)
repr(eleven)
repr(z)
for n in z:
    a+=n
    
a
for n in z:
    a+=' '+n
    
a
a=''
for n in z:
    a+=' '+n
    
a
def python_none():
    pass
    
python_none()
print(python_none())
repr(python_none())
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
print(z)
a=[a for a in z if len(a)!=0]
print(z)
z=[a for a in z if len(a)!=0]
print(z)
len(z)
print(enumerate(z))
print(list(enumerate(z)))
s=0
def summer(a):
    for x in range(10):
        s+=x
    return set(p)
    
s=0
def summer(a):
    for x in range(10):
        s+=x
    return s
    
summer(2)
def summer(a):
    s=0
    for x in range(10):
        s+=x
    return s
    
summer(2)
def summer(a):
    s=0
    for x in range(10):
        print(f'{s} + {x} = {s+x}')
        s+=x
    return s
    
summer(2)
summer(2)
def summer():
    s=0
    for x in range(10):
        print(f'{s} + {x} = {s+x}')
        s+=x
    return s
    
summer(2)
summer()
summer()
def summer(n):
    s=0
    for x in range(n):
        print(f'{s} + {x} = {s+x}')
        s+=x
    return s
    
summer(8)
summer(8)
get_ipython().run_line_magic('whos', '')
def k():
    return round(random.random()*1000)
myA=[k() for x in range(5)]
k()
myA
def summer(n):
    s=0
    for x in n:
        print(f'{s} + {x} = {s+x}')
        s+=x
    return s
    
summer(myA)
def summer(n):
    s=0
    for x in n:
        print(f'{s} * {x} = {s*x}')
        s+=x
    return s
    
summer(myA)
def summer(n):
    s=0
    for x in n:
        print(f'{s} * {x} = {s*x}')
        s*=x
    return s
    
summer(myA)
def summer(n):
    s=1
    for x in n:
        print(f'{s} * {x} = {s*x}')
        s*=x
    return s
    
summer(myA)
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
def k():
    return round(random.random()*1000)
myA=[k() for x in range(5)]
myA
set(myA)
list(set(myA))
list(sorted(set(myA)))
list(sorted(set(myA)))=sorted(myA)
list(sorted(set(myA)))==sorted(myA)
def dif(a):
    if list(sorted(set(a)))==sorted(a):
        print(f'list {a} is unique')
    else:
        print(f'list {a} in NOT')
        
dif([1,2])
dif([1,2,1])
def dif(a):
    if type(a)!=list:
       print('input must be list') 
    else:
        if list(sorted(set(a)))==sorted(a):
            print(f'list {a} is unique')
        else:
            print(f'list {a} in NOT')
            
dif('jim')
dif([3])
dif([38,2,4])
dif([38,2,4,6,22,4])
dif(['a','b'])
dif(['a','b','a'])
'aeio'.split('')
'aeio'.split('e')
[*'ae']
[*'aeiou']
for a in 'aeiou':
    print(a)
    
clear
get_ipython().run_line_magic('whos', '')
d=[*'aeiou']
d
d=[*'ae']
len(d)
d=[*'ae']
for n in range(len(d)):
    print(d[n])
    
d=[*'ae']
for n in range(len(d)):
    print(d[n] + d [n+1])
    
d=[*'ae']
for n in range(len(d)):
    print(n)
    print(d[n] + d [n+1])
    
d=[*'ae']
for n in range(len(d)):
    print(n)
    print(d[n] + d[n+1])
    
for n in range(len(d)):
    print(n)
    print(n+1)
    
d[1]
d[2]
for n in range(len(d)):
    print(n)
    
n
print(d[0]+d[1])
def permutations(elements):
    if len(elements) <= 1:
        yield elements
        return
    for perm in permutations(elements[1:]):
        for i in range(len(elements)):
            # nb elements[0:1] works in both string and list contexts
            yield perm[:i] + elements[0:1] + perm[i:]
            
permutations([1,2])
list(permutations([1,2]))
list(permutations([1,2,3]))
list(permutations(*'aeiou'))
list(permutations([*'aeiou']))
print(list(permutations([*'aeiou'])))
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('whos', '')
random.shuffle([*'aeiou'])
print(random.shuffle([*'aeiou']))
[*'aeiou']
random.shuffle('aeiou')
char_list = ['a','e','i','o','u']
random.shuffle(char_list)
print(''.join(char_list))
print(random.shuffle([*'aeiou']))
[*'aeiou']
d=[*'aeiou']
d
random.shuffle(d)
type(d)
get_ipython().run_line_magic('whos', '')
random.shuffle('aeiou')
random.shuffle(char_list)
print(random.shuffle(char_list))
type(random.shuffle(char_list))
print(random.shuffle(char_list))
char_list
k=random.shuffle([*12345])
print(k)
k=random.shuffle([*"12345"])
k
print(k)
j=[*"12345"]
k=random.shuffle()
print(k)
j
j=[*"12345"]
k=random.shuffle(j)
print(k)
j
j
random.shuffle(j)
j
random.shuffle(j)
j
get_ipython().run_line_magic('whos', '')
s
print(sorted(s))
print(sorted(s), key=lambda k: k)
print(sorted(s, key=lambda k: k))
print(sorted(s, key=lambda k: str(k)))
get_ipython().run_line_magic('whos', '')
y
z
z=[a for a in z if len(a)!=0]
z
sorted(a, key=lambda k: k)
sorted(z, key=lambda k: k)
print(sorted(z, key=lambda k: k))
print(sorted(z, key=lambda k: lower(k)))
Lower('j')
print(sorted(z, key=lambda k: k.lower))
print(sorted(z, key=lambda k: k.lower()))
print(sorted(z, key=lambda k: k.lower()))
print(sorted(z, key=lambda k: random.random()))
print(sorted(z, key=lambda k: random.random()))
z
get_ipython().run_line_magic('run', 'test.py')
z
print(sorted(z, key=lambda k: random.random()))
z
print(z)
get_ipython().run_line_magic('run', 'test.py')
print(s)
s[1]
s[1][1]
str(s[1][1])
str(s[1])
str(s[1])[1]
[str(a) for a in s]
s=[a for a in s and 1>9]
s=[a for a in s and a>9]
s
s=[a for a in s and a == 9]
type(s[1])
s=[a for a in s]
s
[type(a) for a in s]
[type(a) for a in s and a == 2]
[type(a) for a in s if a == 2]
[type(a) for a in s if a > 9]
[a for a in s if a > 9]
s=[a for a in s if a > 9]
s
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('whos', '')
def p(x):
    print(x)
    
p(s)
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('whos', '')
p(x)
p(y)
y
get_ipython().run_line_magic('whos', '')
z
z=[a for a in z if len(a)!=0]
z
p(z)
p(sorted(z, key=lambda k:k[-1]))
p(sorted(z, key=lambda k:len(k)))
def f(x):
    return [a for a in x if a.startswith('t')]
    
f(z)
[a for a in z if a > 9]
[a for a f(z)]
[a for a in f(z)]
[a for a in f(z) if a[1]=='h']
def t(x):
    try:
        return 9/x
    except ZeroDivisionError:
        print("You can't divide by zero!")
        
t(3)
t(0)
def t(x):
    try:
        return x[3]
    except ZeroDivisionError:
        print("You can't divide by zero!")
        
t('thisi')
t('th')
def t(x):
    try:
        return x[3]
    except ZeroDivisionError:
        print("You can't divide by zero!")
    finally:
        print("didn't work")
        
t('th')
get_ipython().run_line_magic('whos', '')
import inspect
p
p(sorted(z, key=lambda k:len(k)))
p(inspect.getsource(t))
def t(x):
    try:
        new= x[3]
    except:
        print("didn't work index")
    finally:
        print("didn't work")
        
t('frumious')
t('fr')
def t(x):
    try:
        new= x[3]
    except:
        print("didn't work index")

    return new
    
t('fr')
def t(x):
    try:
        new= x[3]
        return new
    except:
        print("didn't work index")
        
t('fr')
t('frumi')
def t(x):
    try:
        new= x[3]
        return new
    except:
        return 0
        # print("didn't work index")
        
t('fr')
t('frumi')
k='''After the try clause, we can'''.split(' ')
k
[t(a) for a in k]
t(k[2])
import timeit
get_ipython().run_line_magic('ls', '')
'c:\all'.replace('\\','\/')
r'c:\all'.replace('\\','\/')
r'c:\all'.replace('\','\/')
r'c:\all'.replace('\','/')
r'\'.replace('\','x')
r'JIm'.replace('j','xx')
r'JIm'.replace('J','xx')
r'\JIm'.replace('\J','xx')
r'\JIm'.replace('\J','/')
r'c:\JIm'.replace('\J','/')
r'c:\JIm'.replace('\','/')
r'c:\JIm'.replace('\\','/')
r'c:\JIm'.replace('\\','/').replace('c:\','/mnt/c')
r'c:\JIm'.replace('\\','/').replace('c:\','\/mnt\/c')
r'c:\JIm'.replace('\\','/').replace('c:\\','\/mnt\/c')
r'c:\JIm'.replace('c:\\','\/mnt\/c').replace('\\','/')
r'c:\JIm'.replace('c:\\','/mnt/c').replace('\\','/')
r'c:\JIm'.replace('c:\\','/mnt/c/').replace('\\','/')
def wincon(a):
    r'a'.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
a
r'c:\jim'
a='c:\jim'
r(a)
r{a}
repr(a)
a
a
a.replace('c:\\','/mnt/c/')
def wincon(a):
    a.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
a
def wincon(a):
    return a.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('whos', '')
def wincon(a):
    import sys
    print(type(sys.argv))
    for i in sys.argv:
        print(i)
    return a.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
def wincon(a):
    import sys
    print(type(sys.argv))
    for i in sys.argv:
        print(enumerate(i))
    return a.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
def wincon(a):
    import sys
    print(type(sys.argv))
    for i in sys.argv:
        print(list(enumerate(i)))
    return a.replace('c:\\','/mnt/c/').replace('\\','/')
 wincon('c:\jim')
def wincon(a):
    import sys
    print(type(sys.argv))
    for i in sys.argv:
        print(list(enumerate(i)))
    return a.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
def wincon(a):
    import sys
    print(type(sys.argv))
    for i in sys.argv:
        print(i)
    return a.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
def wincon(a):
    import sys
    print(type(sys.argv))
    for i in sys.argv:
        print(f'first i is {i}')
    return a.replace('c:\\','/mnt/c/').replace('\\','/')
    
wincon('c:\jim')
get_ipython().run_line_magic('run', 'test.py')
import timeit
 
# code snippet to be executed only once
setup_details = "import random"
# code snippet whose execution time is to be measured
samplecode = '''
def example():
    somenumber = random.randit(0,50)
    return somenumber
'''
# timeit statement
print ("Execution time of program:-", timeit.timeit(setup = setup_details,
                     stmt = samplecode,
                     number = 10000))
somenumber = random.randit(0,50)
import random
somenumber = random.randit(0,50)
# testing timeit()
import timeit
import_module = "import random"
testcode = ''' 
def test(): 
    return random.randint(10, 100)
'''
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))
somenumber = random.randit(0,50)
import random
random.randint(10,100)
somenumber = random.randint(0,50)
somenumber
somenumber = random.randint(0,50000000)
somenumber
print ("Execution time of program:-", timeit.timeit(setup = setup_details,
                     stmt = samplecode,
                     number = 10000))
dir_path = r'C:\\all\\'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
import os
dir_path = r'C:\\all\\'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
dir_path = r'/mnt/c/all'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
samplecode = '''
dir_path = r'/mnt/c/all'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
'''
print ("Execution time of program:-", timeit.timeit(setup = setup_details,
                     stmt = samplecode,
                     number = 10000))
setup_details = "import os"
print ("Execution time of program:-", timeit.timeit(setup = setup_details,
                     stmt = samplecode,
                     number = 10000))
print("Execution time of program:-", timeit.timeit(setup = setup_details, stmt = samplecode, number = 10))
samplecode = '''
dir_path = r'/mnt/c/'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
'''
print("Execution time of program:-", timeit.timeit(setup = setup_details, stmt = samplecode, number = 10))
res
setup_details = "from os import walk"
samplecode='''
dir_path = r'/mnt/c/'
res = []
for (dir_path, dir_names, file_names) in walk(dir_path):
    res.extend(file_names)
print(res)
'''
print("Execution time of program:-", timeit.timeit(setup = setup_details, stmt = samplecode, number = 10))
setup_details = "from os import walk"
samplecode='''
dir_path = r'/mnt/c/all'
res = []
for (dir_path, dir_names, file_names) in walk(dir_path):
    res.extend(file_names)
print(res)
'''
print("Execution time of program:-", timeit.timeit(setup = setup_details, stmt = samplecode, number = 10))
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('whos', '')
import requests
r = requests.get('https://www.dataquest.io/')
print(r)
dir(r)
get_ipython().run_line_magic('history', '')
[r in r]
r
[r in dir(r)]
type(dir(r))
[a for r in dir(r)]
[a for a in dir(r)]
[a for a in dir(r) if not a.startswith('__')]
[a for a in dir(r) if not a.startswith('_')]
r.text
get_ipython().run_line_magic('history', '')
[a for a in dir(r) if not a.startswith('_')][1:3]
r.text[0:2]
r.text[0:22]
print(r.text)
print(*r.text)
print(r)
print(r.text)
print(r.text[:20])
print(r.text[:220])
type(r.text)
def p(x):
    print(x)
    
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
len(x)
p(x)
p(x).split('\n')
x.split('\n')
len(x.split('\n'))
l=len(x.split('\n'))
p(x[:l])
def p(w):
    l=len(w.split('\n'))
    print(w[:l])
    
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
def p(w):
    l=len(w.split('\n'))
    print(w[:l])
    
get_ipython().run_line_magic('whos', '')
p(y)
x,y=1,2
x
if 2==3:
    x,y=3,4
else:
    x,y=None, None
    
x
print(x)
repr(x)
len(x)
type(x)
if 2==2:
    x,y=3,4
else:
    x,y=None, None
    
x
2=3 if 3==3
a=3 if 3==3
lt
get_ipython().run_line_magic('ls', '')
from IPython.core.magic_arguments import argument, magic_arguments
ipy = get_ipython()
ipy.define_macro('d', 'date')
date
ipy = get_ipython()
ipy.define_macro('h', 'history')
history
get_ipython().run_line_magic('history', '')
ipy = get_ipython()
ipy.define_macro('h', 'history')
ipy = get_ipython()
ipy.define_macro('h', 'import')
import
import
ipy = get_ipython()
ipy.define_macro('h', '@history')
@history
ipy = get_ipython()
ipy.define_macro('h', '%whos')
%whos
get_ipython().run_line_magic('whos', '')
date
%whos
get_ipython().run_line_magic('pinfo', 'dir')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('pinfo', 'd')
date
import datetime as date
date
date
d.now
d.now()
date.date()
date.date('2022')
date.date(2022)
get_ipython().run_line_magic('pinfo', 'date')
get_ipython().run_line_magic('magic', '')
k=get_ipython().run_line_magic('magic', '')
k
get_ipython().run_line_magic('magic', '')
get_ipython().run_line_magic('alias', 'w %whos')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('alias', 'wh %whos')
get_ipython().run_line_magic('wh', '')
get_ipython().run_line_magic('run', 'test.py')
x
get_ipython().run_line_magic('whos', '')
z
get_ipython().run_line_magic('less', 'z')
z %less 
get_ipython().run_line_magic('page', 'z')
z
get_ipython().run_line_magic('page', 'z')
get_ipython().run_line_magic('page', 'print(z)')
print(z)
get_ipython().run_line_magic('whos', '')
dir(whos)
dir(random)
get_ipython().run_line_magic('page', 'dir(random)')
get_ipython().run_line_magic('automagic', '1')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('quickref', '')
q
get_ipython().run_line_magic('quickref', '')
get_ipython().run_line_magic('quickref', '')
get_ipython().run_line_magic('time', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('run', 't')
clear
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('quickref', '')
get_ipython().run_line_magic('alias', 'c clear')
clear
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('alias', '')
get_ipython().run_line_magic('lf', '')
get_ipython().run_line_magic('lx', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('history', '')
get_ipython().run_line_magic('timeit', 'x=x=range(100)')
get_ipython().run_line_magic('timeit', 'x=x=range(100)')
get_ipython().run_line_magic('timeit', "x=x=range(100) print('hi')")
get_ipython().run_line_magic('timeit', "x=x=range(100): print('hi')")
get_ipython().run_line_magic('timeit', "x=range(100): print('hi')")
get_ipython().run_line_magic('timeit', 'x=range(100)')
x
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('pdef', '(a)')
get_ipython().run_line_magic('pdef', '(print)')
get_ipython().run_line_magic('pdoc', '(print)')
get_ipython().run_line_magic('pdoc(print)', '')
pyvar = 'Hello world'
get_ipython().system('echo "A python variable: {pyvar}"')
get_ipython().system('echo "A python variable: {$PATH}"')
__
___
get_ipython().run_line_magic('dhist', '')
globals()
get_ipython().run_line_magic('less', 'globals()')
n=globals
n
n=globals()
n
get_ipython().run_line_magic('less', 'n')
get_ipython().run_line_magic('less', 'z')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('less', 'z')
get_ipython().run_line_magic('less', 'ls')
get_ipython().run_line_magic('less', 'n')
get_ipython().run_line_magic('less', 'z')
z %less
print(z)
get_ipython().run_line_magic('env', '')
get_ipython().run_line_magic('lsmagic', '')
get_ipython().run_line_magic('matplotlib', '--list')
get_ipython().run_line_magic('sx', 'fd')
sd fd -epy
get_ipython().run_line_magic('sx', 'fd -epy')
get_ipython().run_line_magic('sx', 'lt -lhrt')
get_ipython().run_line_magic('sx', 'ls -lhrt')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pycat', 'sheets.py')
get_ipython().run_line_magic('pycat', 't.py')
get_ipython().run_line_magic('reset', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('reset', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('lsmagic', '')
get_ipython().run_line_magic('alias', '')
lt
get_ipython().run_line_magic('unalias', 'less')
less z
less(z)
less z
get_ipython().run_line_magic('less', 'z')
get_ipython().run_line_magic('alias', '')
get_ipython().run_line_magic('more', 'z')
get_ipython().run_line_magic('quickref', '')
get_ipython().run_line_magic('magic', '')
get_ipython().run_line_magic('alias_magic', 'w %whos')
get_ipython().run_line_magic('w', '')
v=1
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('alias_magic', 'currdir pwd')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('alias_magic', 'h history')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('env', '')
ss=env
print(env)
ss=env
get_ipython().run_line_magic('history', '5')
get_ipython().run_line_magic('history', '50')
dir(history)
get_ipython().run_line_magic('history', '10')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
h
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('run', 'test.py')
w
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('load', 'test.py')
# %load test.py
import re
def doub(arr):
    for a in arr:
        print(a)

x=''' April is the cruellest month, breeding
Lilacs out of the dead land, mixing
Memory and desire, stirring
Dull roots with spring rain.
Winter kept us warm, covering
Earth in forgetful snow, feeding
A little life with dried tubers.
Summer surprised us, coming over the Starnbergersee
With a shower of rain; we stopped in the colonnade,
And went on in sunlight, into the Hofgarten,
And drank coffee, and talked for an hour.
Bin gar keine Russin, stamm’ aus Litauen, echt deutsch.
And when we were children, staying at the arch-duke’s,
My cousin’s, he took me out on a sled,
And I was frightened. He said, Marie,
Marie, hold on tight. And down we went.
In the mountains, there you feel free.
I read, much of the night, and go south in the winter.'''
print(f'The wasteland \n{x}')

y=re.sub(r'[^a-zA-Z]', ' ' ,x)
z=re.sub(r"\s+", " ", y).split(' ')
import random
s=[]
print(z)
def a(p):
    return set(p)
print(f'the set is {a([4,4,5,6])}')
def a(x):
    if len(x)>3:
        return x[2]
for a in range(30):
    s.append(round(random.random()*50))
def u(p):
    p=sorted(p)
    return p
    
get_ipython().run_line_magic('whos', '')
w
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('less', 'z')
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('pinfo2', 'square')
get_ipython().run_line_magic('pinfo', 'square')
get_ipython().run_line_magic('pinfo2', 'len')
import filelock
get_ipython().run_line_magic('w', '')
x = os.environ.keys()
import os
x = os.environ.keys()
get_ipython().run_line_magic('page', 'x')
get_ipython().run_line_magic('page', 'z')
get_ipython().run_line_magic('w', '')
x
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('page', 'z')
get_ipython().run_line_magic('page', 'print(z)')
print(z)
z=[a for a in z if len(a)!=0]
print(z)
import sys
[for a in dir(sys) if not a.startswith('_')]
[a for a in dir(sys) if not a.startswith('_')]
print([a for a in dir(sys) if not a.startswith('_')])
n='sys'
dir(n)
dir(sys)
n
dir(r'n')
type(n)
import n
n
get_ipython().run_line_magic('page', 'dir(sys)')
dir(sys)
f'{dir(sys)}'
f'{[dir(sys)]}'
f'{[a for a in dir(sys)] }'
def plus:
    print('plus')
def plus():
    print('plus')
    
plus()
def z(z):
    print(dir(z))
    
z(a)
z(sys)
def z(z):
    print([a for a in dir(z) if not a.startswith('_']))
def z(z):
    print([a for a in dir(z) if not a.startswith('_')])
    
get_ipython().run_line_magic('whos', '')
z(sys)
import requests
z(requests)
help(requests)
help(requests)
get_ipython().run_line_magic('history', '')
z=history
zz=get_ipython().run_line_magic('history', '')
zz
print(zz)
get_ipython().run_line_magic('whos', '')
get_ipython().run_cell_magic('time', '', 'import random\nfor i in range(0, 1000000):\n    random.random()\n    \n')
def x():
    import random
        for i in range(0, 1000000):
        random.random()
def x():
for i in range(0, 1000000):
    random.random()
def xx():
    for i in range(0, 1000000):
    random.random()
def xx():
    for i in range(0, 1000000):
        random.random()
        
xx()
get_ipython().run_cell_magic('time', '', 'xx()\n\n')
get_ipython().run_cell_magic('time', '', 'xx()\n\n')
def xx():
    for i in range(0, 100000000):
        random.random()
        
get_ipython().run_cell_magic('time', '', 'xx()\n\n')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('alias', '')
get_ipython().run_line_magic('man', 'ls')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('alias', '')
get_ipython().run_line_magic('page', 'z')
get_ipython().run_line_magic('page', 'y')
y=y y y
y=y + y + y
y
for z in range(30):print(z)
for z in range(30):y+=y
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('alias', '')
get_ipython().run_line_magic('ldir', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('lx', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('run', 'test.py')
get_ipython().run_line_magic('w', '')
w
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('whos', '')
impor os
import os
get_ipython().run_line_magic('w', '')
import os
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('whos', '')
import requests
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('w', '')
w
get_ipython().run_line_magic('w', '')
import requests
get_ipython().run_line_magic('w', '')
print('okkkk')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('whos', '')
info reqests
info reqqests
get_ipython().run_line_magic('pinfo', 'requests')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('w', '')
vip
import requests
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('whos', '')
import requests
wexport PYTHONSTARTUP=~/.pythonrc
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('whos', '')
import os
get_ipython().run_line_magic('whos', '')
import collections
get_ipython().run_line_magic('whos', '')
os
requests
z(requests)
zdir(requests)
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '1')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('edit', '0')
get_ipython().run_line_magic('edit', '2')
get_ipython().run_line_magic('edit', '4')
get_ipython().run_line_magic('h', '')
type(h)
get_ipython().run_line_magic('alias', '')
get_ipython().run_line_magic('man', 'alias')
get_ipython().run_line_magic('man', 'find')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('edit', '3')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('whos', '')
clipboard
get_ipython().run_line_magic('who', '')
zdir(clipboard)
help(clipboard)
import pyperclip
help(pyperclip)
help(pyperclip)
zdir(hyperclip)
zdir(pyperclip)
pyperclip.copy(str(dir(os)))
zdir(os)
print(zdir(os))
for a in zdir(os):
    print(a)
    
vip
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('whos', '')
os
clipboard
clipboard
get_ipython().run_line_magic('whos', '')
zdir(os)
zdir(os)
print(zdir(os))
[a for a in zdir(os)]
print([a for a in zdir(os)])
zdir(pyperclip)
print(zdir(pyperclip))
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('whos', '')
import pyperclip
get_ipython().run_line_magic('whos', '')
dir()
[for a in dir() if not a.startswith('_')]
[a for a in dir() if not a.startswith('_')]
dir()
d()
dir()
d()
def d():
  print([a for a in dir() if not a.startswith('_')])
  
d()
[a for a in dir() if not a.startswith('_')]
print([a for a in dir() if not a.startswith('_')])
d()
globals
globals()
[a for a in globals()]
def d():
  print([a for a in globals() if not a.startswith('_')])
  
d()
d()
d
d()
d()
inspect.getsource(exit)
inspect.getsource(d)
d()
inspect.getsource(os)
d()
inspect.getsource(ipy)
d()
d()
zdir(pyperclip)
dir()
d()
zdir(pyperclip)
print())zdir(pyperclip)
print(zdir(pyperclip))
dir()
d()
get_ipython().run_line_magic('run', 'test.py')
d()
get_ipython().run_line_magic('page', 'y')
get_ipython().run_line_magic('page', 'z')
z=[a for a in z if len(a)!=0]
z
print(str(z))
[str(a) for a in z]
[str(a) for a in z]
print(" ".join(z))
print("  - ".join(z))
print(z)
z.append(1)
print(z)
print("  - ".join(z))
str(1)
map(str, z)
list(map(str, z))
list(map(upper, z))
Upper('z')
get_ipython().run_line_magic('man', 'lower')
help(lower)
z
[str(a) for a in z]
" ".join([str(a) for a in z])
" ".join([str(a).upper() for a in z])
" ".join([str(a).lower() for a in z])
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('alias', '')
get_ipython().run_line_magic('ldir', '')
get_ipython().run_line_magic('lx', '')
d()
inspect.getsource(d)
inspect.getsource(d).replace('a','xxx')
inspect.getsource(d).replace('\n','xxx')
inspect.getsource(d).replace('\n','')
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)
def tracer(x):
    def wrapper():
        print('header')
        x()
        print('footer') 
    return wrapper

@tracer
def h():
    print(f'[a for a in dir()]')
    
h()
def h():
    print(f'{[a for a in dir()]}')
    
h()
def tracer(x):
    def wrapper():
        print('header')
        x()
        print('footer') 
    return wrapper

@tracer
def h():
    print(f'{[a for a in dir()]}')
    
h()
d()
inspect.getsource(d)
@tracer
def h():
    print(f'{[a for a in globals]}')
    
h()
[a for a in globals()]
def tracer(x):
    def wrapper():
        print('header')
        x()
        print('footer') 
    return wrapper

@tracer
def h():
    print(f'{[a for a in globals()]}')
    
h()
help(lower)
help(upper)
h
get_ipython().run_line_magic('history', '')
help(print)
help(h)
help(os)
get_ipython().run_line_magic('ls', '')
d()
import requests
[a for a in d()]
def filt(x):
    return [a for a in x not if a.startswith('_')]
def filt(x):
    return [a for a in x  if not a.startswith('_')]
    
[n for n in globals() if filt(n)]
[n for n in globals() if filt(n)]
get_ipython().run_line_magic('history', '')
filt('xxx')
filt('xx_x')
globals()
d()
[n for n in globals() if not a.startswith('_')]
[n for n in globals() if not n.startswith('_')]
[n for n in globals() ]
[f for f in [n for n in globals() ]]
[f for f in [n for n in globals() ]][4]
[f for f in [n for n in globals() ]][4:8]
def starts(x):
    return x.startswith('a')
    
starts('jim')
starts('ajim')
list('jim')
[t for t in list('jim') if starts(t)]
[t for t in list('ajim') if starts(t)]
def starts(x):
    return not x.startswith('a')
    
[t for t in list('ajim') if starts(t)]
[t for t in list('ajim') if starts(t)]
def starts(x):
    return not x.startswith('_')
    
[t for t in globals() if starts(t)]
d()
d()
zdir(d)
inspect.getsource(d)
inspect.getsource(zdir)
dir(zdir)
print(dir(zdir))
zdir.__dict__
import re
text = 'a11 b213 a13 x15 c21 a40 a55 m34'
for match in re.finditer(r'a\d*\W', text):
    print (match[0])
    
re.finditer(r'.*', text)
[a for a in re.finditer(r'.*', text)]
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('c', '')
import requests
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
r=requests(url)
url
dir()
d()
r=requests.get(url)
print(r)
type(r)
r.headers
type(r.headers)
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('edit', '_2')
get_ipython().run_line_magic('edit', '_1')
get_ipython().run_line_magic('edit', '_1')
get_ipython().run_line_magic('edit', '1')
get_ipython().run_line_magic('edit', '3')
get_ipython().run_line_magic('edit', '8')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('edit', '11')
get_ipython().run_line_magic('c', '')
r
get_ipython().run_line_magic('h', '')
r.headers
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('edit', '')
s=r.headers
s
s.get('Server')
s.items()
print(s.items())
get_ipython().run_line_magic('edit', '')
fd
fd.items()
fd.keys()
fd.values()
fd.pop('name')
fd
fd.popitem()
fd
fd.keys()
fd.popitem()
fd.keys()
fd.update{
    "name": "freeCodeCamp", 
    "founder": "Quincy Larson",
    "type": "charity", 
    "age": 8, 
    "price": "free", 
    "work-style": "remote",
}
fd
fd.update({'new': 'item new'})
fd
dir()
d()
d()
import requests
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
get_ipython().run_line_magic('h', '')
url = 'http://httpbin.org/json'
r = requests.get(url)
r
zdir(r)
r.headers
r.headers.keys()
r.headers.items()
r.text
r.text.replace('\n','')
print(r.text)
type(r.text)
d()
url = 'http://httpbin.org/get'
payload = {
    'website':'dataquest.io',
    'courses':['Python','SQL']
    }
r = requests.get(url, params=payload)
print('Response Content:\n',r.text)
get_ipython().run_line_magic('man', 'jq')
manv jq
get_ipython().run_line_magic('alias', 'manv')
get_ipython().run_line_magic('man', 'jq')
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
r.text
j=json.loads(r.text)
import json
j=json.loads(r.text)
j
j.keys()
type(j)
j.range
d()
print(j)
import pprint
pprint(j)
import pprint as pprint
pprint(j)
from pprint import pprint
pprint(j)
d(0)
get_ipython().run_line_magic('run', 'test.py')
z
pprint(z)
pprint(z, depth=1)
pprint(j, depth=1)
import json
import pprint
from urllib.request import urlopen
with urlopen('https://pypi.org/pypi/sampleproject/json') as resp:
    project_info = json.load(resp)['info']
    
project_info
import json
import pprint
from urllib.request import urlopen
with urlopen('https://pypi.org/pypi/sampleproject/json') as resp:
    project_info = json.load(resp)['info']
    
project_info
pprint(project_info, depth=1)
from pprint import pprint
pprint(project_info, depth=1)
get_ipython().run_line_magic('c', '')
pprint(project_info, depth=1)
get_ipython().run_line_magic('page', 'pprint(project_info)')
get_ipython().run_line_magic('page', 'z')
pprint(project_info, depth=1, width=60)
j=pprint(project_info, depth=1, width=60)
j
get_ipython().run_line_magic('page', 'project_info')
with urlopen('https://pypi.org/pypi/requests/json') as resp:
    project_info = json.load(resp)['info']
    
get_ipython().run_line_magic('page', 'project_info')
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
j
pprint(j)
j.keys()
len(j)
for a in j:
    print(a)
    
hash(1)
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '-1')
get_ipython().run_line_magic('edit', '1')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('c', '')
print(hash(a))
print(hash(1))
print(hash('jim'))
dictionary[42] = "the answer to the ultimate question of life, the universe, and everything."
dictionary={}
dictionary[42] = "the answer to the ultimate question of life, the universe, and everything."
print(dictionary)
get_ipython().system('ls')
x=get_ipython().getoutput('ls')
x
get_ipython().run_line_magic('edit', '4')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('history', '')
get_ipython().run_line_magic('edit', '22')
get_ipython().run_line_magic('edit', '222')
get_ipython().run_line_magic('his', '-n')
get_ipython().run_line_magic('history', '-n')
get_ipython().run_line_magic('edit', '31')
get_ipython().run_line_magic('edit', '7')
get_ipython().run_line_magic('history', '-ng')
get_ipython().run_line_magic('alias_magic', 'h history -n')
get_ipython().run_line_magic('h', '-n')
get_ipython().run_line_magic('h', '-ng')
get_ipython().run_line_magic('page', 'h -n')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '-n')
get_ipython().run_line_magic('recall', '1-5')
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
j
pprint(j)
j.keys()
len(j)
ls
ls
print
get_ipython().run_line_magic('c', '')
ls
print('hello')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('h', '-n')
get_ipython().run_line_magic('edit', '44-45')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('c', '')
d()
pprint(dictionary)
dictionary.update[1,'this']
add_characters_3 = [
    ("Rubeus Hagrid", "Gryffindor"),
    ("Minerva McGonagall", "Gryffindor")
]
dictionary.update[add_characters_3]
dictionary
dictionary.clear()
dictionary
d={}
add_characters_1 = {
    "Albus Dumbledore": "Gryffindor",
    "Luna Lovegood": "Ravenclaw"
}
d.update(add_characters_1)
d
d.update(1,'not')
d.update([1,'not'])
d.update({[1,'not']})
d.update({1,'not'})
d
d.update({'x','not'})
get_ipython().run_line_magic('h', '')
d.update({'x':'not'})
d
d()
d()
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
j.keys()
[a for a in j.keys()]
[a for a in j.keys()]
j.get('range')
j.get('values')
for a in j.get('values'):
    print(a)
    
j.get('values2')
j.get('values2','noth')
k=j.keys()
k
k=[a for a in j.keys()]
k
[for j[l] for l in k ]
[l  for l in k ]
for a in [l  for l in k ]:
    print(a)
    
for a in [l  for l in k ]:
    print(k[a])
    
k[1]
j='''Krishnamurti was born in South India, in what is now the modern-day'''
j
d()
import re
d()
re.sub(r'\s','','jim ste')
re.sub(r'[^a-zA-Z0-9]','','jim ste')
re.sub(r'[^a-zA-Z0-9]','','jim ste%%%')
re.sub(r'[^a-zA-Z0-9]','',j)
re.sub(r'[^a-zA-Z0-9]',' ',j)
k=re.sub(r'[^a-zA-Z0-9]',' ',j)
k
l=re.sub(r'\s+',' ',k)
l
def junk(a):
  return re.sub(r'[^a-zA-Z0-9]',' ',a)
  
get_ipython().run_line_magic('whos', '')
junk(j)
j
get_ipython().run_line_magic('c', '')
def junk(a):
  b= re.sub(r'[^a-zA-Z0-9]',' ',a)
  return re.sub(r'\s+',' ',b)
  
junk(j)
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('cd', 'all')
get_ipython().run_line_magic('cd', 'bash')
get_ipython().run_line_magic('ls', '')
l
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('c', '')
l
get_ipython().run_line_magic('ls', '')
get_ipython().system('nvim')
get_ipython().system('nvim b.json')
d()
type(d)
print(sorted([a for a in globals() if not a.startswith('_')]))
def d():
  print(sorted([a for a in globals() if not a.startswith('_')]))
  
d()
get_ipython().run_line_magic('c', '')
d()
dir(a)
type(a)
dir(a)
d()
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
d()
def foo(x):
    global tt
    tt = x*2
    
tt
foo(1)
tt
def d():
    global dd=sorted([a for a in globals() if not a.startswith('_')])
    print(dd)
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    print(dd)
    
d()
dd
get_ipython().run_line_magic('c', '')
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    print(dd)

def p(a):
    print(a)
    
p(dd)
type(dd)
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
j
pprint(j)
page = requests.get("https://en.wikipedia.org/wiki/Main_Page")
 
# display status code
print(page.status_code)
 
# display scrapped data
print(page.content)
get_ipython().system('pip list')
n=get_ipython().getoutput('pip list')
n
print(n)
d()
j
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/eliot?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
j
type(j)
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('edit', '-p')
ev
dir(ev)
ev
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('edit', '-2')
get_ipython().run_line_magic('edit', '22')
get_ipython().run_line_magic('cd', '/tmp')
lt
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('ls', 'py*')
get_ipython().run_line_magic('ls', '')
get_ipython().system('ls')
get_ipython().system('ls -lhrt')
get_ipython().run_line_magic('pwd', '')
get_ipython().system('cd ..')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('ls', '')
get_ipython().system('pwd')
get_ipython().run_line_magic('cd', '/mnt/c')
get_ipython().run_line_magic('cd', 'bash')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', 'all/bash')
get_ipython().run_line_magic('ls', '')
d()
d
dd
get_ipython().run_line_magic('edit', '')
d()
dd
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/eliot?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)

import json
r=requests.get(url)
r
r.text
j=json.loads(r.text)
j
j.keys()
for a in j.keys():
    print(a)
    
[a for a in j.keys()]
[a for a in j.keys()][1]
j[a for a in j.keys()][1]
j
j[[a for a in j.keys()][1]]
j[[a for a in j.keys()][2]]
len(j.keys())
a=range(len(j.keys()))
a
for x in a:
    p(x)
    
for x in a:
    print(j[[a for a in j.keys()][x]])
    
for x in a:
    print(f'x is ' {j[[a for a in j.keys()][x]]})
for x in a:
    print(f'x is  {j[[a for a in j.keys()][x]]}')
    
j.keys()
j.keys()[0]
type(j.keys())
list(j.keys())[0]
list(j.keys())[0]
for x in a:
    print(f'x is  {list(j.keys())[x]} {j[[a for a in j.keys()][x]]}')
    
j
j['values']
type(j['values']]
type(j['values'])
j['values'][1]
j.get('values2','noth')
j.get('values','noth')
j.get('values',None)
j.get('valuesx',None)
j.get('valuesx')
get_ipython().run_line_magic('c', '')
repr(j.get('valuesx'))
print(j.get('valuesx'))
j
for a in j:
    print(a)
    
for a in j:
    print(a, j[a])
    
for a in j:
    print(f'{a} j[a]')
    
for a in j:
    print(f'{a} -- {j[a]}')
    
' '.join(j['values'])
k=j['values']
k
' '.join(k)
k
for b in k:
    p(b)
    
for b in k:
    p(str(b))
    
k
str(k)
[a for a in k]
[a[1] for a in k]
k[1]
l=''
for a in k:
    l+=a
    
for a in k:
    l+=str(a)
    
a
k[-1]
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('cd', '%%bash')
get_ipython().run_line_magic('cd', '../all')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('ls', '*.json')
get_ipython().system('ls *.json')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', 'bash/')
get_ipython().run_line_magic('ls', '')
get_ipython().system('ls -lhrt')
get_ipython().run_line_magic('c', '')
dd
import json
d()
' '.join(k[0])
k
k[0]
len(k)
' '.join(k)
get_ipython().run_line_magic('c', '')
for key, value in j.items():
    print(f'{key} {value}')
    
j.items()
for key, value in j.items():
    print(f'{key}\n {value}')
    
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '-p')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('ls', '')
with open('b.json', 'r') as b:
    bj=json.load(b)
    
bj
bj.keys()
bj['urls']
list(bj.keys())
bjl=list(bj.keys())
p(bjl)
p(sorted(bjl))
str(sorted(bjl))
json.dumps(bjl)
dd
get_ipython().run_line_magic('h', '')
pprint(bjl)
get_ipython().run_line_magic('h', '')
pprint(bj)
pprint(bj['urls'])
bj['urls']
type(bj['urls'])
bj['urls'].split('\n')
bj['urls'].split('t')
bj['urls'].split('\n')
dd
get_ipython().run_line_magic('c', '')
d()
dd
import json
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '..')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '../all')
get_ipython().run_line_magic('cd', 'bash/')
get_ipython().run_line_magic('ls', '')
with open('b.json', 'r') as b:
    bj=json.load(b)
    
bj
bjk=bj.keys()
bjk
bjk=list(bj.keys())
print(bjk)
dd
d()
dd
os.getcwd()
get_ipython().run_line_magic('pwd', '')
os.chdir('/mnt')
get_ipython().run_line_magic('pwd', '')
os.chdir('/mnt/c/all')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', 'bash/')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('timeit', "x=x=range(100): print('hi')")
get_ipython().run_line_magic('timeit', 'd()')
dir_path = r'.'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
def ti():
    dir_path = r'.'

    # list to store files
    res = []

    # Iterate directory
    for path in os.listdir(dir_path):
        # check if current path is a file
        if os.path.isfile(os.path.join(dir_path, path)):
            res.append(path)
    print(res)
    
ti()
get_ipython().run_line_magic('timeit', 'ti()')
def ti():
    dir_path = r'/mnt/c'

    # list to store files
    res = []

    # Iterate directory
    for path in os.listdir(dir_path):
        # check if current path is a file
        if os.path.isfile(os.path.join(dir_path, path)):
            res.append(path)
    print(res)

ti()
get_ipython().run_line_magic('timeit', 'ti()')
get_ipython().run_line_magic('quickref', '')
whos_ls
get_ipython().run_line_magic('whos_ls', '')
get_ipython().run_cell_magic('time', '', '\nimport numpy as np\nfor i in range(1000):\n    np.random.random_sample()\n    \n')
get_ipython().run_cell_magic('writefile', 'test.py', '\na = 5\nb = 10\na, b = b, a\nprint("a =", a)\nprint("b =", b)\n\n')
get_ipython().run_line_magic('ls', '')
get_ipython().system('ls -lhrt')
get_ipython().system('nvim test.py')
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '')
get_ipython().run_cell_magic('writefile', 'test.py', '\na = 5\nb = 10\na, b = b, a\nprint("a =", a)\nprint("b =", b)\n\n')
get_ipython().run_line_magic('system', "echo 'Hello World'")
get_ipython().run_line_magic('timeit', 'out = [i*i for i in range(1000000)]')
out
dir_path = r'/mnt/c'
for path in os.scandir(dir_path):
    if path.is_file():
        print(path.name)
        
import sys
print(f'version is {sys.version}')
import requests
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
r=requests.get(url)
dir(r)
a=range(5)
a
for b in a:
    print(b)
    
get_ipython().run_line_magic('whos', '')
import pyperclip
help(pyperclip)
cls
get_ipython().run_line_magic('c', '')
d=''
d+='jim'
d
for b in a:
    d+=b
    
for b in a:
    d+=str(b)
    
d
for b in a:
    d+=f'{str(b)}'
    
d
del d
d
d=''
for b in a:
    d+=f'{str(b)}\n'
d
print(d)
for b in a:
    d+=f'line {str(b)}\n'
    
d
print(d)
type d
type(d)
d=''
for b in a:
    d+=f'line {str(b)}\n'
    
pyperclip.copy(d)
pyperclip.copy("jim")
get_ipython().run_line_magic('c', '')
with open('AnyFile.txt', 'w') as j:
    print('this is j' file=j)
with open('AnyFile.txt', 'w') as j:
    print('this is j', file=j)
    
get_ipython().run_line_magic('ls', '')
get_ipython().system('cat AnyFile.txt')
get_ipython().run_line_magic('history', '-ng')
d
with open('AnyFile.txt', 'w') as j:
    print(d, file=j)
    
get_ipython().run_line_magic('pwd', '')
import pyperclip
pyperclip.copy("jim")
import pyperclip
pyperclip.copy("jim")
get_ipython().run_line_magic('ls', '')
with open("mp3_to_link", "r") as lt:
    ltl=lt.read()
    
ltl
for a in ltl:
    print(a)
    
for a in ltl:
    print(a)
    
print(ltl)
type(ltl)
with open("mp3_to_link", "r") as lt:
    ltl=lt.readlines()
    
ltl
ltl[1]
alist = [line.rstrip() for line in open('mp3_to_link')]
alist
alist[1]
alist[1:10]
alist[-1:10]
alist[-1:-2]
get_ipython().run_line_magic('c', '')
[a for a in alist]
[len(a) for a in alist]
print([len(a) for a in alist])
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('whos', '')
print([len(a) for a in alist if len(a)==0])
print([len(a) for a in alist if len(a)=>2])
print([len(a) for a in alist if len(a)>2])
print([a for a in alist if len(a)12])
print([a for a in alist if len(a)>12])
print([a for a in alist if len(a)>20])
print([a for a in alist if len(a)<20])
get_ipython().run_line_magic('c', '')
def jj(a):
    return f'jim is {a} forever'
    
jj('pp')
list(map(jj,alist))
2000/60
alist = [line.rstrip() for line in open('mp3_to_link')]
alist
def jj(a):
    return f' ni -ItemType SymbolicLink -Path {a} -Target {a}'
    
list(map(jj,alist))
b=list(map(jj,alist))
type(b)
for q in b:
    print(q)
    
alist
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\\you\\kb\\{a} -Target {a}'
    
b=list(map(jj,alist))
b
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\you\kb\{a} -Target {a}'
    
b=list(map(jj,alist))
b
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\you\kb\{a} -Target {a}'
    
b=list(map(jj,alist))
b
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\you\kb\{a} -Target {a}'
    
f'\c:\'
f'c'
f'c\'
f'c\\'
repr('c\\')
repr('c\')
print(r'c:\')
print(r'c:\\')
print(f'c:\\')
def nn(a):
    return f'c:\{a}'
    
nn('jim')
def nn(a):
    return '\'
def nn(a):
    return '\\'
    
nn('jim')
r'tt'
r'\tt'
r'\\tt'
r'/\tt'
f'c\\'
r(f'c\\')
r(f'c:\\')
r'\tt'
a=r'c:\all'
p a
print(a)
a
def jj(a):
    return f' ni -ItemType SymbolicLink -Path r'c:\you\kb\'{a} -Target {a}'
d=r'c:\you\kb\'
a=r'c:\all\'
a=r'c:\all\\'
print(a)
a=r'c:\all\\jim'
a=r'c:\all\jim'
a=r'\'
a=r'\\'
f'{a}'
f'{a\}'
repr(a)
get_ipython().run_line_magic('c', '')
def jj(a):
    return fr'{a}'
    
jj('pp')
def jj(a):
    return fr'c:\{a}'
    
jj('pp')
r'jj('pp')'
print(jj('pp'))
f' {jj('pp')}
f' {jj("pp")}'
cmd_drive = r"\\"
    local_hostname = "hostname"
    current_sid = "SID"
    currentline_instance_number = "04"
    cmd_pf = os.path.join(cmd_drive, local_hostname, "sapmnt", current_sid, "SYS", "profile")
    cmd_pf = cmd_pf + "\\" + str(current_sid) + "_*" + str(currentline_instance_number) + "_" + str(currentline_host)
    cmd_pf = "dir " + cmd_pf + " /b /a-d"
    print(cmd_pf)`
str(jj("pp"))
file_name = 'C:/Users/Alice/Desktop/example.txt'

# 👇️ C:/Users/Bob/Desktop/example.txt
print(file_name)
name = 'Bob'

my_str = fr'Alice\{name}\Carl'
my_str
print(my_str)
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\you\kb\{a} -Target {a}'
    
jj('pp')
print(jj('pp'))
nn=print(jj('pp'))
nn
nn=1
from io import StringIO
buffer = StringIO()
sys.stdout = buffer
import sys
buffer = StringIO()
sys.stdout = buffer
print('This will be stored in the print_output variable')
print_output = buffer.getvalue()
print_output
buffer
print('xxx')
buffer
buffer.getvalue()
a=buffer.getvalue()
dir(buffer)
sys.stdout = sys.__stdout__
example = 'hello 123'

# 👇️ remove call to print() to assign to a variable
my_str = str(example)
print(my_str) # 👉️ hello 123

# -------------------------------------

# ✅ Redirect print() output to a variable

buffer = StringIO()
sys.stdout = buffer

print('This will be stored in the print_output variable')
print_output = buffer.getvalue()

# 👇️ restore stdout to default for print()
sys.stdout = sys.__stdout__

# 👇️ -> This will be stored in the print_output variable
print('->', print_output)
print_output
r=r'\\'
r
print(r)
r=r'\'
r=rf'\'
get_ipython().run_line_magic('c', '')
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\you\kb\{a} -Target {a}'
    
jj('pp')
jj('pp').replace("/", "\\/")
jj('pp').replace("/0", "\\/")
jj('pp').replace("o", "\\/")
jj('pp').replace("]]", "\\/")
jj('pp').replace("\\", "\\/")
jj('pp').replace("\\", "\")
jj('pp').replace("\\", "\\")
print(jj('pp').replace("\\", "\\"))
print(jj('pp'))
crumb = 'abc\xyz'
crumb.encode('string-escape')
crumb = 'abc\xyz'
crumb = r'abc\xyz'
crumb
f'{crumb}
f'{crumb}'
f'r{crumb}'
repr(crumb)
fr'r{crumb}'
fr'{crumb}'
fr"{crumb}.replace('u','xxx')"
fr"{crumb}".replace('u','xxx')
fr"{crumb}".replace('\','\')
fr"{crumb}".replace('\','\\')
fr"{crumb}".replace('\\','\\')
def jj(a):
    return f" ni -ItemType SymbolicLink -Path fr'c:\you\kb\'{a} -Target {a}"
    
jj('pp')
def jj(a):
    return f" ni -ItemType SymbolicLink -Path {fr'c:\you\kb\'}{a} -Target {a}"
def jj(a):
    return f" ni -ItemType SymbolicLink -Path {r'c:\you\kb\'}{a} -Target {a}"
a={chr(92)}
a
print(a)
print(fr'{a}')
print(fr'{a}\')
print(fr'{a}\\')
my_string = f"🍔foo{bar}".replace("🍔", "\\")
bar='ha'
my_string = f"🍔foo{bar}".replace("🍔", "\\")
my_string
print(my_string)
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\you\kb\{a} -Target {a}'
    
b=list(map(jj,alist))
b
print(b[3])
def jj(a):
    return f' ni -ItemType SymbolicLink -Path c:\you\kb\{a} -Target c:\you\crows\{a}'
    
b=list(map(jj,alist))
b
print(b[3])
print(b[5])
for q in b:
    print(q)
    
print('This message will be displayed on the screen.')

with open('filename.txt', 'w') as f:
    print('This message will be written to a file.', file=f)
    
get_ipython().run_line_magic('ls', '')
get_ipython().system('nvim filename.txt')
with open('filename.txt', 'a') as f:
  for q in b:
      print(q, file=f)
      
get_ipython().system('nvim filename.txt')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
200/60
with Popen(["ifconfig"], stdout=subprocess.PIPE) as proc:
   print(proc.stdout.read())
   
import subprocess
with Popen(["ifconfig"], stdout=subprocess.PIPE) as proc:
   print(proc.stdout.read())
   
import os

cmd = "git --version"

returned_value = os.system(cmd)  # returns the exit code in unix
print('returned value:', returned_value)
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/eliot?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
for key, value in j.items():
    print(f'{key} {value}')
    
j
pprint(bj['urls'])
type(j)
get_ipython().run_line_magic('c', '')
j
url
import pyperclip
pyperclip.copy("jim")
import pyperclip
pyperclip.copy("jim")
import pyperclip
pyperclip.copy("jim")
import pyperclip
pyperclip.copy("jim steffes")
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/eliot?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
for key, value in j.items():
    print(f'{key} {value}')
    
import requests
from pprint import pprint
import json
url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/eliot?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs";
r=requests.get(url)
j=json.loads(r.text)
for key, value in j.items():
    print(f'{key} {value}')
    
type(j)
hash(1)
hash("b")
hash("jim")
hash("jim")
hash("jims")
j["values"]
type(j["values"])
dictionary[42] = "the answer to the ultimate question of life, the universe, and everything."
d={}
d[21]="nothing"
p(d)
d[21]="nothing again"
p(d)
del d[21]
p(d)
del d[21]
d.popitem()
d['jim']='steffes'
d
d.popitem()
d
d['jim']='steffes'
d['jim']='steffessssssss'
d['tom']
d.get['tom']
d.get['tom','none']
d
d.get('tom','none')
d.get('jim','none')
d.get('jimssssssss','none')
j.items()
type(j.items())
for a in j.items():
    print(a)
    
[a for a in j.items()]
pprint(j)
get_ipython().run_line_magic('c', '')
j.keys()
pprint(j.keys())
[a for a in j.keys()]
[a for a in j.values()]
[a for a in j.values()][2]
str([a for a in j.values()][2])
import requests
def sheet():
    url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
    r=requests.get(url)
    return r
    
a=sheet
a
a=sheet()
a
dir(a)
a.text
type(a.text)
get_ipython().run_line_magic('who', '')
get_ipython().run_line_magic('whos', '')
5000/60
(5000/60)/24
dir_path = r'E:\\account\\'
print(dir_path)
d=r'c:\all\'
d= r'c:\all\'
d = r'c:\all\'
d = r'c:\\all\\'
get_ipython().run_line_magic('whos', '')
p(d)
p(d)
for path in os.listdir(d):
     res.append(path)
     
import os

# folder path
dir_path = r'E:\\account\\'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
print(os.listdir())
#!/bin/python3.10
import os
#list files 
d=r'/mnt/c/all'
#store list
res=[]
#iterate directory
for path in os.listdir(d):
    #make sure file
    if os.path.isfile(os.path.join(d,path)):
        res.append(path)
print(res)
d=r'/mnt/c/all/ps'
#store list
res=[]
#iterate directory
for path in os.listdir(d):
    #make sure file
    if os.path.isfile(os.path.join(d,path)):
        res.append(path)
print(res)
res[1]
get_ipython().run_line_magic('pwd', '')
d
os.path.join(d,res[1])
[a for a in range(30)]
get_ipython().run_line_magic('c', '')
[a for a in range(3)]
get_ipython().run_line_magic('history', '-ng')
[a for in d]
[a for a in d]
d
type(d)
[a for a in res]
get_ipython().run_line_magic('history', '-ng')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('h', '')
import os
d=r'/mnt/c/all/ps'
for p in os.listdir(d):
    print(p)
    
for p in os.listdir(d):
    print(os.path.join(d,p))
    
    
    
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
fs=[]
for p in os.listdir(d):
    fs.append(os.path.join(d,p))
    
fs
get_ipython().run_line_magic('h', '')
alist = [line.rstrip() for line in open('fs[1]')]
fs[1]
alist = [line.rstrip() for line in open(fs[1])]
alist
type(alist)
alist[3]
alist[6]
alist
str(alist)
p(str(alist))
print(str(alist))
print(alist)
import pprint
pprint(alist)
help(pprint)
j=0
j+=1
j
j+=j
j
def suml(l):
    a=0
    for j in l:
        a+=j
    return a
    
suml(33)
l
list(3)
list(3,2)
list([3,2])
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
suml([4,3])
suml([4,3,22])
p=[1,3,4]
p=[1,3,4,2]
len(p)
for x in range(len(p))
for x in range(len(p)):
    print(p[x])
    
def max(l):
    for x in range(len(l)):
        if l[x]> l[x+1] and l[x] > max:
                max=l[x]
                print(max)
                
max([1,3])
def max(l):
    r=len(l)
    for x in range(r):
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
max([1,3])
def max(l):
    r=len(l)
    for x in range(r):
        print(x)
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
max([1,3, 10, 9])
def max(l):
    r=len(l)
    max=0
    for x in range(r):
        print(x)
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
max([1,3, 10, 9])
def max(l):
    r=len(l)
    max=0
    for x in range(r):
        print(f'in range x: {x}')
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
    return max
print(max([8,1,3,10, 9]))
def max(l):
    r=len(l)
    max=0
    for x in range(r):
        print(f'in range x: {x}')
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
    return max
print(max([8,1,3,22,10, 9]))
def max(l):
    r=len(l)
    max=0
    for x in range(r):
        print(f'in range x: {x}')
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
    return max
print(f'the max is {max([22,8,1,3,10, 9])}')
def nn(a):
    return f'the answer is {2*22)'
kk=f'JIM {2*2}'
kk
def nn(a):
    return f'the answer is {2*22}'
    
nn()
nn(3)
get_ipython().run_line_magic('c', '')
def max(l):
    r=len(l)
    max=0
    for x in range(r):
        print(f'in range x: {x}')
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
    return f'the max is {max}'
    
max([1,3, 10, 9])
max([1,3, 10,100, 9])
max([1,3, -10,100, 9])
max([101,3, -10,100, 9])
max([101,3, -10,100, 9,200])
get_ipython().run_line_magic('c', '')
def max(l):
    r=len(l)
    max=0
    for x in range(r):
        # print(f'in range x: {x}')
        if x+1 < r:
            if l[x]> l[x+1] and l[x] > max:
                    max=l[x]
                    print(max) 
        else:
            if l[x]>max:
                max=l[x]
    return f'the max is {max}'
    
max([101,3, -10,100, 9,200])
max([101,3, -10,100, 9,00])
get_ipython().run_line_magic('c', '')
def max_num_in_list( list ):
    max = list[ 0 ]
    for a in list:
        if a > max:
            max = a
    return max
print(max_num_in_list([1, 2, -8, 0]))
import random
help(random)
get_ipython().run_line_magic('c', '')
random
random.randint(0,100)
def rn():
    return random.randint(-200,200)
    
rn()
rn()
rn()
[rn() for a in range(2)]
[rn() for a in range(30)]
lt=[rn() for a in range(30)]
print(lt)
def mnl( list ):
    max = list[ 0 ]
    for a in list:
        if a < max:
            max = a
    return max
    
mnl(lt)
def cntl(a):
    if len(a)<3:
        return f'{a} is smaller than 3'
        
cntl('jim')
cntl('ji')
'aaaa'[-1]
'abcd'[-1]
get_ipython().run_line_magic('c', '')
def cntl(a):
    b=[]
    for x in a:
        if len(x)<3 and x[1]==x[-1]:
            b.append(x)
    return b
    
cntl('ji')
cntl(['tim'])
cntl(['timt'])
st='''The thing that hath been, it is that which shall be; and that which is done is that which shall be done: and there is no new thing under the sun.'''
p(st)
print(st)
st.split(' ')
st=st.split(' ')
st='''The thing that hath been, it is that which shall be; and that which is done is that which shall be done: and there is no new thing under the sun.'''.split(' ')
st
get_ipython().run_line_magic('c', '')
def cntl(a):
    b=[]
    for x in a:
        print(f'x is {x} first is {x[1]}')
        if len(x)<3 and x[1]==x[-1]:
            b.append(x)
    return b

st='''The thing that hath beenb'''.split(' ')
cntl(st)
def cntl(a):
    b=[]
    for x in a:
        print(f'x is {x} first is {x[1]}{x[-1]}')
        if len(x)<3 and x[1]==x[-1]:
            b.append(x)
    return b

st='''The thing that hath beenb'''.split(' ')
cntl(st)
'bac'[-1]
get_ipython().run_line_magic('c', '')
def cntl(a):
    b=[]
    for x in a:
        print(f'x is {x} first is {x[0]}{x[-1]}')
        if len(x)<3 and x[0]==x[-1]:
            b.append(x)
    return b

st='''The thing that hath beenb'''.split(' ')
cntl(st)
get_ipython().run_line_magic('c', '')
def cntl(a):
    b=[]
    for x in a:
        print(f'x is {x} first is {x[0]}{x[-1]}')
        if len(x)<3:
        # and x[0]==x[-1]:
            b.append(x)
    return b

st='''The thing that hath beenb'''.split(' ')
cntl(st)
def cntl(a):
    b=[]
    for x in a:
        print(f'x is {x} first is {x[0]}{x[-1]}')
        if len(x)>3:
        # and x[0]==x[-1]:
            b.append(x)
    return b

st='''The thing that hath beenb'''.split(' ')
cntl(st)
def cntl(a):
    b=[]
    for x in a:
        print(f'x is {x} first is {x[0]}{x[-1]}')
        if len(x)>3  and x[0]==x[-1]:
            b.append(x)
    return b

st='''The thing that hath beenb'''.split(' ')
cntl(st)
def cntl(a):
    b=[]
    print(a)
    for x in a:
        print(f'x is {x} first is {x[0]}{x[-1]}')
        if len(x)>3  and x[0]==x[-1]:
            b.append(x)
    return b

st='''The thing that hath beenb'''.split(' ')
cntl(st)
get_ipython().run_line_magic('c', '')
def cntl(a):
    b=[]
    cnt=0
    print(a)
    for x in a:
        print(f'x is {x} first is {x[0]}{x[-1]}')
        if len(x)>3  and x[0]==x[-1]:
            cnt+=1
            b.append(x)
    return f' there are {cnt} strings {b}'

st='''The thing that hath beenb'''.split(' ')
cntl(st)
def t(n):
    return [n-1]
    
t((2,3))
def t(n):
    print(type(n))
    # return [n-1]
    
t((2,3))
t((2,3))[1]
(2,3)[1]
(2,3)[-1]
(2,3)[-2]
n=(2,3,4)
def pt(x):
    print(type(x))
    
pt(n)
pt('jim')
def('jim')
dir('jim')
p(2)
print(dir('jim'))
def t():
    return (1,4)
    
t()
a=t()
pt(a)
get_ipython().run_line_magic('who', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('pinfo2', 't')
import inspect
get_ipython().run_line_magic('whos', '')
inspect.getsource(t)
inspect.getsource(p)
type(p)
def p(x):
    print(x)
    
p(t)
p(inspect.getsource(t))
get_ipython().run_line_magic('c', '')
t()
(1,2,3)[1]
tuplex = 5, 10, 15, 20, 25
pt(tuplex)
tup="jim", "tom", "dick"
pt(tup)
p(tup)
p(tup[2])
tup[1]="joe"
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('whos', '')
p(tup)
1=tup
a=tup
p(a)
a,b,c=tup
p(a)
a,b,c,d=tup
a,b=tup
len(tup)
c
cls
get_ipython().run_line_magic('clear', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('whos', '')
tup
tup=tup + "harry"
tup=tup + ("harry")
tup=tup + ("harry",)
tup
tup=tup + ("harry","paul", "george",)
tup
tup=tup + (9,)
tup
lis(tup)
list(tup)
tup[:3]
tup[3:4]
tup[3:]
tuplex = (4, 6, 2, 8, 3, 1)
tuplex = tuplex[:5] + (15, 20, 25) + tuplex[:5]
tuplex
tuplex=tuplex[:2]
tuplex
get_ipython().run_line_magic('whos', '')
str(tup)
def ts(x):
    return str(x)
    
ts(tup)
len(tup)
tup[0]
tup[8]
tup[7]
27%7
c
get_ipython().run_line_magic('ls', '')
import glob
files = glob.glob("*.mp4")
files
print(files)
enumerate(files)
print(enumerate(files))
for a in enumerate(files):
    print(a)
    
for a, b in enumerate(files):
    print(f'{a} {b}')
    
for a, b, c in enumerate(files):
    print(f'{a} {b}')
    
for a,  in enumerate(files):
    print(f'{a} {b}')
    
for a  in enumerate(files):
    print(f'{a} {b}')
    
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('whos', '')
p(2)
get_ipython().run_line_magic('c', '')
help(inspect)
pyperclip.copy("jim steffes")
hash("jims")
hash("jimst")
hash([2,2])
type(1,3)
get_ipython().run_line_magic('c', '')
type((1,3))
k={1,"2"}
p(k)
p(k[0])
has(k)
hash(k)
get_ipython().run_line_magic('c', '')
j=("a","b")
type(j)
d=(1:"j")
d=("1":"j")
d={"1":"j"}
type(d)
p(inspect.getsource(t))
def t(x):
    print(type(x))
    
t(d)
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('whos', '')
d[21]="nothing again"
d
d[21]="nothing again new"
d
d["list"]=[3,4,5]
d
len(d)
get_ipython().run_line_magic('c', '')
dir(d)
get_ipython().run_line_magic('c', '')
zdir(d)
d
d.pop()
d.popitem()
d
get_ipython().run_line_magic('c', '')
l= [
    ["Draco Malfoy", "Slytherin"],
    ["Cedric Diggory", "Hufflepuff"]
]
t(l)
l[1]
get_ipython().run_line_magic('whos', '')
d.update(l)
d
for x in d:
    print(x)
    
del d[21]
d
[a for a in d]
[a,1 for a in d]
get_ipython().run_line_magic('c', '')
d
del d['1']
d
d['new']="The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away."
d
d.pop('new')
d
d[21]="nothing again new"
d
get_ipython().run_line_magic('c', '')
d
d[21]
d[22]
d.get('jimssssssss','none')
d[22]
d
d.get(21,'none')
d.get(22,'none')
get_ipython().run_line_magic('c', '')
d.items()
t(d.items())
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '1')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('history', '')
get_ipython().run_line_magic('edit', '-1')
get_ipython().run_line_magic('edit', '22')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('c', '')
d.keys()
d
line="The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away."
enumerate(line)
e
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('whos', '')
linel=line.split(' ')
linel
print(enumerate(linel))
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('edit', '100')
get_ipython().run_line_magic('edit', '1000')
get_ipython().run_line_magic('edit', '101')
print(enumerate(linel))
get_ipython().run_line_magic('edit', '104')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('who', '')
get_ipython().run_line_magic('c', '')
l="The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away.".split(' ')
l
print(*l)
map(print,l)
get_ipython().run_line_magic('edit', '7')
get_ipython().run_line_magic('edit', '7')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
d()
def inp(x):
  p(inspect.getsource(x))
  
inp(l)
d
d()
inp(p)
type(p)
t(l)
get_ipython().run_line_magic('c', '')
def t(x):
    print(type(x))
    
d()
t(os)
d(exit)
get_ipython().run_line_magic('h', '')
d()
inp(exit)
t(exit)
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
h=get_ipython().run_line_magic('alias_magic', 'h history ')
h
h
get_ipython().run_line_magic('alias_magic', 'h history ')
h
get_ipython().run_line_magic('w', '')
h
get_ipython().run_line_magic('h', '')
line="The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away.".split(" ")
line
p(*line)
d()
inp(p)
t(p)
d()
def ins(x):
  print(inspect.getsource(x))
  
t(exit)
ins(zdir)
t(In)
In
Out
get_ipython().run_line_magic('c', '')
d()
line="The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away.".split(" ")
line
p(' '.join(line))
p(' -- '.join(line))
d()
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('w', '')
d()
p(*line)
print(*l)
print(*line)
inp(p)
ins(p)
get_ipython().run_line_magic('c', '')
test_scores = [[91, 67, 32], [55, 79, 83], [99, 12, 49]]
for i in range(len(test_scores)):
    for j in test_scores:
        print(j[i], end=' ')
    print()
    
zdir(os)
print(zdir(os))
p(zdir(os))
with open('filename.txt', 'a') as f:
    p(zdir(os))
    
get_ipython().run_line_magic('ls', '')
with open('filename.txt', 'a') as f:
    p(zdir(os), file=f)
    
with open('filename.txt', 'a') as f:
    print(zdir(os), file=f)
    
get_ipython().run_line_magic('ls', '')
get_ipython().system('nvim filename.txt')
get_ipython().system('rm filename.txt')
get_ipython().run_line_magic('c', '')
d()
t(quit)
In
for a in enumerate(In)
    print(a):
for a in enumerate(In):
    print(a)
    
get_ipython().run_line_magic('edit', '42')
get_ipython().run_line_magic('edit', '27')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
def hi():
  for a in enumerate(In):
      print(a)
      
hi()
get_ipython().run_line_magic('edit', '45')
get_ipython().run_line_magic('edit', '41')
hi()
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '/mnt/c/projects/p3/')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('cd', 'dict/')
lt
get_ipython().run_line_magic('ls', '')
get_ipython().system('ls -lhrt')
get_ipython().run_line_magic('ls', '')
import os

path = '.'

with os.scandir(path) as it:

    for entry in it:

        if entry.is_file():
            print(entry.name)
            
import timeit
import_module = "import random"
testcode = ''' 
def test(): 
    return random.randint(10, 100)
'''
print(timeit.timeit(stmt=testcode, setup=import_module))
path = r'/mnt/c/all'
import timeit
import_module = "import os"
testcode = ''' 
with os.scandir(path) as it:
    for entry in it:

        if entry.is_file():
            print(entry.name)
'''
print(timeit.timeit(stmt=testcode, setup=import_module))
import timeit
import_module = "import os"
testcode = ''' 
path = r'/mnt/c/all'
with os.scandir(path) as it:
    for entry in it:

        if entry.is_file():
            print(entry.name)
'''
print(timeit.timeit(stmt=testcode, setup=import_module))
import timeit
import_module = "import os"
testcode = ''' 
path = r'/mnt/c/all'
with os.scandir(path) as it:
    for entry in it:

        if entry.is_file():
            print(entry.name)
'''
print(timeit.timeit(stmt=testcode, setup=import_module, repeat=2))
import timeit
import_module = "import os"
testcode = ''' 
path = r'/mnt/c/all'
with os.scandir(path) as it:
    for entry in it:

        if entry.is_file():
            print(entry.name)
'''
# print(timeit.timeit(stmt=testcode, setup=import_module, repeat=2))
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))
get_ipython().run_line_magic('c', '')
import timeit
import_module = "import os"
testcode = ''' 
path = r'/mnt/c/all'
path ='.'
with os.scandir(path) as it:
    for entry in it:

        if entry.is_file():
            print(entry.name)
'''
# print(timeit.timeit(stmt=testcode, setup=import_module, repeat=2))
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=1))
# testing timeit()
import timeit
import_module = "import random"
testcode = ''' 
def test(): 
    return random.randint(10, 100)
'''
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))
get_ipython().run_line_magic('c', '')
import timeit
import_module = "import random"
testcode = ''' 

path = r'/mnt/c/all'
path ='.'
with os.scandir(path) as it:
    for entry in it:

        if entry.is_file():
            print(entry.name)
'''
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))
import timeit
import_module = "import os"
testcode = ''' 

path = r'/mnt/c/all'
path ='.'
with os.scandir(path) as it:
    for entry in it:

        if entry.is_file():
            print(entry.name)
'''
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))
import timeit
import_module = "import os"
testcode = ''' 
path = r'/mnt/c/all'
path ='.'
    return os.scandir(path)  
'''
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))
import timeit
import_module = "import os"
testcode = ''' 
path = r'/mnt/c/all'
path ='.'
return os.scandir(path)  
'''
print(timeit.repeat(stmt=testcode, setup=import_module, repeat=5))
def ds():
    path = r'/mnt/c/all'
    path ='.'
    return os.scandir(path)
    
ds()
print(ds())
for a in ds():
    print(a)
    
import csv from reader
import csv from reader
from csv import reader
get_ipython().run_line_magic('ls', '')
c=open("Characters.csv", encoding="utf-8-sig")
c
t(c)
reader(c)
d=reader(c)
c
list(d)
get_ipython().run_line_magic('ls', '')
from csv import reader

# Open and read the dataset
opened_file_char = open("Characters.csv", encoding="utf-8-sig")
read_file_char = reader(opened_file_char)
hp_characters = list(read_file_char)
get_ipython().run_line_magic('edit', '94')
from csv import reader

# Open and read the dataset
opened_file_char = open("c.csv", encoding="utf-8-sig")
read_file_char = reader(opened_file_char)
lc = list(read_file_char)
from csv import reader

# Open and read the dataset
opened_file_char = open("c.csv", encoding="utf-8-sig")
read_file_char = reader(opened_file_char)
lc = list(read_file_char)
from csv import reader

# Open and read the dataset
opened_file_char = open("c.csv", encoding="utf-8-sig")
read_file_char = reader(opened_file_char)
lc = list(read_file_char)
get_ipython().run_line_magic('edit', '98')
c
print("\U0001f600")
print("\N{smiling face with sunglasses}", end='')
print("\U0001f601")
get_ipython().run_line_magic('c', '')
print("\U0001f604")
get_ipython().run_line_magic('edit', '5')
get_ipython().run_line_magic('edit', '5')
for k in range(5):
    print(k)
    
for k in range(5):
    print(f'\\U0001f604')
    
for k in range(5):
    print('\\U0001f604')
    
print('\\U0001f604')
print("\\U0001f604")
get_ipython().run_line_magic('h', '')
print("\U0001f604")
for k in range(5):
    print('\U0001f604')
    
for k in range(5):
    print(f'\U0001f604')
    
for k in range(5):
    print(f'\U0001f60{k}')
for k in range(5):
    print(f'\U0001f604 {k}')
    
j="\\U0001f604"
p $j
echo $j
import requests
d()
os.getcwd()
get_ipython().run_line_magic('ls', '')
from pathlib import Path

fle = Path('data.py')
fle.touch(exist_ok=True)
get_ipython().run_line_magic('ls', '')
import requests
url='https://api.github.com/repos/wither7007/all_wsl/commits?per_page=5'
response=requests.get(url)
mp=response.json()
print(mp)
t(mp)
get_ipython().run_line_magic('h', '')
print(*mp)
for x in mp:
    print(x)
    
for x in mp:
    print(xi\n)
for x in mp:
    print(x\n)
for x in mp:
    print(f'{x}\n')
    
t(mp)
len(mp)
mp[1]
get_ipython().run_line_magic('edit', '39')
d1=mp[1]
t(d1)
d1.items()
d1.keys()
get_ipython().run_line_magic('edit', '44')
get_ipython().run_line_magic('edit', '44')
d1.values()
d1.items()
for a,b in d1.items():
    print(a,b)
    
for a,b in d1.items():
    print(f'{a}: {b}\n')
    
for a,b in d1.items():
    with open('AnyFile.txt', 'w') as j:
        print(f'{a}: {b}\n', file=j)
        
get_ipython().run_line_magic('ls', '')
get_ipython().system('AnyFile.txt')
get_ipython().system('nvim AnyFile.txt')
get_ipython().run_line_magic('h', '')
for a,b in d1.items():
    print(f'{a}: {b}\n')
    
d1.items()
mp[1]
for a,b in d1.items():
    print(f'{a}: {b}\n')for a,b in d1.items():
    print(f'{a}: {b}\n')
for a,b in d1.items():
    print(f'{a}: {b}\n')
    
for a,b in d1.items():
    with open('AnyFile.txt', 'a') as j:
        print(f'{a}: {b}\n', file=j)
        
get_ipython().system('nvim AnyFile.txt')
get_ipython().run_line_magic('c', '')
def git():
    for a,b in d1.items():
        with open('AnyFile.txt', 'a') as j:
            print(f'{a}: {b}\n', file=j)
            
git()
lt
get_ipython().run_line_magic('ls', '')
get_ipython().system('ls -lhrt')
git()
get_ipython().system('ls -lhrt')
git()
get_ipython().system('nvim AnyFile.txt')
for a,b in d1.keys():
    print(f'{a}: {b}\n')
    
p(d1.keys())
get_ipython().run_line_magic('edit', '73')
for a in d1.keys():
    print(f'{a}\n')
    
for a in d1.keys():
    print(f'{a}')
    
get_ipython().run_line_magic('c', '')
for a in d1.keys():
    print(f'{a}')
    
d()
lt
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('ls', '')
dir_path = r'/mnt/c'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
for path in os.listdir(dir_path):
    # check if current path is a file
    pa=os.path.join(dir_path, path)
    print(pa)
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
my_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']

columns = 3

# a         b         c
# d         e         f
# g         h         i
for first, second, third in zip(my_list[::columns], my_list[1::columns], my_list[2::columns]):
    print(f'{first: <10}{second: <10}{third}')
    
my_list = "The Queen of Hearts, she made some tarts,  All on a summers day, The knave of Hearts, he stole the tarts, And took them clean away.".split(' ')
for first, second, third in zip(my_list[::columns], my_list[1::columns], my_list[2::columns]):
    print(f'{first: <10}{second: <10}{third}')
    
res
dir_path = r'/mnt/c/all/ps'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    pa=os.path.join(dir_path, path)
    print(pa)
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
res
my_list=res
for first, second, third in zip(my_list[::columns], my_list[1::columns], my_list[2::columns]):
    print(f'{first: <10}{second: <10}{third}')
    
p(res)
my_list.insert(3,'12345555555555555')
p(my_list)
for first, second, third in zip(my_list[::columns], my_list[1::columns], my_list[2::columns]):
    print(f'{first: <10}{second: <10}{third}')
    
import subprocess
subprocess.run(["ls", "-l"])
subprocess.run(["ls", "-lhrt"])
subprocess.run(["ls", " / " "-lhrt"])
subprocess.run(["ls", "/" "-lhrt"])
subprocess.run(["ls", "/ " "-lhrt"])
subprocess.run(["ls", "/ ", "-lhrt"])
subprocess.run(["ls", " / ", "-lhrt"])
subprocess.run(["ls ", "/", "-lhrt"])
subprocess.run(["ls ", "/mnt", "-lhrt"])
subprocess.run(["ls ", "\/mnt", "-lhrt"])
get_ipython().run_line_magic('c', '')
import shlex, subprocess
command_line = input()
args = shlex.split(command_line)
p(args)
p = subprocess.Popen(args) # Success!
get_ipython().run_line_magic('c', '')
command_line = input()
args = shlex.split(command_line)
p(args)
p = subprocess.Popen(args) # Success!
command_line = input()
args = shlex.split(command_line)
print(args)
p = subprocess.Popen(args) # Success!
get_ipython().run_line_magic('whos', '')
d()
get_ipython().run_line_magic('w', '')
from tabulate import tabulate
from tabulate import tabulate
get_ipython().run_line_magic('w', '')
lis=[a for a in range(11)]
p(list)
print(lis)
print(tabulate(lis))
lis
lis=lis+lis
lis
able = [[1, 2222, 30, 500], [4, 55, 6777, 1]]
print(tabulate(table))
from tabulate import tabulate
able = [[1, 2222, 30, 500], [4, 55, 6777, 1]]
print(tabulate(table))
table = [[1, 2222, 30, 500], [4, 55, 6777, 1]]
print(tabulate(table))
get_ipython().run_line_magic('edit', '135')
table = [[33333333333331, 2222, 30, 500], [4, 55, 6777, 1]]
print(tabulate(table))
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
hi()
get_ipython().run_line_magic('edit', '137')
get_ipython().run_line_magic('edit', '141')
table
table=[1,1,3]
print(tabulate(table))
table=[[1,1,3]]
print(tabulate(table))
res
print(tabulate(res))
print(tabulate([res]))
print(tabulate([res], tablefmt="plain"))
print(tabulate([res], tablefmt="simple"))
print(tabulate([res], tablefmt="grid"))
print(tabulate([res], tablefmt="asciidoc"))
print(tabulate([res], tablefmt="plain"))
print(tabulate([res], tablefmt="simple"))
print(tabulate([res], tablefmt="grid"))
ff="simple"
print(tabulate([res], tablefmt=ff))
get_ipython().run_line_magic('c', '')
print(tabulate([res], tablefmt=ff))
k=""plain"
"simple"
"github"
"grid"
"simple_grid"
"rounded_grid"
"heavy_grid"
"mixed_grid"
"double_grid"
"fancy_grid"
"outline"
"simple_outline"
"rounded_outline"
"heavy_outline"
"mixed_outline"
"double_outline"
"fancy_outline"
"pipe"
"orgtbl"
"asciidoc"
"jira"
"presto"
"pretty"
"psql"
"rst"
"mediawiki"
"moinmoin"
"youtrack"
"html"
"unsafehtml"
"latex"
"latex_raw"
"latex_booktabs"
"latex_longtable"
"textile"
"tsv""
k='"plain"
"simple"
"github"
"grid"
"simple_grid"
"rounded_grid"
"heavy_grid"
"mixed_grid"
"double_grid"
"fancy_grid"
"outline"
"simple_outline"
"rounded_outline"
"heavy_outline"
"mixed_outline"
"double_outline"
"fancy_outline"
"pipe"
"orgtbl"
"asciidoc"
"jira"
"presto"
"pretty"
"psql"
"rst"
"mediawiki"
"moinmoin"
"youtrack"
"html"
"unsafehtml"
"latex"
"latex_raw"
"latex_booktabs"
"latex_longtable"
"textile"
"tsv"'
kk='''"plain"
"simple"
"github"
"grid"
"simple_grid"
"rounded_grid"
"heavy_grid"
"mixed_grid"
"double_grid"
"fancy_grid"
"outline"
"simple_outline"
"rounded_outline"
"heavy_outline"
"mixed_outline"
"double_outline"
"fancy_outline"
"pipe"
"orgtbl"
"asciidoc"
"jira"
"presto"
"pretty"
"psql"
"rst"
"mediawiki"
"moinmoin"
"youtrack"
"html"
"unsafehtml"
"latex"
"latex_raw"
"latex_booktabs"
"latex_longtable"
"textile"
"tsv"'''
d
k
kk
'jim'.replace('i','xxx')
kk.replace('"','')
kk.replace('"','').split('\n')
jj=kk.replace('"','').split('\n')
for a in ff:
    print(a)
    
for a in jj:
    print(a)
    
jj[3]
jj[:3]
for a in jj[:3]:
  print(a)
  print(tabulate([res], tablefmt=a))
  
class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

print("The output is:" + color.BLUE + 'Python 3!')
print("The output is:" + color.BLUE + 'Python 3!') | v -
print("The output is:" + color.BLUE + 'Python 3!') 
for a in jj[:3]:
  print(upper(a))
  print(tabulate([res], tablefmt=a))
  
for a in jj[:3]:
  print(Upper(a))
  print(tabulate([res], tablefmt=a))
  
get_ipython().run_line_magic('c', '')
for a in jj[:3]:
  print(a.upper)
  print(tabulate([res], tablefmt=a))
  
get_ipython().run_line_magic('c', '')
for a in jj[:3]:
  print(a.upper())
  print(tabulate([res], tablefmt=a))
  
import sys

print('This message will be displayed on the screen.')

original_stdout = sys.stdout # Save a reference to the original standard output

with open('filename.txt', 'w') as f:
    sys.stdout = f # Change the standard output to the file we created.
    print('This message will be written to a file.')
    sys.stdout = original_stdout # Reset the standard output to its original value
    
get_ipython().run_line_magic('ls', '')
get_ipython().system('nvim filename.txt')
original_stdout = sys.stdout # Save a reference to the original standard output

with open('filename.txt', 'w') as f:
    sys.stdout = f # Change the standard output to the file we created.
    whos
    sys.stdout = original_stdout # Reset the standard output to its original value
    
get_ipython().run_line_magic('whos', '')
import sys

print('This message will be displayed on the screen.')

original_stdout = sys.stdout # Save a reference to the original standard output

with open('filename.txt', 'w') as f:
    sys.stdout = f # Change the standard output to the file we created.
    whos
    sys.stdout = original_stdout # Reset the standard output to its original value
    
original_stdout = sys.stdout # Save a reference to the original standard output

with open('filename.txt', 'w') as f:
    sys.stdout = f # Change the standard output to the file we created.
    
import sys
original_stdout = sys.stdout # Save a reference to the original standard output

with open('filename.txt', 'w') as f:
    sys.stdout = f # Change the standard output to the file we created.
    
get_ipython().run_line_magic('c', '')
fil=open('xxxx', '2')
fil=open('xxxx', 'w')
sys.stdout = f # Change the standard output to the file we created.
sys.stdout = fil
import sys
sys.stdout = fil
print('date')
get_ipython().run_line_magic('whos', '')
get_ipython().run_line_magic('ls', '')
import sys
p(sys.stdout)
kk='''"plain"
"simple"
"github"
"grid"
"simple_grid"
"rounded_grid"
"heavy_grid"
"mixed_grid"
"double_grid"
"fancy_grid"
"outline"
"simple_outline"
"rounded_outline"
"heavy_outline"
"mixed_outline"
"double_outline"
"fancy_outline"
"pipe"
"orgtbl"
"asciidoc"
"jira"
"presto"
"pretty"
"psql"
"rst"
"mediawiki"
"moinmoin"
"youtrack"
"html"
"unsafehtml"
"latex"
"latex_raw"
"latex_booktabs"
"latex_longtable"
"textile"
"tsv"'''.replace('"','').split('\n')
kk
get_ipython().run_line_magic('c', '')
kk
import sys
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('tables.txt', 'w')

sys.stdout = f # Change the standard output to the file we created.
for a in kk[:3]:
    print(a.upper())
    print(tabulate([res], tablefmt=a))
sys.stdout =original_stdout
import sys
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('tables.txt', 'w')

sys.stdout = fil # Change the standard output to the file we created.
for a in kk[:3]:
    print(a.upper())
    print(tabulate([res], tablefmt=a))
sys.stdout =original_stdout
lt
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('ls', '')
get_ipython().system('nvim tables.txt')
print(fil)
d()
sys.stdout =original_stdout
get_ipython().run_line_magic('ls', '')
get_ipython().system('ls -lhrt')
fil.close()
get_ipython().system('ls -lhrt')
d()
from tabulate import tabulate
for a in kk[:3]:
    print(a.upper())
    print(tabulate([res], tablefmt=a))
    
res=d()
res
get_ipython().run_line_magic('c', '')
import os

# folder path
dir_path = r'/mnt/c/all/ps'

# list to store files
res = []

# Iterate directory
for path in os.listdir(dir_path):
    # check if current path is a file
    pa=os.path.join(dir_path, path)
    print(pa)
    if os.path.isfile(os.path.join(dir_path, path)):
        res.append(path)
print(res)
for a in kk[:3]:
    print(a.upper())
    print(tabulate([res], tablefmt=a))
    
get_ipython().run_line_magic('ls', '')
get_ipython().system('rm tables.txt')
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('tables.txt', 'w')

sys.stdout = fil # Change the standard output to the file we created.
for a in kk:
    print(a.upper())
    print(tabulate([res], tablefmt=a))
sys.stdout =original_stdout
get_ipython().run_line_magic('c', '')
print(tabulate([res], tablefmt="JIRA"))
print(tabulate([res], tablefmt="PRESTO"))
tabulate([res], tablefmt="PRESTO")
get_ipython().run_line_magic('c', '')
tabulate([res], tablefmt="")
tabulate([res], tablefmt="jira")
get_ipython().run_line_magic('edit', '37')
print(tabulate([res], tablefmt="jira"))
res
res.insert(25,'cccccccccccccc cccccccccccccccc')
res[20:27]
print(tabulate([res], tablefmt="jira"))
get_ipython().run_line_magic('c', '')
print(tabulate([res], tablefmt="jira"))
get_ipython().run_line_magic('edit', '45')
get_ipython().run_line_magic('c', '')
import requests
url='https://api.github.com/repos/wither7007/all_wsl/commits?per_page=5'
response=requests.get(url)
mp=response.json()
t(mp)
mp
for a in enumerate(line):
    print(a)
    
get_ipython().run_line_magic('edit', '')
for a in enumerate(mp):
    print(a)
    
for a in enumerate(mp):
    print(typ(a))
    
for a in enumerate(mp):
    print(type(a))
    
mp
mp[1]
get_ipython().run_line_magic('c', '')
mp[1]
type(mp[1])
len(mp)
np=mp[1]
np
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
np
t(np)
d()
a
d()
get_ipython().run_line_magic('c', '')
d()
import requests
url='https://api.github.com/repos/wither7007/all_wsl/commits?per_page=5'
response=requests.get(url)
mp=response.json()
t(mp)
mp
get_ipython().run_line_magic('dhist', '')
get_ipython().run_line_magic('cd', 'winp/')
get_ipython().run_line_magic('dhist', '')
d()
mp
len(mp)
for a in enumerate(mp):
    print(a)
    
for a in enumerate(mp[1]):
    print(a)
    
mp[1]
np=mp[1]
np
t(np)
np.keys()
get_ipython().run_line_magic('alias_magic', 'e edit')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('e', 't.py')
get_ipython().run_line_magic('edit', '-x t.py')
get_ipython().run_line_magic('alias_magic', 'e edit -x')
get_ipython().run_line_magic('alias_magic', 'e "edit -x"')
get_ipython().run_line_magic('edit', '_')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
hi()
get_ipython().run_line_magic('e', '29')
get_ipython().run_line_magic('c', '')
hi()
get_ipython().run_line_magic('e', '20')
get_ipython().run_line_magic('e', '13')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('e', '13')
get_ipython().run_line_magic('e', '-x 13')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('e', '-x 13')
d()
get_ipython().run_line_magic('c', '')
import requests
url='https://api.github.com/repos/wither7007/all_wsl/commits?per_page=5'
response=requests.get(url)
mp=response.json()
np=mp[1]
np
p(np)
hi()
get_ipython().run_line_magic('e', '-x 1')
get_ipython().run_line_magic('c', '')
d()
d()
get_ipython().run_line_magic('c', '')
d()
get_ipython().run_line_magic('w', '')
inspect.getmembers(np)
str(inspect.getmembers(np))
dir(np)
zdir(np)
p(zdir(os))
inspect.getmembers(os)
p(inspect.getmembers(os))
p(inspect.getmembers(np))
p(np)
p(np.keys())
d()
inspect.getfile(requests)
inspect.getfile(response)
inspect.getfile(os)
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    print(dd)
    return dd
    
a=d()
a
np
t(np)
str(np)
help(np)
str(help(np))
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('pwd', '')
os.getcwd()
help(os)
def fwrap(k):
    fil=open('wrap.txt', 'w')
    sys.stdout = fil # Change the standard output to the file we created.
    ls
    sys.stdout =original_stdout
    
fwrap(1)
import sys
get_ipython().run_line_magic('c', '')
fwrap(1)
get_ipython().run_line_magic('ls', '')
get_ipython().system('ls -lhrt')
fil.close()
get_ipython().system('ls -lhrt')
get_ipython().run_line_magic('c', '')
fwrap(1)
get_ipython().system('ls -lhrt')
def fwrap():
    fil=open('wrap.txt', 'w')
    sys.stdout = fil # Change the standard output to the file we created.
    print('text stuff')
    sys.stdout =original_stdout
    
fwrap()
get_ipython().system('ls -lhrt')
get_ipython().run_line_magic('e', '-x wrap.txt')
get_ipython().system('bat wrap.txt')
get_ipython().system('cat wrap.txt')
get_ipython().run_line_magic('c', '')
def fwrap():
    original_stdout = sys.stdout # Save a reference to the original standard output
    fil=open('wrap.txt', 'w')
    sys.stdout = fil # Change the standard output to the file we created.
    print('text stuff')
    sys.stdout =original_stdout
    
fwrap()
fil.close()
get_ipython().run_line_magic('c', '')
d()
d()
esit
d()
get_ipython().run_line_magic('c', '')
import requests
url='https://api.github.com/repos/wither7007/all_wsl/commits?per_page=5'
response=requests.get(url)
mp=response.json()
np=mp[1]
np
p(np.keys()))
p(np.keys())
get_ipython().run_line_magic('c', '')
np.pop()
np.keys()
np.get('sha')
np.get('sha', 'not found')
np.get('shas', 'not found')
np.items()
np
for a, b, in np.items():
    print(a,b)
    
for a, b, in np.items():
    print(f'{a}\n{b})
for a, b, in np.items():
    print(f'{a}\n{b}')
    
for a, b, in np.items():
    print(f'{a}\n ---------\n{b}')
    
for a, b, in np.items():
    print(f'{a}\n ---------\n{b}')
    
len(np)
del np
np
get_ipython().run_line_magic('c', '')
mp
np=mp[1]
len(np)
get_ipython().run_line_magic('c', '')
np.keys()
np['url']
pyperclip.copy("jim steffes")
pyperclip.copy(np)
t(np)
str(np)
pyperclip.copy(str(np))
a=[12]
if type(a) != string:
    print('no')
    
if type(a) != str:
    print('no')
    
if type(a) == str:
    print('no')
    
if type(a) !== str:
    print('no')
if type(a) != str:
    print('no')
    
get_ipython().run_line_magic('e', '-x 40')
a=12
if type(a) != str:
    print(a)
    print('no')
    
def cps(a):
    if type(a) != str:
        print(a)
        a=str(a)
        pyperclip.copy(a)
        
cps(np)
cps(np[1])
get_ipython().run_line_magic('c', '')
for a in mp.keys():
    print(a)
    
for a in np.keys():
    print(a)
    
get_ipython().run_line_magic('edit', '_')
get_ipython().run_line_magic('edit', '')
get_ipython().run_line_magic('edit', '-1')
get_ipython().run_line_magic('e', '-p')
get_ipython().run_line_magic('c', '')
d()
np
d()
np[1]
t(np)
cps(np.keys())
def cps(a):
    if type(a) != str:
        print(a)
        a=str(a)
        pyperclip.copy(a)
        
import requests
url='https://api.github.com/repos/wither7007/all_wsl/commits?per_page=5'
response=requests.get(url)
mp=response.json()
np=mp[1]
np
for a in np.keys():
    print(a)
    
np['comments_url']
cps(np['comments_url'])
np['comments_url']
str(np['comments_url'])
cps(np['comments_url'])
cps(np)
ins(cps)
str(ins(cps))
cps(str(ins(cps)))
cps(2)
get_ipython().run_line_magic('c', '')
def cps(a):
    if type(a) != str:
        print(a)
        a=str(a)
        pyperclip.copy(a)
    else:
        print(a)
        pyperclip.copy(a)
        
cps(str(ins(cps)))
cps(ins(cps))
kk=[a for a in range[10]]
range(10)
get_ipython().run_line_magic('e', '-x 19')
kk=[a for a in range(10)]
kk
cps(kk)
cps(mp)
pcs([f for f in range(5)])
cps([f for f in range(5)])
cps([f for f in range(15)])
cps(d())
get_ipython().run_line_magic('c', '')
cps(d())
cps \
((1,2,3))\
(1, 2, 3)
def fwrap(x):
    original_stdout = sys.stdout # Save a reference to the original standard output
    fil=open('wrap.txt', 'w')
    sys.stdout = fil # Change the standard output to the file we created.
    print(x)
    sys.stdout =original_stdout
    fil.close()
    
d()
get_ipython().run_line_magic('whos', '')
fwrap(dd)
import sys
fwrap(dd)
get_ipython().run_line_magic('ls', '')
dd
get_ipython().run_line_magic('whos', '')
fwrap(np)
get_ipython().run_line_magic('c', '')
d()
get_ipython().run_line_magic('c', '')
1533939.00/30
1533939.00/40
1533939.00/100
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('c', '')
dir(os)
zdir(os)
print(zdir(os))
[a for a in zdir(os)]
print([a for a in zdir(os)])
print([a for a in zdir(os) if a.startswith('ch')])
print([a for a in zdir(os) if a.contains('dir')])
print([a for a in zdir(os) if 'dir' in a])
get_ipython().run_line_magic('e', '-x 59')
fwrap([a for a in zdir(os) if 'dir' in a])
help(os.chdir)
help(os.lisdir)
os.listdir()
for a in os.listdir():
    p(a)
    
for a in os.listdir():
    p(a)
    
for a in os.listdir():
    p(a)
    
get_ipython().run_line_magic('e', '-x 67')
fwrap(
for a in os.listdir():
    p(a)
)
get_ipython().run_line_magic('e', '-x 69')
fwrap( for a in os.listdir(): print(a))
fwrap('for a in os.listdir(): print(a)')
for a in os.listdir(): print(a)
for a in os.listdir(): print(f' this is {a}')
n=[]
for a in os.listdir(): print(f' this is {a}'): n.append(a)
for a in os.listdir(): print(f' this is {a}')
for a in os.listdir(): n.append(f' this is {a}')
n
fwrap(n)
get_ipython().run_line_magic('c', '')
hi()
get_ipython().run_line_magic('whos', '')
for a in range(5):
    fwrap(a)
    
get_ipython().run_line_magic('c', '')
def fwrap(x):
    original_stdout = sys.stdout # Save a reference to the original standard output
    fil=open('wrap.txt', 'a')
    sys.stdout = fil # Change the standard output to the file we created.
    print(x)
    sys.stdout =original_stdout
    fil.close()
    
for a in range(5):
    fwrap(a)
    
get_ipython().run_line_magic('c', '')
ins(cps)
def pf(x):
    original_stdout = sys.stdout # Save a reference to the original standard output
    fil=open('pf.txt', 'a')
    sys.stdout = fil # Change the standard output to the file we created.
    print(x)
    sys.stdout =original_stdout
    fil.close()
    
for key, valuen in mp.items():
    pf((key,value))
    
get_ipython().run_line_magic('whos', '')
for key, valuen in np.items():
    pf((key,value))
    
for key, value in np.items():
    pf((key,value))
    
os.getcwd()
os.chdir('winp')
get_ipython().run_line_magic('pwd', '')
lt
os.getcwd()
os.chdir('dict')
get_ipython().run_line_magic('pwd', '')
for a in os.listdir():
    n.append(a)
    
n
print(n)
nn=[]
for a in os.listdir():
    nn.append(a)
    
nn
get_ipython().system('cat c.csv')
f=open("Characters.csv", encoding="utf-8-sig")
f.readline()
f=open("Characters.csv", encoding="utf-8-sig")
f.readline()
f=open("Characters.csv", encoding="utf-8")
f.readline()
f=open("Characters.csv", encoding="utf-8")
f.readline()
f=open("Characters.csv", encoding="utf-8")
f.readline()
f=open("c.csv", encoding="utf-8")
f.readline()
f=open("c.csv", encoding="utf-8")
f.readline()
f=open("c.csv", encoding="utf-8")
f.readline()
f=open("c.csv", encoding="utf-8")
f.readline()
f=open("c.csv", encoding="unicode_escape")
f.readline()
get_ipython().run_line_magic('c', '')
f=open("Characters.csv", encoding="utf-8")
f.readline()
get_ipython().run_line_magic('c', '')
f.readline()
f=open("Characters.csv", encoding="utf-8")
f.readline()
f.readline()
f=open("Characters.csv", encoding="utf-8")
f.readline()
f=open("Characters.csv", encoding="utf-8")
f.readline()
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('whos', '')
f.readline()
from csv import reader

# Open and read the dataset
opened_file_char = open("Characters.csv", encoding="utf-8-sig")
read_file_char = reader(opened_file_char)
hp_characters = list(read_file_char)
get_ipython().run_line_magic('whos', '')
pf(whos)
get_ipython().run_line_magic('c', '')
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('pf.txt', 'a')
sys.stdout = fil # Change the standard output to the file we created.
whos
sys.stdout =original_stdout
fil.close()
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('pf.txt', 'a')
sys.stdout = fil # Change the standard output to the file we created.
whos
sys.stdout =original_stdout
fil.close()
get_ipython().run_line_magic('whos', '')
original_stdout = sys.stdout # Save a reference to the original standard output
d()
ins(d)
ins(zdir)
d()
ins(cps)
ins(hi)
get_ipython().run_line_magic('c', '')
os.getcwd()
from csv import reader

# Open and read the dataset
opened_file_char = open("Characters.csv", encoding="utf-8-sig")
read_file_char = reader(opened_file_char)
hp_characters = list(read_file_char)
hp_characters
get_ipython().run_line_magic('c', '')
import time

# Create a list
lst = [ele for ele in range(10**7)]

now = time.time()

if 3 in lst:
    print(True)

list_runtime = time.time() - now

print(f"\nList runtime: {list_runtime} seconds.")
now
time.time()
d = {i:i*2 for i in range(10**7)}
d
d = {i:i*2 for i in range(10**2)}
d
d = {i:i*2 for i in range(10)}
d
get_ipython().run_line_magic('whos', '')
d()
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    return dd
    
d()
print(d())
p(d())
pf(d())
import sys
pf(d())
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('c', '')
d()
dir()
zdir()
p(d())
get_ipython().run_line_magic('c', '')
p(d())
help(os.lisdir)
help(os)
def gf(path):
    for file in os.listdir(path):
        yield file
        
t(gf)
gf('.')
for a in gf('.'):
    print(a)
    
get_ipython().run_line_magic('ls', '')
os.getcwd()
os.listdir('.')
yy=[]
yy.extend(20)
yy.extend([20])
yy
yy.extend([20])
yy
yy.extend(['jim'])
yy
t(yy)
zz=(1,2,3)
t(zz)
yy.extend(zz)
yy
yy.append(zz)
yy
for a in enumerate(yy):
    p(a)
    
list1 = ['welcome', 'to']
list1.extend('datagy')

print(list1)
yy.append('asdfaadfda')
yy
yy.extend('asdfaadfda')
yy
del yy
yy
yy.extend('asdfaadfda')
yy=[]
yy.extend('asdfaadfda')
tt
yy
yy.extend(2)
yy.extend('jim')
yy
yy.extend(['jim'])
yy
yy=[]
yy
yy.extend([22])
yy
yy.extend([22])
yy
t(os.walk('.'))
for a in os.walk('.'):
    p(a)
    
get_ipython().run_line_magic('c', '')
os.getcwd()
t(os.getcwd())
pyperclip.copy(os.getcwd())
for a in os.walk('.'):
    p(a)
    
for a,b in os.walk('.'):
    p(a,b)
    
hi()
get_ipython().run_line_magic('edit', '61')
get_ipython().run_line_magic('edit', '61')
get_ipython().run_line_magic('edit', '64')
hi()
get_ipython().run_line_magic('edit', '61')
get_ipython().run_line_magic('edit', '67')
hi()
res = []
for (dir_path, dir_names, file_names) in os.walk(dp):
    res.extend(file_names)
print(res)
dp=r'/mnt/c/you/alb'
res = []
for (dir_path, dir_names, file_names) in os.walk(dp):
    res.extend(file_names)
print(res)
dp=r'/mnt/c/you/'
res = []
for (dir_path, dir_names, file_names) in os.walk(dp):
    res.extend(file_names)
print(res)
len(res)
pyperclip.copy(str(res))
for path in os.scandir(dp):
    if path.is_file():
        print(path.name)
        
import glob
c
get_ipython().run_line_magic('alias_magic', 'c clear')
c
dir()
ins(c)
type(c)
del c
get_ipython().run_line_magic('alias_magic', 'c clear')
get_ipython().run_line_magic('c', '')
res = glob.glob(dp)
print(res)
dirp
dp
t(dp)
"jim"+"s"
dp+'*.*'
get_ipython().run_line_magic('c', '')
res = glob.glob(dp+"*.*")
print(res)
res = glob.glob(dp+"*.*", recursive=True)
print(res)
dp
dp=r'/mnt/c/you/**/*.*'
res = glob.glob(dp, recursive=True)
print(res)
res
len(res)
res[20:27]
res[:4]
[a for a in d() if(a=='os')]
[a for a in d() if(a=='ost')]
bool([a for a in d() if(a=='ost')])
bool([a for a in d() if(a=='os')])
get_ipython().run_line_magic('edit', '106')
get_ipython().run_line_magic('c', '')
if [a for a in d() if(a=='pyperclip')]:
    print('pyper')
    
get_ipython().run_line_magic('edit', '109')
if [a for a in d() if(a=='pyperclips')]:
    print('pyper')
    
def mcheck(md):
    return [a for a in d() if(a==md)]
    
mcheck('os')
def mcheck(md):
    return bool([a for a in d() if(a==md)])
    
mcheck('os')
mcheck('oss')
get_ipython().run_line_magic('c', '')
for (dir_path, dir_names, file_names) in os.walk(dp):
    res.extend(file_names)
print(res)
import json
lt
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', '~')
get_ipython().run_line_magic('cd', 'winp/')
get_ipython().run_line_magic('ls', '')
import requests
def sheet():
    url = "https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/data?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
    r=requests.get(url)
    return r
    
kk=sheet()
t(kk)
kk.text()
kk.text
ll=kk.json
ll
t(ll)
ll=kk.json()
t(ll)
ll
resp = requests.get('https://reqres.in/api/users')
resp_dict = resp.json()

print(type(resp_dict))


print(json.dumps(resp_dict, indent=4))
get_ipython().run_line_magic('c', '')
kk=sheet()
kk
ll=kk.json()
ll
kk=sheet()
ll=kk.json()
ll
t(ll)
kk=sheet()
ll=kk.json()
ll
kk=sheet()
ll=kk.json()
ll
kk=sheet()
ll=kk.json()
ll
get_ipython().run_line_magic('c', '')
def sheet(sh):
    url = f"https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/{sh}?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
    r=requests.get(url)
    return r

kk=sheet()
ll=kk.json()
kk=sheet('data')
ll=kk.json()
ll
kk=sheet('elliot')
ll=kk.json()
ll
kk=sheet('eliot')
ll=kk.json()
ll
d()
ll
ll
ll[33="nothing"]
ll[33]="nothing"
ll
ll[33]
ll['word']='jj'
ll
"The lady doth protest too much, methinks".split(' ')
ll[sh]="The lady doth protest too much, methinks".split(' ')
ll[shx]="The lady doth protest too much, methinks".split(' ')
get_ipython().run_line_magic('h', '')
ll[shx]="The lady doth protest too much, methinks".split(' ')"
ll[shx]=f{"The lady doth protest too much, methinks".split(' ')}"
f"{'t'}
f"{'t'}"
f"{'t a'.split(' '}"
f"{'t a'.split(' ')}"
ll[shx]=f"{'The lady doth protest too much, methinks'.split(' ')}"
ll[shx]=0
get_ipython().run_line_magic('h', '')
ll['sh']=f"{'The lady doth protest too much, methinks'.split(' ')}"
ll
print(ll)
import pprint
pprint(ll)
pprint.pprint(ll)
from pprint import pprint as pp
pp(ll)
ll.items
ll.items()
print(ll.items())
pp(ll)
ll[33]="something"
pp(ll)
print(d())
kk
get_ipython().run_line_magic('w', '')
dd
pp(dd)
print(dd)
cps(22)
cps(dd)
get_ipython().run_line_magic('c', '')
def sheet(sh):
    url = f"https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/{sh}?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
    r=requests.get(url)
    return r
    
km=sheet('data')
km=sheet('data')
km
km.json()
km=km.json()
pp(km)
km.items()
get_ipython().run_line_magic('w', '')
km.update(ll)
km
ll
km
get_ipython().run_line_magic('w', '')
km
ll
ll['xxx']="jesus"
ll
km
km.update(ll)
km
km['new']=ll
km
for a in ll:
    print(a)
    
for a in ll:
    print(ll[a])
    
pp(ll)
cps(ll)
km['newer']=ll
pp(ll)
pp(km)
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('pf.txt', 'a')
sys.stdout = fil # Change the standard output to the file we created.
pp(ll)
sys.stdout =original_stdout
fil.close()
import sys
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('pf.txt', 'a')
sys.stdout = fil # Change the standard output to the file we created.
pp(ll)
sys.stdout =original_stdout
fil.close()
get_ipython().run_line_magic('ls', '')
original_stdout = sys.stdout # Save a reference to the original standard output
fil=open('pf.txt', 'a')
sys.stdout = fil # Change the standard output to the file we created.
pp(ll)
sys.stdout =original_stdout
fil.close()
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('w', '')
pp(km)
km
del km['new']
print(km)
for a in km:
    print(a)
    
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('c', '')
import json
import sys
import requests
# https://docs.google.com/spreadsheets/d/1AeXz0cVvC6iY6wDqsXkXYwowRjfJyLoWGltHJEUCD4Y/edit#gid=674225399
def sheet(sh):
    url = f"https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/{sh}?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
    r=requests.get(url)
    return r

kk=sheet(data)
ll=kk.json()
kk=sheet('data')
ll=kk.json()
from pprint import pprint as pp
get_ipython().run_line_magic('edit', '5')
pp(ll)
d()
del ll
del kk
def sheet(sh):
    url = f"https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/{sh}?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
    r=requests.get(url)
    ll=r.json()
    return ll
    
ll=sheet('data')
pp(ll)
kk=sheet('acctg')
pp(kk)
for a in kk:
    print(a)
    
kk.items()
kk
kk['ne']="new"
kk
del kk['ne']
kk
harry_potter_dict = {
    "Harry Potter": "Gryffindor",
    "Ron Weasley": "Gryffindor",
    "Hermione Granger": "Gryffindor"
}
kk.['new']=harry_potter_dict
kk['new']=harry_potter_dict
kk
del kk['new']
kk
ll
kk.update(ll)
kk
kk.update(ll)
kk
ll
del ll['ranger']
s=ll['range']
ll
del ll['range']
ll
ll.update(s)
s
s
ll['range']=s
ll
kk
kk['values'][1]
for a k['values']:
    print(a)
for a in k['values']:
    print(a)
    
get_ipython().run_line_magic('edit', '48')
get_ipython().run_line_magic('w', '')
del harry_potter_dict
get_ipython().run_line_magic('w', '')
ll
ll.pop()
ll.popitem()
ll
ll.popitem()
ll.popitem()
ll
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('w', '')
ll=sheet('data')
pp(ll)
tt=sheet('data')
resp = requests.get('https://reqres.in/api/users')
resp_dict = resp.json()

print(type(resp_dict))


print(json.dumps(resp_dict, indent=4))
mm=sheet('math')
mm
mm.get("values")
mm.get("values1")
mm.get("values1","uh uh")
for a in mm:
    print(mm.get(a))
    
for a in mm:
    print(f'{mm[a]} - {mm.get(a)}')
    
for a in mm:
    print(f'{a} - {mm.get(a)}')
    
ll
for a,b in ll:
    print(a,b)
    
for a,b in ll.items:
    print(a,b)
    
for a,b in ll.items():
    print(a,b)
    
for a,b in ll.items():
    print((a,)b)
for a,b in ll.items():
    print((a,b))
    
from collections import Counter
print(Counter(ll.values()))
Counter
Counter(ll.values())
ll
ll[1]
Counter(ll['range'].values())
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('cd', 'dict/')
from csv import reader
opened_file_char = open("c.csv", encoding="utf-8-sig")
opened_file_char
f=open("c.csv", encoding="unicode_escape")
f
for a in f:
    print(a)
    
get_ipython().run_line_magic('h', '')
rr=reader(f)
rr
ss=list(rr)
ss
rr
for a in rr:
    print(a)
    
hi(0)
def hi():
  for a in enumerate(In):
      print(a)
      
hi()
get_ipython().run_line_magic('edit', '93')
for a in f:
    print(a)
    
for a in f:
    print(a)
    
get_ipython().run_line_magic('edit', '93')
ss=reader(f)
tt=list(ss)
tt
get_ipython().run_line_magic('h', '')
t(tt)
tt[0:5]
tt[0]
pp(tt)
import json
import requests
from pprint import pprint as pp
# https://docs.google.com/spreadsheets/d/1AeXz0cVvC6iY6wDqsXkXYwowRjfJyLoWGltHJEUCD4Y/edit#gid=674225399
def sheet(sh):
    url = f"https://sheets.googleapis.com/v4/spreadsheets/1v0WTX_g0SEHb-EfG9faV3ayFo1WZUmUj8Lhgc2Kw2cA/values/{sh}?alt=json&key=AIzaSyCZ3y8Es42zvNGON7ezA6q4dxe8RNcyQIs"
    r=requests.get(url)
    ll=r.json()
    return ll
    
ll=sheet('data')
pp(ll)
mm=sheet('math')
pp(mm)
get_ipython().run_line_magic('w', '')
print(f"{ll} {mm}")
print(f"{ll} \n {mm}")
print(f"{ll} \n\n {mm}")
get_ipython().run_line_magic('c', '')
print(f"{ll} \n\n {mm}")
ll.update(mm)
ll
print(f"{ll} \n\n {mm}")
nn=mm.copy()
nn
nn=ll.copy()
nn
get_ipython().run_line_magic('c', '')
2^2
2^^2
2**2
qq is None
qq=None
qq is None
qq == None
get_ipython().run_line_magic('c', '')
qq=1
print(f"{qq-}")
print(f"{qq=}")
print(f"{qq!a}")
print(f"{qq!r}")
print(f"{qq🍕!r}")
print(f"{🍕!a}")
jj="🍿"
print(jj)
print(f"{jj!a}")
print(f"{jj!r}")
repr(jj)
import logging
get_ipython().run_line_magic('c', '')
logging.basicConfig(format='%(asctime)s %(levelname)s:%(name)s:%(message)s')
logging.warning('You are learning Python logging!')
import time

actual_time = time.perf_counter()
comput_time = time.process_time()

result = f(*args, **kw)

actual_time = time.perf_counter() - actual_time
comput_time = time.process_time() - comput_time
import time
from functools import wraps

def timing(f):
    """
    Decorator to be used to measure the time it takes for a single call
    """

    @wraps(f)
    def wrap(*args, **kw):
        actual_time = time.perf_counter()
        comput_time = time.process_time()

        result = f(*args, **kw)

        actual_time = time.perf_counter() - actual_time
        comput_time = time.process_time() - comput_time

        print(
            '[%2.4fs|%2.4fs] func:%r args:[%r, %r]' % (
                actual_time,
                comput_time,
                f.__name__,
                args if len(args) < 1000 else "<something large>",
                kw
            )
        )
        return result

    return wrap
import time

@timing
def my_heavy_function(a, b):
    time.sleep(1)
    
my_heavy_function(1, "2")
d()
logging.debug('debug')
get_ipython().run_line_magic('h', '')
logging.error('debug')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
logging.basicConfig(level=logging.INFO, filename='log.log', filemode="w")
logging.error('error')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
logging.basicConfig(level=logging.INFO, filename='log.log', filemode="w")
logging.error('error')
get_ipython().run_line_magic('edit', '54')
logging.error('error')
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('edit', '54')
logging.error('error')
import logging
logging.basicConfig(level=logging.INFO, filename="log.log", filemode="a",
format='%(asctime)s %(levelname)s:%(name)s:%(message)s')
x=41
logging.error('The lady doth protest too much, methinks')
logging.info(f"the value of x is {x}")
get_ipython().run_line_magic('c', '')
import logging
logging.basicConfig(level=logging.INFO, filename="log.log", filemode="a",
format='%(asctime)s %(levelname)s:%(name)s:%(message)s')
x=41
logging.error('The lady doth protest too much, methinks')
logging.info(f"asdffffffffffffffffffffffffffffffffof x is {x}")
get_ipython().run_line_magic('c', '')
try:
    10/0
except ZeroDivisionError as e:
    logging.exception("zero")
    
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('pwd', '')
os.mkdir('decor')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('ls', '')
os.chdir('decor')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('c', '')
get_ipython().system('touch one.py')
get_ipython().run_line_magic('ls', '')
def one(f):
    print('this is f')
    f()

def two(g):
    print('this is g')
    
two(2)
one(two())
one(two(1))
get_ipython().run_line_magic('c', '')
one(two)
def two():
    print('this is g')
    
one(two)
one(two)
@one
def three():
    print('this is three')
    
three()
get_ipython().run_line_magic('c', '')
def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner


def ordinary():
    print("I am ordinary")
    
ordinary()
make_pretty()
make_pretty()
def a():
    print('a)
def a():
    print('a')
    
make_pretty(a)
make_pretty(a())
make_pretty(a())()
make_pretty(a())
ss=make_pretty(a())
ss()
ss
get_ipython().run_line_magic('c', '')
@one
def two():
    print('this is g')
    
two()
two
p(tow)
t(two)
get_ipython().run_line_magic('c', '')
def one(f):
    print('this is f')
    f()

@one
def two():
    print('this is g')
    
two()
two(one)
t(two)
def two():
    print('this is g')
    
get_ipython().run_line_magic('c', '')
def(two)
t(two)
one(two)
d()
d()
get_ipython().run_line_magic('c', '')
print(d())
get_ipython().run_line_magic('w', '')
get_ipython().run_line_magic('w', '')
def pd():
    print(d())
    
pd()
get_ipython().run_line_magic('h', '')
pd()
get_ipython().run_line_magic('c', '')
pd()
def gs(func):
    print("Good morning")
    func()

def sn():
    print("John")
    
sn()
gs(sn)
nn=gs(sn)
nn
nn()
get_ipython().run_line_magic('c', '')
def ok():
    def x():
        print('this is x ok')
        
    return x()
    
ok()
ok
ins(ok)
j=ok
ins(j)
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
get_ipython().run_line_magic('c', '')
pd()
print('testing script')
print('another test')
def ok(fu):
    def x():
        print('this is x ok')
        fu()
    return x
def dec():
    print('this is dec')
    
ok(dec)
ok(dec())
o=ok(dec())
o()
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('h', '')
o
o()
ins(o)
print('another 3 test')
def increase_number(func):
    def increase_by_one():
        print("incrementing number by 1 ...")
        number_plus_one = func()  + 1
        return number_plus_one
    return increase_by_one 
    
@increase_number    
def get_number():
    return 5
    
print(get_number())
print(get_number())
def increase_number(func):
    def increase_by_one():
        print("incrementing number by 2 ...")
        number_plus_one = func()  + 2
        return number_plus_one
    return increase_by_one
    
print(get_number())
get_ipython().run_line_magic('h', '()')
h9()
hi()
@increase_number    
def get_number():
    return 5
    
print(get_number())
get_number()
get_number()
def gn():
    print(2)
    
go=gn()+4
gn()
def go():
    def inn():
        i=gn()+2
        return i
     return inn
def go():
    def inn():
        i=gn()+2
        return i
    return inn
    
go()
gg=go()
gg()
ins(go)
ins(gg)
def go(func):
    def inn():
        i=func()+2
        return i
    return inn
def gn():
    return 2    
go(gn)
go(gn())
s=go(gn())
s()
print(go(gn))
def go(func):
    def inn():
        i=func()+2
        return i
    return inn
def gn():
    return 2    
g2=go(gn)
print(g2)
print(g2())
ins(g2)
get_ipython().run_line_magic('c', '')
def go(func):
    def inn():
        i=func()+" within new"
        return i
    return inn
def gn():
    return "name"    
g2=go(gn)
print(g2())
@go
def ggn()
@go
def ggn():
    return "should be "
    
ggn()
def go(func):
    def inn():
        i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"    

g2=go(gn)
print(g2())
@go
def px():
    return " px is in the middle "
    
px()
g3=go(px)
p3()
g3()
get_ipython().run_line_magic('c', '')
df gx():
    print('gx')
def gx():
    print('gx')
    
pd()
go(gx())
go(g2)
go(g2())
gx()
get_ipython().run_line_magic('c', '')
g2=go(gn)
print(g2())
g2
get_ipython().run_line_magic('h', '')
print(go(gx()))
pd()
get_ipython().run_line_magic('c', '')
def go(func):
    def inn():
        i="before " +func()+" within new"
        return i
    return inn
    
pd()
ins(go)
def gx():
    print('gx')
    
gx()
go(gx())
get_ipython().run_line_magic('edit', '8')
def gn():
    return "name"
    
go(gn())
print(go(gn()))
get_ipython().run_line_magic('c', '')
def go(func):
    def inn():
        i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"    
def gx():
    print('gx')
g2=go(gn)
print(g2())
g3=go(gx)
print(g3())
def gx():
    return 'gx'
    
g3=go(gx)
print(g3())
gx()
get_ipython().run_line_magic('c', '')
print('inner stuff\n')
def go(func):
    def inn():
        print('inner stuff\n')
        i="before " +func()+" within new"
        return i
    return inn
    
go(gn())
print(go(gn()))
def go(func):
    def inn():
        print('inner stuff\n')
        i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"    
def gx():
    return 'gx'
g2=go(gn)
print(g2())
def go(func):
    def inn():
        print('inner stuff\n')
        i="before " +func()+" within new"
        print('more stuff\n')
        return i
    return inn
    
g2=go(gn)
print(g2())
get_ipython().run_line_magic('ls', '')
get_ipython().run_line_magic('pwd', '')
get_ipython().run_line_magic('c', '')
get_ipython().run_line_magic('c', '')
def go(func):
    def inn():
        i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"    

g2=go(gn())
print(f" g2 is {g2}")
print(g2())
gn()
def go(func):
    def inn():
        print("before " +func()+" within new")
        return i
    return inn
def gn():
    return "name"    

g2=go(gn())
print(f" g2 is {g2}")
g2()
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        # print("before " +func()+" within new")
        # return i
    return inn
def gn():
    return "name"
    
print(go(gn()))
print(go(gn))
pd()
get_ipython().run_line_magic('c', '')
pd()
gn()
i="ss" + gn()
i
i="ss" + gn() + gn()
i
def gg(func):
    def i():
        func()
    
def gg(func):
    def i():
        func()
        return i
        
gg(gn)
get_ipython().run_line_magic('edit', '19')
ins(gg)
h=gg(gn)
h
t(h)
gg(gn)
h
get_ipython().run_line_magic('c', '')
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        # i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"    

g2=go(gn())
print(f" g2 is {g2}")
ins(g2)
g3=go(gn)
print(g3)
gn()
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        # i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"    

g2=go(gn())
print(f" g2 is {g2}")
def make_pretty(func):
    def inner():
        print("I got decorated")
        func()
    return inner


def ordinary():
    print("I am ordinary")
    
def w(): print('s')
w()
make_pretty(w())
x=make_pretty(w())
print(x())
x=make_pretty(w)
print(x())
x()
x()
print(x())
ins(x)
func()
get_ipython().run_line_magic('c', '')
hi()
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        # i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"
    
gn()
x=go(gn)
x()
print(x())
pd()
for x in pd():
    del x
    
pd()
x=pd()
x
ins(pd)
for x in d():
    del x
    
pd()
del Out
pd()
for x in d():
    print(x)
    
for x in d():
    del x
    
pd()
del d
pd()
pd()
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        # i="before " +func()+" within new"
        return i
    return inn
def gn():
    return "name"
    
x=go(gn)
x
x()
del go
del gn
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        # i="before " +func()+" within new"
        # return i
    return inn
def gn():
    return "name"
    
x=go(gn)
x()
gn()
print(x())
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        # i="before " +func()+" within new"
        # return i
    return inn
def gn():
    print("name")
    
x=go(gn)
x()
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        print('this is after func')
        # i="before " +func()+" within new"
        # return i
    return inn
    
x=go(gn)
x()
ins(x)
x()
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        print('this is after func')
        i="before " +func()+" within new"
        print(i)
    return inn
    
x=go(gn)
x()
get_ipython().run_line_magic('c', '')
def go(func, func2):
    def inn():
        print('this is gn function\n')
        func()
        print('this is after func')
        i="before " +func2()+" within new"
        print(i)
    return inn
def gn():
    print("name")
def gp():
    return " gp "

g2=go(gn, gp)
g2()
def go(func):
    def inn():
        print('this is gn function\n')
        func()
        print('this is after func')
        # i="before " +func()+" within new"
        # return i
    return inn
def gn():
    print("name")

g2=go(gn())
g2()
g2=go(gn)
g2()
get_ipython().run_line_magic('c', '')
@go
def new():
    print('new decorated')
    
new()
ins(new)
def divide(a, b):
    print(a/b)
    
divide(2,3)
divide(2,0)
def wrap(fink):
    print('top')
    fink()

def kk():
    print("fink")
    
wrap(kk)
ss=wrap(kk)
ss()
ss
ins(ss)
get_ipython().run_line_magic('h', '')
wrap(kk)
get_ipython().run_line_magic('edit', '46')
get_ipython().run_line_magic('edit', '45')
type(wrap(kk))
type(xcv)
get_ipython().run_line_magic('c', '')
def wrap(fink):
    def inn():
        print('top')
        fink()
    return inn
def kk():
    print("fink")
    
x=wrap(kk)
x()
def wrap(fink):
    def inn():
        print('top')
        fink()
    def innn():
        print('innn')
        fink()
    return innn
def kk():
    print("fink")
    
get_ipython().run_line_magic('h', '')
x=wrap(kk)
x()
get_ipython().run_line_magic('c', '')
def smart_divide(func):
    def inner(a, b):
        print("I am going to divide", a, "and", b)
        if b == 0:
            print("Whoops! cannot divide")
            return

        return func(a, b)
    return inner
@smart_divide
def divide(a, b):
    print(a/b)
    
divide(2,0)
divide(2,2)
ins(divide)
get_ipython().run_line_magic('c', '')
ins(divide)
def divide(a, b):
    print(a/b)
def star(func):
    def inner(*args, **kwargs):
        print("*" * 30)
        func(*args, **kwargs)
        print("*" * 30)
    return inner


def percent(func):
    def inner(*args, **kwargs):
        print("%" * 30)
        func(*args, **kwargs)
        print("%" * 30)
    return inner


@star
@percent
def printer(msg):
    print(msg)


printer("Hello")
@star
def mystar(x):
    print(x)
    
mystar('this is me')
print('-'*30)
pd()
dir(gn)
gn.__closure__
t(x)
x.__closure__
get_ipython().run_line_magic('ls', '')
f = open("voice.js",'r',encoding = 'utf-8')
t(f)
f.read(4)
f.read(444)
get_ipython().run_line_magic('h', '')
hh
get_ipython().run_line_magic('h', '')
f.read()
f.tell()
f.read(2)
f.read(22)
f.seek(0)
f.tell()
print(f.read())
for x in f:
    print(x)
    
f.seek(0)
for x in f:
    print(x)
    
f.tell()
f.seek(0)
for x in f:
    print(x, end='')
    
f.tell()
f.readline()
f.seek(0)
f.readline()
f.readline()
f.readline()
f.readline()
f.readlines()
f.readlines()
f
import sqlite3
conn = sqlite3.connect("/home/steff007/.ipython/profile_default/history.sqlite")
c = conn.cursor()
ip = c.execute("SELECT source from history")
ipl=list(ip)
ipl
len(ipl)
import sqlite3
conn = sqlite3.connect("/home/steff007/.ipython/profile_default/history.sqlite")
c = conn.cursor()
ip = c.execute("SELECT source from history")
statement='''
SELECT source from history
'''
ipl=list(ip)
fileName = r"/home/steff007/pys/ipy_linux3"
fileName=r"nothing"
with open(fileName, "w", encoding="utf-8") as f:
    mapping = dict.fromkeys(range(32))
    for row in ipl:
        # print(len(str(row)))
        # myRow = row[0].translate(mapping)
        if len(row) != 0:
            # print(row[0])
            print(row[0], file=f)
            
pd()
statement=
statement
statement.strip()
import sqlite3
conn = sqlite3.connect("ok")
c = conn.cursor()
ip = c.execute("SELECT source from history")
ipl=list(ip)
ipl
