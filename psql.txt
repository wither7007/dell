\c template0
\c template1
\dt
\c
\c postgres 
\dt
\c
\c testdb
CREATE TABLE leads (id INTEGER PRIMARY KEY, name VARCHAR);
CREATE TABLE leads (id INTEGER PRIMARY KEY, name VARCHAR);
\dt
\dt+
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname NOT IN ('pg_catalog','information_schema');
\st
\dt
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname NOT IN ('pg_catalog','information_schema');
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname NOT IN ('pg_catalog','information_schema') order by tablename;
\l
\db
\e
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname NOT IN ('pg_catalog','information_schema') order by tablename;
\e
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname NOT IN ('pg_catalog','information_schema') order by tablename;
\h
\?
\r
\e
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname NOT IN ('pg_catalog','information_schema') order by tablename;
\e
SELECT current_schema();
\e
CREATE TABLESPACE ts_primary 
LOCATION '/home/steff007/junk/ts';
\e
CREATE TABLESPACE ts_primary 
LOCATION '/mnt/c/projects/junk/';
\db
\db+
\t
\dt
\l
\c testdb
\dt
\dt
\l
\c tempdb
\dt
\dt
\l
\c testdb 
\dt
\l
\c tempdb 
\dt
\dt
\l
\c testdb 
\dt
\dt
\l
\c tempdb
\lt
\dt
\dt
\l
\c db
drop tempdb
\l
\c tempdb
\l
CREATE DATABASE newdb;
\h
\?
\r
CREATE DATABASE newdb;
\l
\c newdb 
\dt
\l
\dt
\l
\c newdb 
\lt
\dt
\l
\c newdb 
\dt
\l
\c db
drop database newdb;
\l
CREATE DATABASE newdb;
\l
\c newdb
\dt
\l
\c newdb 
\dt
select * from author;
\l
\c newdb 
select * from author;
\newdb
\c newdb
select * from author;
\l
\c testdb 
\dt
\d stuff
\d
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns;
SELECT
* FROM
information_schema.columns;
\d information_schema.columns
\conninfo
\l
\l
\dt
select * from product;
\l
SELECT d.datname as "Name",
       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
       d.datcollate as "Collate",
       d.datctype as "Ctype",
       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
FROM pg_catalog.pg_database d
ORDER BY 1;
\l
dt
\dt
\dn
\dn stuf
\dn stuff
\dt
\d stuff
select * from  information_schema.columns;
 information_schema.columns;
\t
\dt
\d stuff
SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '57543' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns;
!ls
\!pwd
\! ls
\! pwd
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns;
\e
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns;
\l
\l
\d
\l
\c testdb
\dt
SELECT d.datname as "Name",
       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
       d.datcollate as "Collate",
       d.datctype as "Ctype",
       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
FROM pg_catalog.pg_database d
ORDER BY 1;
select 'Jim';
SELECT 'new stuff';
select 'more new stuff'
select * from stuff;
\l
\l
\l
drop database hr;
\l
drop database db;
create database place;
\l
\c
\c
\t
\dt
\l
delete database myproject ;
drop database myproject;
drop database new;
drop database sales;
\l
drop database newdb;
drop database testdb;
\l
SELECT d.datname as "Name",
       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
       d.datcollate as "Collate",
       d.datctype as "Ctype",
       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
FROM pg_catalog.pg_database d
ORDER BY 1;
SELECT  *
FROM pg_stat_activity
WHERE datname = 'db';
\c xxx
SELECT  *
FROM pg_stat_activity
WHERE datname = 'db';
SELECT  *
FROM pg_stat_activity
WHERE datname = 'xxx';
\c
\c tempdb
\l
SELECT  *
FROM pg_stat_activity
WHERE datname = 'place';
alter database place rename to placeHolder;
\l
create database yyy;
\l
\l
\dt yyy
\c
\c yyy
\dt
c
\l
drop database yyy;
drop database yyy;
\c
\c placeholder 
drop database yyy;
create database yyy;
\l
\c yyy
\dt
\dt author
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns
WHERE 
   table_name = 'author';
\d
\d author
\l
\c
\c placeholder 
drop database yyy;
\l
create database yyy;
\l
\c yy
\c yyy
\dt
\d task
INSERT INTO product tasks
( 'Carrots', 4562),
( 'Durian', 5228)
;
INSERT INTO tasks
( 'Carrots', 4562),
( 'Durian', 5228)
;
SELECT 
   table_name, 
   column_name, 
   data_type 
FROM 
   information_schema.columns
;
INSERT INTO task (text,day)
VALUES ('one','doday');
select * from task;
INSERT INTO task (text,day)
VALUES ('one','doday');
INSERT INTO task (text,day)
VALUES ('one','doday');
select * from task;
\l
\c
\c yyy
\d
\dt task
\d task
CREATE FUNCTION getTimestamp() RETURNS timestamp AS $$
BEGIN
RETURN CURRENT_TIMESTAMP;
END; $$
LANGUAGE PLPGSQL;
select getTimestamp();
\df
select getTimestamp();
\c
\l
\c tempdb
\dt
drop table articles;
drop table alembic_version ;
\dt
create database fastapi;
\l
\c fastapi 
\dt
select * from notes;
\l
\c fastapi 
\dt
select * from notes;
select * from notes;
select * from notes;
\l
\c
\l
\c fastapi 
\dt
\dt highscores
\d highscores
!pwd
\dn
\l
\c yyy
\dt
\d task
\c
\l
\c fastapi 
\dt
drop table highscores;
\c
drop table highscores;
\l
\dt
\dt
\l
\c fastapi
\dt
\c
\l
select * from FROM pg_catalog.pg_database;
select * FROM pg_catalog.pg_database;
select name FROM pg_catalog.pg_database;
select datname FROM pg_catalog.pg_database;
\c fastapi
\dt
select * from todo;
select * from todo;
\c
select * from notes;
\dt notes
\d notes
\! ls
\! pwd
\! fd
\! fd
\e
select * from notes;
\e
select * from notes;
\! fd
\i note.sql 
select * from notes;
select * from notes;
\dt
select * from todo;
delete from todo;
\dt todo
\d todo
select * from todo;
select * from todo;
insert into todo(name, score)
values
('bilbo', 99);
select * from todo;
CREATE TABLE person
(
  id BIGSERIAL PRIMARY KEY,
  first_name  TEXT NOT NULL,
  last_name   TEXT NOT NULL
);
INSERT INTO person (first_name, last_name)
VALUES ('Jason', 'Mitchell'),
       ('John', 'Smith'),
       ('Jane', 'Doe');
select * from person;
INSERT INTO person (first_name, last_name)
VALUES 
('Jason', 'Mitchell'),
       ('John', 'Smith'),
       ('Jane', 'Doe');
select * from person;
\! fd
\c
select * from person;
\dt
\copy person from 'countries.csv' delimiter ',' csv header;
\dt person
\d person
insert into person(first_name, last_name) values('j','x')
select * from person;
insert into person(first_name, last_name) values('j','x');
select * from person;
\copy person from 'countries.csv' delimiter ',' csv header;
\copy person(first_name,last_name) from 'countries.csv' delimiter ',' csv header;
select * from person;
\copy person(first_name,last_name) from 'countries.csv' delimiter ',' csv header;
select * from person;
\l
\c fastapi 
\d
\! fd
\i d.sql 
\dt
\copy person(first_name,last_name) from 'countries.csv' delimiter ',' csv header;
\d person
\copy person(word,meaning) from 'countries.csv' delimiter ',' csv header;
\copy person(word,mean) from 'countries.csv' delimiter ',' csv header;
\copy person(word,mean) from 'countries.csv' delimiter ',' csv header;
select * from person;
\copy person(word,mean) from 'countries.csv' delimiter ',' csv header;
select * from person;
delete from person
;
select * from person;
\copy person(word,mean) from 'countries.csv' delimiter ',' csv header;
select * from person;
\l
\c xxx
\d
select * from author;
select * from author;
\c zzz
\d
select * from notes;
select * from notes;
select * from notes;
\dt
\dt notes
\d notes
\l
create database qqq;
\l
\l
\c qqq
\dt
\d notes
select * from notes;
\l
\c qqq
\d
\d notes
select * from notes;
INSERT INTO notes (text, word)
VALUES ('first', 'word');
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
\l
\c yyy
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
delete from notes where id>16;
select * from notes;
select * from notes;
select * from notes;
\l
create database nnn;
\l
\c nn
\c nnn
\dt
\dt
\c
\l
\l
\c xxx
\d
select * from author;
select * from author;
create database abc;
\l
\c abc
\d
\l
\c xxx
\d
select * from author;
select * from author limit 1;
update author set name ="new name" where id=118;
update author set name="new name" where id=118;
update author set name="xxx" where id=118;
update author set name = "xxx" where id=118;
update author set name = 'xxx' where id=118;
select * from author limit 1;
select * from author ;
\d
select * from author
;
select * from book;
select * from book;
\c
\c tempdb
drop database xxx;
drop database xxx;
create database xxx;
\l
\c xxx
\d
\d
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select current_date;
select count(1)
from events;
select * from notes where time > now() - interval '1 week';
select * from notes where date_entered > now() - interval '1 week';
select * from notes where date_entered > now() - interval '5 minute';
select * from notes where date_entered > now() - interval '15 minute';
select text, data_entered from notes where date_entered > now() - interval '15 minute';
select text, date_entered from notes where date_entered > now() - interval '15 minute';
select text, date_entered from notes where date_entered > now() - interval '15 minute';
select text, date_entered from notes where date_entered > now() - interval '1 minute';
select text, date_entered from notes where date_entered > now() - interval '1 minute';
\e
select text, date_entered from notes where date_entered > now() - interval '1 minute';
delete from notes where date_entered > now() - interval '2 minute';
select text, date_entered from notes where date_entered > now() - interval '1 minute';
delete from notes where date_entered > now() - interval '2 minute';
\l
\c xxx
l
\c yyy
\d
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select * from notes;
\c xxx
select * from notes;
select * from notes;
select text, data_entered from notes where date_entered > now() - interval '60 minute';
\c
\l
\c nnn
\d
select text, data_entered from notes where date_entered > now() - interval '60 minute';
select * from notes;
\l
create database thurs;
\l
\cd thurs
\c thurs
\d
\dt notes
\d notes
select * from notes;
select * from notes;
select * from notes;
select * from notes;
select text, date_entered from notes;
select text, date_entered from notes;
\dt
select text, date_entered from notes;
\d notes
\c
\l
