print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
"Ayy
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
lss
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
a
list(a)
del a['license']
a
a
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
a
print(a)
sorted(a)
def ex(x):
    if x in a:
        return 'nope'
        
ex('a')
a.update({'a':333})
ex('a')
ex('b')
def ex(x):
    if x in a:
        return 'yep' 
    else:
        return 'nope'
        
ex('b')
ex('a')
for g, h in a.items():
    print(g,h)
    
for g, h in a.items():
    print(h)
    
l={}
for a in range(20):
    l.update(a, a**a)
    
l
l.update('a','j')
l.update({'a','j'})
l
h
hi()
l.update({'a':'j'})
l
l={}
for a in range(20):
    l.update({a: a**a})
    
l
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(20):
    print(a)
    
for a in range(1,20):
    print(a)
    
for a in range(1,16):
    print(a)
    
di={}
for a in range(1,16):
    di.update({a:a**2})
    
di
def mer(x, y):
    return x.update(y)
    
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di
di.update(l)
di
l
for a in range(30,40):
    l.update({a: 'nnn'})
    
l
p={}
mer(di, l)
p
di
l
os.listdir('.')
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
            
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr
type(jr)
type(jr[0])
jr[0].keys()
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
[(a,b) for (a,b) in jr[0].items()]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    
with open('xx', 'w') as f:
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
    
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
lss
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
a
list(a)
del a['license']
a
a
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
a
print(a)
sorted(a)
def ex(x):
    if x in a:
        return 'nope'
        
ex('a')
a.update({'a':333})
ex('a')
ex('b')
def ex(x):
    if x in a:
        return 'yep' 
    else:
        return 'nope'
        
ex('b')
ex('a')
for g, h in a.items():
    print(g,h)
    
for g, h in a.items():
    print(h)
    
l={}
for a in range(20):
    l.update(a, a**a)
    
l
l.update('a','j')
l.update({'a','j'})
l
h
hi()
l.update({'a':'j'})
l
l={}
for a in range(20):
    l.update({a: a**a})
    
l
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(20):
    print(a)
    
for a in range(1,20):
    print(a)
    
for a in range(1,16):
    print(a)
    
di={}
for a in range(1,16):
    di.update({a:a**2})
    
di
def mer(x, y):
    return x.update(y)
    
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di
di.update(l)
di
l
for a in range(30,40):
    l.update({a: 'nnn'})
    
l
p={}
mer(di, l)
p
di
l
os.listdir('.')
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
            
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr
type(jr)
type(jr[0])
jr[0].keys()
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
[(a,b) for (a,b) in jr[0].items()]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    
with open('xx', 'w') as f:
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
    
[(a,b) for (a,b) in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()][0]
l2=[[a,b] for [a,b] in jr[0].items()]
l2
'xx'.joint(l2)
'xx'.join(l2)
l2
l2[:3]
'xx'.join(l2)
'xx'.join(l2[1])
' '.join(l2[1])
"->".join(jr)
"->".join(jr[0])
"->\n".join(jr[0])
l3={}
for a in range(2,20):
    l3.update({a:a*3})
    
l3
2+=3
c=0
for a,b in l3:
    c=c+b
    
l3
for a,b in l3:
    print(a,b)
    
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
lss
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
a
list(a)
del a['license']
a
a
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
a
print(a)
sorted(a)
def ex(x):
    if x in a:
        return 'nope'
        
ex('a')
a.update({'a':333})
ex('a')
ex('b')
def ex(x):
    if x in a:
        return 'yep' 
    else:
        return 'nope'
        
ex('b')
ex('a')
for g, h in a.items():
    print(g,h)
    
for g, h in a.items():
    print(h)
    
l={}
for a in range(20):
    l.update(a, a**a)
    
l
l.update('a','j')
l.update({'a','j'})
l
h
hi()
l.update({'a':'j'})
l
l={}
for a in range(20):
    l.update({a: a**a})
    
l
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(20):
    print(a)
    
for a in range(1,20):
    print(a)
    
for a in range(1,16):
    print(a)
    
di={}
for a in range(1,16):
    di.update({a:a**2})
    
di
def mer(x, y):
    return x.update(y)
    
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di
di.update(l)
di
l
for a in range(30,40):
    l.update({a: 'nnn'})
    
l
p={}
mer(di, l)
p
di
l
os.listdir('.')
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
            
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr
type(jr)
type(jr[0])
jr[0].keys()
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
[(a,b) for (a,b) in jr[0].items()]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    
with open('xx', 'w') as f:
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
    
[(a,b) for (a,b) in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()][0]
l2=[[a,b] for [a,b] in jr[0].items()]
l2
'xx'.joint(l2)
'xx'.join(l2)
l2
l2[:3]
'xx'.join(l2)
'xx'.join(l2[1])
' '.join(l2[1])
"->".join(jr)
"->".join(jr[0])
"->\n".join(jr[0])
l3={}
for a in range(2,20):
    l3.update({a:a*3})
    
l3
2+=3
c=0
for a,b in l3:
    c=c+b
    
l3
for a,b in l3:
    print(a,b)
    
c=0
for a,b in l3.items():
    c=c+b
    
c
l3
c=0
for a,b in l3.items():
    c=c+b
    
c
d+=c
l3
l3.items()
sum(l3.items())
l3.values()
sum(l3.values())
jr
jr
s=jr[0]
del s['watchers']
s
for a,b in s.items():
    print(a,b)
    
[a,b for a,b in s]
[(a,b) for a,b in s]
[(a,b) for a,b in s.items()]
[str((a,b)) for a,b in s.items()]
[str(a,b) for a,b in s.items()]
del a b
del b, a
l2
del l2
del c
'jim'[1]
'jim'[:1]
'jimmy'[:1]
'jimmy'[:3]
'jimmy'[:-1]
'jimmy'[::-1]
'jimmy'[::1]
'jimmy'[::4]
'jimmy'[::-1]
ji={}
for a in range(2,20):
    ji.update({a:a*3})
    
ji
del ji[2]
ji
for q,t in jim.items():
    print(q, t*30)
    
for q,t in ji.items():
    print(q, t*30)
    
[a for a in range(3,20)]
[a for a in range(3,20,3)]
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
for d in (dic1, dic2, dic3): print(d)
for d in (dic1, dic2, dic3): print(d)
nn={}
for d in (dic1, dic2, dic3): nn.update(d)
nn
d1
dic1
[a for a in dic1]
[(a,b) for a, b in dic1]
[(a,b) for (a, b) in dic1]
dic1
[(a,b) for a, b in dic1.items()]
[(a,b) for a, b in dic1.items()][1]
mm=[(a,b) for a, b in dic1.items()].copy()
mm
d()
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    return dd
    
d()
del mm
one=[x for x in range(10,15)]
two=[x for x in range(20,25)]
del dic1, dic2, dic3
one
two
zip(one,two)
list(zip(one,two))
two.append(33)
list(zip(one,two))
two
dict(zip(one,two))
from export import sheet
t=sheet('shakes')
t
type(t)
[a for a in t]
a['values']
t['values']
import random
randdom.random
random.random
random.random()
def rnd():
    return int(random.random*1000)
    
rnd()
def rnd():
    return int(random.random()*1000)
    
rnd()
rnd()
rnd()
rnd()
[rnd() for a in range(30)]
def rnd(a=1000):
    return int(random.random()*a)
    
rnd()
rnd(1000000)
rnd(1000000)
[rnd(100000) for a in range(10)]
max(1,3)
ll={}
for a in range(2):
    ll.update({a:rnd()})
     
ll
for a in range(20):
    ll.update({a:rnd()})
    
ll
max[b for b in ll.values()]
max([b for b in ll.values()])
ss={}
len(ss)
bool(ss)
bool(0)
bool(None)
bool(jr)
bool(ll)
bool(False)
bool(True)
bool(3)
bool(xxx)
xxx=None
bool(xxx)
xxx=Non
xxx='n'
bool(xxx)
from export import rnd
rnd()
[rnd() for a in range(30)]
uu={}
for a in range(20):
    uu.update({rnd():rnd()})
    
uu
sort(uu)
sorted(uu)
a
uu
for a in sorted(uu):
    print(a)
    
for a in sorted(uu):
    print(a, uu[a])
    
d1 = {'a': 100, 'b': 200, 'c':300}
for a,b in d1.items():
    print(a,b)
    
d2 = {'a': 300, 'b': 200, 'd':400}
d1['a']
[x for x in d1.keys()]
[x for x in d2.keys()]
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
lss
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
a
list(a)
del a['license']
a
a
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
a
print(a)
sorted(a)
def ex(x):
    if x in a:
        return 'nope'
        
ex('a')
a.update({'a':333})
ex('a')
ex('b')
def ex(x):
    if x in a:
        return 'yep' 
    else:
        return 'nope'
        
ex('b')
ex('a')
for g, h in a.items():
    print(g,h)
    
for g, h in a.items():
    print(h)
    
l={}
for a in range(20):
    l.update(a, a**a)
    
l
l.update('a','j')
l.update({'a','j'})
l
h
hi()
l.update({'a':'j'})
l
l={}
for a in range(20):
    l.update({a: a**a})
    
l
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(20):
    print(a)
    
for a in range(1,20):
    print(a)
    
for a in range(1,16):
    print(a)
    
di={}
for a in range(1,16):
    di.update({a:a**2})
    
di
def mer(x, y):
    return x.update(y)
    
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di
di.update(l)
di
l
for a in range(30,40):
    l.update({a: 'nnn'})
    
l
p={}
mer(di, l)
p
di
l
os.listdir('.')
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
            
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr
type(jr)
type(jr[0])
jr[0].keys()
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
[(a,b) for (a,b) in jr[0].items()]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    
with open('xx', 'w') as f:
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
    
[(a,b) for (a,b) in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()][0]
l2=[[a,b] for [a,b] in jr[0].items()]
l2
'xx'.joint(l2)
'xx'.join(l2)
l2
l2[:3]
'xx'.join(l2)
'xx'.join(l2[1])
' '.join(l2[1])
"->".join(jr)
"->".join(jr[0])
"->\n".join(jr[0])
l3={}
for a in range(2,20):
    l3.update({a:a*3})
    
l3
2+=3
c=0
for a,b in l3:
    c=c+b
    
l3
for a,b in l3:
    print(a,b)
    
c=0
for a,b in l3.items():
    c=c+b
    
c
l3
c=0
for a,b in l3.items():
    c=c+b
    
c
d+=c
l3
l3.items()
sum(l3.items())
l3.values()
sum(l3.values())
jr
jr
s=jr[0]
del s['watchers']
s
for a,b in s.items():
    print(a,b)
    
[a,b for a,b in s]
[(a,b) for a,b in s]
[(a,b) for a,b in s.items()]
[str((a,b)) for a,b in s.items()]
[str(a,b) for a,b in s.items()]
del a b
del b, a
l2
del l2
del c
'jim'[1]
'jim'[:1]
'jimmy'[:1]
'jimmy'[:3]
'jimmy'[:-1]
'jimmy'[::-1]
'jimmy'[::1]
'jimmy'[::4]
'jimmy'[::-1]
ji={}
for a in range(2,20):
    ji.update({a:a*3})
    
ji
del ji[2]
ji
for q,t in jim.items():
    print(q, t*30)
    
for q,t in ji.items():
    print(q, t*30)
    
[a for a in range(3,20)]
[a for a in range(3,20,3)]
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
for d in (dic1, dic2, dic3): print(d)
for d in (dic1, dic2, dic3): print(d)
nn={}
for d in (dic1, dic2, dic3): nn.update(d)
nn
d1
dic1
[a for a in dic1]
[(a,b) for a, b in dic1]
[(a,b) for (a, b) in dic1]
dic1
[(a,b) for a, b in dic1.items()]
[(a,b) for a, b in dic1.items()][1]
mm=[(a,b) for a, b in dic1.items()].copy()
mm
d()
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    return dd
    
d()
del mm
one=[x for x in range(10,15)]
two=[x for x in range(20,25)]
del dic1, dic2, dic3
one
two
zip(one,two)
list(zip(one,two))
two.append(33)
list(zip(one,two))
two
dict(zip(one,two))
from export import sheet
t=sheet('shakes')
t
type(t)
[a for a in t]
a['values']
t['values']
import random
randdom.random
random.random
random.random()
def rnd():
    return int(random.random*1000)
    
rnd()
def rnd():
    return int(random.random()*1000)
    
rnd()
rnd()
rnd()
rnd()
[rnd() for a in range(30)]
def rnd(a=1000):
    return int(random.random()*a)
    
rnd()
rnd(1000000)
rnd(1000000)
[rnd(100000) for a in range(10)]
max(1,3)
ll={}
for a in range(2):
    ll.update({a:rnd()})
     
ll
for a in range(20):
    ll.update({a:rnd()})
    
ll
max[b for b in ll.values()]
max([b for b in ll.values()])
ss={}
len(ss)
bool(ss)
bool(0)
bool(None)
bool(jr)
bool(ll)
bool(False)
bool(True)
bool(3)
bool(xxx)
xxx=None
bool(xxx)
xxx=Non
xxx='n'
bool(xxx)
from export import rnd
rnd()
[rnd() for a in range(30)]
uu={}
for a in range(20):
    uu.update({rnd():rnd()})
    
uu
sort(uu)
sorted(uu)
a
uu
for a in sorted(uu):
    print(a)
    
for a in sorted(uu):
    print(a, uu[a])
    
d1 = {'a': 100, 'b': 200, 'c':300}
for a,b in d1.items():
    print(a,b)
    
d2 = {'a': 300, 'b': 200, 'd':400}
d1['a']
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
one
two
dict(zip(one,two))
print(d1)
print(d2)
d1['c']
d1['d']
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
lss
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
a
list(a)
del a['license']
a
a
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
a
print(a)
sorted(a)
def ex(x):
    if x in a:
        return 'nope'
        
ex('a')
a.update({'a':333})
ex('a')
ex('b')
def ex(x):
    if x in a:
        return 'yep' 
    else:
        return 'nope'
        
ex('b')
ex('a')
for g, h in a.items():
    print(g,h)
    
for g, h in a.items():
    print(h)
    
l={}
for a in range(20):
    l.update(a, a**a)
    
l
l.update('a','j')
l.update({'a','j'})
l
h
hi()
l.update({'a':'j'})
l
l={}
for a in range(20):
    l.update({a: a**a})
    
l
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(20):
    print(a)
    
for a in range(1,20):
    print(a)
    
for a in range(1,16):
    print(a)
    
di={}
for a in range(1,16):
    di.update({a:a**2})
    
di
def mer(x, y):
    return x.update(y)
    
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di
di.update(l)
di
l
for a in range(30,40):
    l.update({a: 'nnn'})
    
l
p={}
mer(di, l)
p
di
l
os.listdir('.')
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
            
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr
type(jr)
type(jr[0])
jr[0].keys()
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
[(a,b) for (a,b) in jr[0].items()]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    
with open('xx', 'w') as f:
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
    
[(a,b) for (a,b) in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()][0]
l2=[[a,b] for [a,b] in jr[0].items()]
l2
'xx'.joint(l2)
'xx'.join(l2)
l2
l2[:3]
'xx'.join(l2)
'xx'.join(l2[1])
' '.join(l2[1])
"->".join(jr)
"->".join(jr[0])
"->\n".join(jr[0])
l3={}
for a in range(2,20):
    l3.update({a:a*3})
    
l3
2+=3
c=0
for a,b in l3:
    c=c+b
    
l3
for a,b in l3:
    print(a,b)
    
c=0
for a,b in l3.items():
    c=c+b
    
c
l3
c=0
for a,b in l3.items():
    c=c+b
    
c
d+=c
l3
l3.items()
sum(l3.items())
l3.values()
sum(l3.values())
jr
jr
s=jr[0]
del s['watchers']
s
for a,b in s.items():
    print(a,b)
    
[a,b for a,b in s]
[(a,b) for a,b in s]
[(a,b) for a,b in s.items()]
[str((a,b)) for a,b in s.items()]
[str(a,b) for a,b in s.items()]
del a b
del b, a
l2
del l2
del c
'jim'[1]
'jim'[:1]
'jimmy'[:1]
'jimmy'[:3]
'jimmy'[:-1]
'jimmy'[::-1]
'jimmy'[::1]
'jimmy'[::4]
'jimmy'[::-1]
ji={}
for a in range(2,20):
    ji.update({a:a*3})
    
ji
del ji[2]
ji
for q,t in jim.items():
    print(q, t*30)
    
for q,t in ji.items():
    print(q, t*30)
    
[a for a in range(3,20)]
[a for a in range(3,20,3)]
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
for d in (dic1, dic2, dic3): print(d)
for d in (dic1, dic2, dic3): print(d)
nn={}
for d in (dic1, dic2, dic3): nn.update(d)
nn
d1
dic1
[a for a in dic1]
[(a,b) for a, b in dic1]
[(a,b) for (a, b) in dic1]
dic1
[(a,b) for a, b in dic1.items()]
[(a,b) for a, b in dic1.items()][1]
mm=[(a,b) for a, b in dic1.items()].copy()
mm
d()
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    return dd
    
d()
del mm
one=[x for x in range(10,15)]
two=[x for x in range(20,25)]
del dic1, dic2, dic3
one
two
zip(one,two)
list(zip(one,two))
two.append(33)
list(zip(one,two))
two
dict(zip(one,two))
from export import sheet
t=sheet('shakes')
t
type(t)
[a for a in t]
a['values']
t['values']
import random
randdom.random
random.random
random.random()
def rnd():
    return int(random.random*1000)
    
rnd()
def rnd():
    return int(random.random()*1000)
    
rnd()
rnd()
rnd()
rnd()
[rnd() for a in range(30)]
def rnd(a=1000):
    return int(random.random()*a)
    
rnd()
rnd(1000000)
rnd(1000000)
[rnd(100000) for a in range(10)]
max(1,3)
ll={}
for a in range(2):
    ll.update({a:rnd()})
     
ll
for a in range(20):
    ll.update({a:rnd()})
    
ll
max[b for b in ll.values()]
max([b for b in ll.values()])
ss={}
len(ss)
bool(ss)
bool(0)
bool(None)
bool(jr)
bool(ll)
bool(False)
bool(True)
bool(3)
bool(xxx)
xxx=None
bool(xxx)
xxx=Non
xxx='n'
bool(xxx)
from export import rnd
rnd()
[rnd() for a in range(30)]
uu={}
for a in range(20):
    uu.update({rnd():rnd()})
    
uu
sort(uu)
sorted(uu)
a
uu
for a in sorted(uu):
    print(a)
    
for a in sorted(uu):
    print(a, uu[a])
    
d1 = {'a': 100, 'b': 200, 'c':300}
for a,b in d1.items():
    print(a,b)
    
d2 = {'a': 300, 'b': 200, 'd':400}
d1['a']
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
one
two
dict(zip(one,two))
print(d1)
print(d2)
d1['c']
d1['d']
from export import rnd
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
one
two
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
for a in one:
    if a in two:
        print(f'{a}')
        
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        print(c)
        
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
up.update(d2)
up
up.update(d1)
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
up={}
for a in one:
    up.update(d1)
    up.update(d2)
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    up.update(d1)
    up.update(d2)
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}

up.update(d1)
up.update(d2)
for a in one:
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}

up.update(d1)
up.update(d2)
for a in one:
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
c
c
c
del c
from collections import counter
from collections import Counter
jj="nothing from nothing"
Counter(jj)
from export import sheet
t=sheet('shakes')
t['values']
str(t['values'])
t1=t['values']
t1
sum(ll,[])
sum(t1,[])
type(sum(t1,[]))
sum(t1,[])[1]
sum(t1,[])[2]
t3=sum(t1,[])
t3
''.join(t3)
' '.join(t3)
'\n'.join(t3)
print('\n'.join(t3))
counter('\n'.join(t3))
Counter('\n'.join(t3))
d1 = {'a': 100, 'b': 200, 'c':300}
Counter(d1)
Counter(d1)+Counter(d2)
d = dict(a=1, b=2, c=3)
d
data = open('input', 'r', encoding='utf-8').read().splitlines()
data
data = open('input', 'r', encoding='utf-8').read().splitlines()
data = open('input', 'r', encoding='utf-8').read().splitlines()
data
data[1]
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
lss
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
a
list(a)
del a['license']
a
a
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
a
print(a)
sorted(a)
def ex(x):
    if x in a:
        return 'nope'
        
ex('a')
a.update({'a':333})
ex('a')
ex('b')
def ex(x):
    if x in a:
        return 'yep' 
    else:
        return 'nope'
        
ex('b')
ex('a')
for g, h in a.items():
    print(g,h)
    
for g, h in a.items():
    print(h)
    
l={}
for a in range(20):
    l.update(a, a**a)
    
l
l.update('a','j')
l.update({'a','j'})
l
h
hi()
l.update({'a':'j'})
l
l={}
for a in range(20):
    l.update({a: a**a})
    
l
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(20):
    print(a)
    
for a in range(1,20):
    print(a)
    
for a in range(1,16):
    print(a)
    
di={}
for a in range(1,16):
    di.update({a:a**2})
    
di
def mer(x, y):
    return x.update(y)
    
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di
di.update(l)
di
l
for a in range(30,40):
    l.update({a: 'nnn'})
    
l
p={}
mer(di, l)
p
di
l
os.listdir('.')
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
            
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr
type(jr)
type(jr[0])
jr[0].keys()
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
[(a,b) for (a,b) in jr[0].items()]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    
with open('xx', 'w') as f:
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
    
[(a,b) for (a,b) in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()][0]
l2=[[a,b] for [a,b] in jr[0].items()]
l2
'xx'.joint(l2)
'xx'.join(l2)
l2
l2[:3]
'xx'.join(l2)
'xx'.join(l2[1])
' '.join(l2[1])
"->".join(jr)
"->".join(jr[0])
"->\n".join(jr[0])
l3={}
for a in range(2,20):
    l3.update({a:a*3})
    
l3
2+=3
c=0
for a,b in l3:
    c=c+b
    
l3
for a,b in l3:
    print(a,b)
    
c=0
for a,b in l3.items():
    c=c+b
    
c
l3
c=0
for a,b in l3.items():
    c=c+b
    
c
d+=c
l3
l3.items()
sum(l3.items())
l3.values()
sum(l3.values())
jr
jr
s=jr[0]
del s['watchers']
s
for a,b in s.items():
    print(a,b)
    
[a,b for a,b in s]
[(a,b) for a,b in s]
[(a,b) for a,b in s.items()]
[str((a,b)) for a,b in s.items()]
[str(a,b) for a,b in s.items()]
del a b
del b, a
l2
del l2
del c
'jim'[1]
'jim'[:1]
'jimmy'[:1]
'jimmy'[:3]
'jimmy'[:-1]
'jimmy'[::-1]
'jimmy'[::1]
'jimmy'[::4]
'jimmy'[::-1]
ji={}
for a in range(2,20):
    ji.update({a:a*3})
    
ji
del ji[2]
ji
for q,t in jim.items():
    print(q, t*30)
    
for q,t in ji.items():
    print(q, t*30)
    
[a for a in range(3,20)]
[a for a in range(3,20,3)]
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
for d in (dic1, dic2, dic3): print(d)
for d in (dic1, dic2, dic3): print(d)
nn={}
for d in (dic1, dic2, dic3): nn.update(d)
nn
d1
dic1
[a for a in dic1]
[(a,b) for a, b in dic1]
[(a,b) for (a, b) in dic1]
dic1
[(a,b) for a, b in dic1.items()]
[(a,b) for a, b in dic1.items()][1]
mm=[(a,b) for a, b in dic1.items()].copy()
mm
d()
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    return dd
    
d()
del mm
one=[x for x in range(10,15)]
two=[x for x in range(20,25)]
del dic1, dic2, dic3
one
two
zip(one,two)
list(zip(one,two))
two.append(33)
list(zip(one,two))
two
dict(zip(one,two))
from export import sheet
t=sheet('shakes')
t
type(t)
[a for a in t]
a['values']
t['values']
import random
randdom.random
random.random
random.random()
def rnd():
    return int(random.random*1000)
    
rnd()
def rnd():
    return int(random.random()*1000)
    
rnd()
rnd()
rnd()
rnd()
[rnd() for a in range(30)]
def rnd(a=1000):
    return int(random.random()*a)
    
rnd()
rnd(1000000)
rnd(1000000)
[rnd(100000) for a in range(10)]
max(1,3)
ll={}
for a in range(2):
    ll.update({a:rnd()})
     
ll
for a in range(20):
    ll.update({a:rnd()})
    
ll
max[b for b in ll.values()]
max([b for b in ll.values()])
ss={}
len(ss)
bool(ss)
bool(0)
bool(None)
bool(jr)
bool(ll)
bool(False)
bool(True)
bool(3)
bool(xxx)
xxx=None
bool(xxx)
xxx=Non
xxx='n'
bool(xxx)
from export import rnd
rnd()
[rnd() for a in range(30)]
uu={}
for a in range(20):
    uu.update({rnd():rnd()})
    
uu
sort(uu)
sorted(uu)
a
uu
for a in sorted(uu):
    print(a)
    
for a in sorted(uu):
    print(a, uu[a])
    
d1 = {'a': 100, 'b': 200, 'c':300}
for a,b in d1.items():
    print(a,b)
    
d2 = {'a': 300, 'b': 200, 'd':400}
d1['a']
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
one
two
dict(zip(one,two))
print(d1)
print(d2)
d1['c']
d1['d']
from export import rnd
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
one
two
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
for a in one:
    if a in two:
        print(f'{a}')
        
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        print(c)
        
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
up.update(d2)
up
up.update(d1)
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
up={}
for a in one:
    up.update(d1)
    up.update(d2)
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    up.update(d1)
    up.update(d2)
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}

up.update(d1)
up.update(d2)
for a in one:
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}

up.update(d1)
up.update(d2)
for a in one:
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
c
c
c
del c
from collections import counter
from collections import Counter
jj="nothing from nothing"
Counter(jj)
from export import sheet
t=sheet('shakes')
t['values']
str(t['values'])
t1=t['values']
t1
sum(ll,[])
sum(t1,[])
type(sum(t1,[]))
sum(t1,[])[1]
sum(t1,[])[2]
t3=sum(t1,[])
t3
''.join(t3)
' '.join(t3)
'\n'.join(t3)
print('\n'.join(t3))
counter('\n'.join(t3))
Counter('\n'.join(t3))
d1 = {'a': 100, 'b': 200, 'c':300}
Counter(d1)
Counter(d1)+Counter(d2)
d = dict(a=1, b=2, c=3)
d
data = open('input', 'r', encoding='utf-8').read().splitlines()
data
data = open('input', 'r', encoding='utf-8').read().splitlines()
data = open('input', 'r', encoding='utf-8').read().splitlines()
data
data[1]
sum(data,[])
type(data)
data
from export import sheet
ll=sheet('shakes')
type(ll)
[a for a in ll.items()]
[a for a in ll.keys()]
tu=tuple([a for a in ll.keys()])
tu
a,b,c = tu
a
b
c
ll[c]
ll
c
ll[c]
with open('xx', 'w').write(ll)
with open('xx', 'w').writelines(ll)
open('xx', 'w').writelines(ll)
open('xx', 'w').writelines(ll[c])
open('xx', 'w').writelines(str(ll[c]))
tx=(1,2,3)
tx+4
tx+(9,)
tx+(9)
tx+(9,20,2,)
tx=tx+(9,20,2,)
tx
tx[:3]
set(tx)
2 in tx
6 in tx
c
c
del c
tx
del tx[1]
tx[1]=90
tx
tx.remove(1)
tx[:3]
tx[3:]
ty=tx+tx
ty
ty.count(2)
tz=tuple(set(ty))
tz
ty[3:5]
typ
typ
typ
ty
print(enumerate(ty))
[a for a in enumerate(ty)]
ty
dict([a for a in enumerate(ty)])
tzz=dict([a for a in enumerate(ty)])
tzz.keys()
tzz.values()
from export import rnd
[rnd() for a in range(30)]
[rnd() for a in range(10)]
rn=[rnd() for a in range(10)]
tuple(rn)
[a for a in enumerate(rn)]
rn
ty
ty[::-1]
ty[::]
str(ty)
t=()
if t:
    print(t)
    
if t:
    print(t)
else    
    print('null')
if t:
    print(t)
else:
    print('null')
    
t=('')
if t:
    print(t)
else:
    print('null')
    
t=('a')
if t:
    print(t)
else:
    print('null')
    
type(t)
t=('a',)
type(t)
t=('')
if t
if t:print('yes')
t=1
if t:print('yes')
av=((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))
[a for a in av)
[a for a in av]
ty
sum(ty)
def aver(a):
    den=len(a)
    nu=sum(a)
    return nu/den
    
aver(1,20)
aver([1,2,3])
aver([rnd() for a in range(10)])
aver([rnd() for a in range(10)])
aver([rnd() for a in range(10)])
[aver(a) for a in av]
def gg(*nums):
    print(nums)
    
g(1,3,4)
gg(1,3,4)
def gg(*nums):
    print(type(nums))
    
gg(1,3,4)
ty
ll[c]
ll
x,y,z=[a for a in ll.keys()]
z
ll[z]
ll[z][:3]
ll[z][3:]
ll[z][:-3]
ll[z][-3:]
ll[z][:-3]
ll[z][1:-3]
sl=[a for a in range(8)]
sl
sl[-1]
sl[-1:3]
sl[-1:-3]
sl[-4]
sl[-4:2]
sl[4:2]
sl[:4]
sl[:-4]
sl[-4:]
ll[z][-3:]
ll[z][-6:]
print("this is clean")
dp
dp
dp
type(dp)
dp is None
dp not is None
dp not None
dp is not None
dp is None
import os
asdf
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.extend(dir_names,file_names)
    return res
    
dp='.
dp='.'
a=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(dir_names,file_names)
    return res
first=walk()
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names}')
    return res
first=walk()
first
res=[]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_names} {file_names}')
    return res
first=walk()
first
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
print(first)
dp='.'
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
dp
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
dp='.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
first
[a for a in 'jim']
print(dir(a))
xx=[a for a in 'jim']
print(dir(x))
print(dir(xx))
xx.__sizeof__
xx
xx.append((3,2))
xx
import os
dp=r'/mnt/c/you/alb'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'/mnt/c/you/'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
dp=r'.'
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
    return res
first=walk()
print(first)
help(os)
[a for a in help(os)]
s=[a for a in help(os)]
str(help(os))
type(help)
help(os)
os.listdir()
os.chdir(dir)
os.chdir('dir')
dp
res
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
dp='/mnt/c/projects '.strip()
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path} {file_names}')
    return res
first=walk()
print(first)
len(first)
first[1]
type(first[1])
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      print(os.path.join(root, name))
   for name in dirs:
      print(os.path.join(root, name))
      
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
res[:30]
for a in res:
    print(a)
    
[a for a in res and len(a) > 20]
[a for a in res if len(a) > 20]
[a for a in res if len(a) < 20]
[a for a in res if len(a) < 30]
[a for a in res if len(a) > 30]
res
res
"Hire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hire")
"aaHire the top freelancers".index("Hires")
res
'im' in 'jim'
'ims' in 'jim'
'ims' in 'jim'
res[:10]
[a for a in res if ' ' in a]
cps([a for a in res if ' ' in a])
spaced=[a for a in res if ' ' in a]
print(spaced)
spaced[:10]
import re
m1=spaced[:1]
m1
type(m1)
re.findall('ji', 'jim')
re.findall('xi', 'jim')
re.findall('[^i]', 'jim')
re.findall('[^im]', 'jim')
dirs
spaced[:10]
[ for a in spaced[:10] a[1]]
[ a for a in spaced[:10] a[1]]
os.listdir()
os.scandir()
for a in scandir():
    print(a)
    
for a in os.scandir():
    print(a)
    
type(os.walk())
type(os.walk('.'))
os.scandir()[1]
os.scandir().next
dir(os.scandir())
print(dir(os.scandir()))
print(dir(os.walk()))
print(dir(os.walk()))
print(dir(os.walk('.')))
import re
re.sub('i.*', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim')
re.sub('[^a-zA-Z0-9]', '', 'jim\\')
re.sub('[^a-zA-Z0-9]', '', 'jim\\is nothing')
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
spaced=[a for a in res if ' ' in a]
len(spaced)
mm=spaced[1]
mm
type(mm)
import re
re.sub('[^a-zA-Z0-9]', '', mm)
mm
mm.replace('\/mnt','')
mm.replace('/mnt','')
mm.replace('/mnt/c/you','')
mm.replace('/mnt/c/you/','')
mm
mm.replace('/mnt/c/you/','')
mm.replace('/mnt/c/you/','')
re.sub('[^a-zA-Z0-9]', '', mm)
re.sub('/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb/[^a-zA-Z0-9]', '', mm)
re.sub('.*/alb', '', mm)
re.sub('.*/you', '', mm)
m1=re.sub('.*/you', '', mm)
m1
re.sub('/[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9]', '', m1)
re.sub('[^a-zA-Z0-9/]', '', m1)
re.sub('[^a-zA-Z0-9/]\.', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', m1)
re.sub('[^a-zA-Z0-9/\.]', '', mm)
[a for a in spaced[10]]
spaced
spaced[1]
[a for a in spaced]
[a for a in spaced]
spaced[3]
spaced[:3]
[a for a in spaced[:10]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a, re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:30]]
[a + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +" " re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a +\" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" \" re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
print("\|")
print("\"")
[a + \"+ \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + \" + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
[a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv " a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "x     " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '', a) for a in spaced[:3]]
["mv "+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
[a for a in spaced[:10]]
["mv" +a for a in spaced[:10]]
["mv " +\'a for a in spaced[:10]]
["mv " + \'a for a in spaced[:10]]
["mv " + \"a for a in spaced[:10]]
[a for a in 'jim']
[" a" + a for a in 'jim']
[" a\'" + a for a in 'jim']
["a\' " + a for a in 'jim']
["mv \' " + a for a in 'jim']
["mv \' " + a "\'" for a in 'jim']
["mv \' " + a + "\'" for a in 'jim']
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced[:3]]
["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
m3[5]
cps(m3[5])
m3=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
cps(m3[5])
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
out=["mv \'"+ a + "  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out
len(out)
for a in out:
    print(a)
    
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
out[1]
with open('v', 'a') as x:
    print('nothing', file=x)
    
x.close()
with open('v', 'a') as x:
    print('nothing', file=x)
    
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
res
spaced
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
import re
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in res]
x
out
len out
len(out)
spaced=[a for a in res if ' ' in a]
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
out=["mv \'"+ a + "\'  " + re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
x=open('moves', 'w')
for a in out:
    print(a, file=x)
x.close()
m1="time3/In Our Time - S14_19 The Scientific Method (Jan 26 2012).mp3"
re.sub('[^a-zA-Z0-9/\.]', '_', m1) 
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/time3')
os.chdir('/mnt/c/you/time3')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
os.chdir('/mnt/c/you/')
os.rename(m1, re.sub('[^a-zA-Z0-9/\.]', '_', m1))
res
dp
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
len(res)
res
ms=sorted(res)
ms
with open(r'sorted.txt', 'w') as fp:
    for item in ms:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
import joblib

places = ['Berlin', 'Cape Town', 'Sydney', 'Moscow']
# Dumps into file
joblib.dump(places, 'places.sav')
import json

# Define list with values
basic_list = [1, "Cape Town", 4.6]

# Open output file for writing
with open('listfile.txt', 'w') as filehandle:
    json.dump(basic_list, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
with open('listfile.txt', 'w') as filehandle:
    json.dump(res, filehandle)
    
dp=r'/mnt/c/you/'

# dp=r'.'
res=[]
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
spaced=[a for a in res if ' ' in a]
len(spaced)
with open('listfile.txt', 'w') as filehandle:
    for a in res:
        filehandle.write(f'{a}\n')
        
spaced
m1=spaced[3]
m1
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
import re
re.sub('[^a-zA-Z0-9/\.]', '_', m1)
re.sub('[^a-zA-Z0-9/_\.]', '_', m1)
m1
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) for a in spaced]
out
out=[re.sub('[^a-zA-Z0-9/\.]', '_', a) + " "+ a for a in spaced]
out
out=[a + " " + re.sub('[^a-zA-Z0-9/\.]', '_', a)   for a in spaced]
out[:10]
log =open('log', 'a') 
for a in out[:10]:
    print(a, file=log)
log.close()
os.chdir('x')
for a in os.walk('.'):
    print(a)
    
for a in os.walk('.'):
    ins(a)
    
d()
ins(2)
ins(2)
print(d())
ins("j")
dir(2)
class DemoClass():  
    # using the __init__() function  
    def __init__(self):  
        self.var1 = 73  
        self._var2 = "hello"  
        self.__var3 = 11
        
dir(DemoClass)
class Demo:
    def __init__(self):
        self.__var1__ = 12

print(Demo().__var1__)
dir(Demo)
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in spaced[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    
for a in res[:5]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}')
    os.rename(oldName, newName)
    
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
#    for name in dirs:
#       print(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import re
spaced[:5]
log =open('log', 'a')
for a in spaced[:3]:
    oldName=a
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', a) 
    print(f'{oldName} will be {newName}', file=log)
    os.rename(oldName, newName)
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
len(res)
sorted(res)
sorted(res)
sorted(res, key=len)
sorted(res, key=len)[:20]
sorted(res, key=len, reverse=true)[:20]
sorted(res, key=len, reverse=True)[:20]
st=sorted(res, key=len, reverse=True)[:20]
log=open('log','a')
for a in st:
    print(a, file=log)
    
log.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
leng=[a for a in res if len(a)> 20]
leng
len(leng)
i in range(10)
range(10)
[i for  i in range(20)]
[i for  i in range(20,2)]
list(range(5))
list(range(20,30,2))
[i for i in range(20,30,2)]
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(len(leng))
    
for i in range(20,30,2):
    leng=[a for a in res if len(a)> i]
    print(f'{i} {len(leng)}')
    
r = range(1,10)
r
2 in r
2.5 in r
for i in range(20,30,2):
    leng=[a for a in res if 20< len(a)< 30]
    print(f'{i} {len(leng)}')
    
leng=[a for a in res if 20< len(a)<30]
len(leng)
leng=[a for a in res if 30< len(a)<40]
len(leng)
for i in range(20,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,30,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,50,2):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(2,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
[a for a in res if a>100]
[a for a in res if len(a)>100]
long=[a for a in res if len(a)>100]
long=open('long','a')
longf=open('long','a')
long.close()
for a in long:
    print(a, file=long)
    
for a in long:
    print(a, file=longf)
    
longf=open('long','a')
for a in long:
    print(a, file=longf)
    
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
long=[a for a in res if len(a)>100]
longf=open('longf','a')
for a in long:
    print(a, file=longf)
    
longf.close()
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))

for i in range(0,150,20):
    leng=[a for a in res if i< len(a)< i+10]
    print(f'{i} {len(leng)}')
    
long=[a for a in res if len(a)>100]
sheet('file')
sheet('files')
d1=sheet('files')
d1[:10]
d1
d1.keys()
d1('values')[:10]
d1('values')
d1('range')
d1['range']
d1['values']
d1['values'][:10]
d1['values'][:10][1]
x1=d1['values'][:10][1]
x1
x1[1]
x1[0]
jim='/you/b/cc'
import re
re.sub('/','\\',jim)
re.sub('/','\',jim)
re.sub('/','xx',jim)
re.sub('/','--',jim)
re.sub('/.*','--',jim)
re.sub('/.*/','--',jim)
jim
re.sub('/.*/','--',jim)
cps(jim)
x1[0]
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

subst = ""

# You can manually specify the number of replacements by changing the 4th argument
result = re.sub(regex, subst, test_str, 1)

if result:
    print (result)
    
# coding=utf8
# the above tag defines encoding for this document and is for Python 2.x compatibility

import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)

if matches:
    print ("Match was found at {start}-{end}: {match}".format(start = matches.start(), end = matches.end(), match = matches.group()))
    
    for groupNum in range(0, len(matches.groups())):
        groupNum = groupNum + 1
        
        print ("Group {groupNum} found at {start}-{end}: {group}".format(groupNum = groupNum, start = matches.start(groupNum), end = matches.end(groupNum), group = matches.group(groupNum)))

# Note: for Python 2.7 compatibility, use ur"" to prefix the regex and u"" to prefix the test string and substitution.
matches
import re

regex = r"\/mnt/you\/.*\/"

test_str = "/mnt/you/b/cc/this is"

matches = re.search(regex, test_str)
type(matches)
for a in matches:
    print(a)
    
matches.findall
matches
matches.group(1)
matches.group(0)
regex = r"\/mnt/you\/.*\/"
matches = re.search(regex, x1)
x1
matches = re.search(regex, x1[0])
matches.group(0)
regex
print(result)
regex
result = re.match(regex, x1[0])
print(result)
cps(x1[0])
regex = r"\/mnt/c/you\/.*\/"
result = re.match(regex, x1[0])
print(result)
result.group()
x1
nwork
nwork[:3]
nwork[1]
cps(nwork[1])
cps(regex)
regex = r"\/mnt/c/you\/.*\/"
cps(regex)
x1=nwork[1]
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
import re
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1)
x1
x1=nwork[1]

regex=r'\/mnt/c/you\/.*\/'
['/mnt/c/you/alb/I_CAN_SEE_CLEARLY_NOW_Jimmy_Cliff_Acoustic_cover_Tiwayo_de_Rising_Star_et_Awa_Sy_de_The_Voice.mp3', 'see clearly']
matches = re.search(regex, x1[0])
matches.group(0)
nwork
work['values']
work['values'][:3]
[a for a in nwork]
[a[1] for a in nwork]
work['values'][:3]
work['values'][:3][1]
work['values'][:3][1][0]
work['values'][:3][1][1]
for a in work['values']:
    print(a)
    
for a in work['values']:
    print(a[1])
    
for a in work['values']:
    print(a[0])
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to {a[1]}')
    
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
work['values'][:3][1][1]
space(work['values'][:3][1][1])
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  space({a[1]})')
    
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
ren=open('rename', 'a')
for a in work['values'][:3]:
    print(f'{a[0]} renamed to  {space(a[1])}', file=ren)
    os.rename(a[0], space(a[1]))
    
ren.close()
nwork[1]
[a for a in nwork]
[a[1] for a in nwork]
[a[0] for a in nwork]
f=open('x')
d()
for a in os.scandir('.'):
    print(a)
    
f=open('x')
f=open('xs')
try:
    f=open('x')
except Exception:
    print('error')
    
try:
    f=open('fdf.sh')
except Exception:
    print('error')
    
type(f)
dir(f)
print(dir(f))
for a in work['values'][:5]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:15]:
    print(f'{a[0]} renamed to  {space(a[1])}')
    
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
work=sheet('files')
nwork=work['values']
for a in work['values'][:5]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
        
regex=r'\/mnt/c/you\/.*\/'
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        print(f'{a[0]} renamed to  {space(a[1])}')
    except:
        pass
    # os.rename(a[0], space(a[1]))
    
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}+{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}space(a[1])}')
    except:
        pass
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
    except:
        pass
        
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}')
    except:
        pass
        
ren=open('rename.txt', 'a')
for a in work['values'][:15]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except:
        pass
ren.close()
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
long=[a for a in res if len(a)>100]
with open('ong.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
long
for a in long:
    print(a)
    
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file='long')
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}\n', file=filehandle)
        
with open('long.txt', 'w') as filehandle:
    for a in long:
        print(f'{a}', file=filehandle)
        
work=sheet('files')
nwork=work['values']
def space(x):
    newName=re.sub('[^a-zA-Z0-9/\.]', '_', x)
    return newName
    
nwork
regex=r'\/mnt/c/you\/.*\/'
ren=open('rename.txt', 'a')
for a in work['values'][:5]:
    try:
        matches = re.search(regex, a[0])
        print(matches.group())
        newD=matches.group()
        # print(f'{a[0]} renamed to  {newD}{space(a[1])}.mp3')
        oldName=a[0]
        newName=f'{newD}{space(a[1])}.mp3'
        print(f'{oldName} --> {newName}', file=ren)
        os.rename(oldName, newName)
    except Exception as e:
        print(e)
ren.close()
long=[a for a in res if len(a)>100]
long[:10]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res[:10]
import logging
import logging

# print a log message to the console.
logging.warning('This is a warning!')
logging.basicConfig(filename='program.log',level=logging.DEBUG)
logging.warning('An example message.')
logging.warning('Another message')
hi()
ogging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, format='%(asctime)s :: %(levelname)s :: %(message)s')
logging.info("Just like that!")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("Just like that!")
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log')
logging.basicConfig(level=logging.WARNING)

def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}

logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.basicConfig(level=logging.INFO, file='/mnt/c/projects/p3/sample.log', filemode='w')
logging.info("my first")
logging.critical("my first")
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.critical("my first")
logging.info("my first")
import logging
logging.basicConfig(level=logging.INFO, file='sample.log', filemode='w')
logging.info("my first")
logging.basicConfig(level=logging.INFO, file='sample.log')
logging.info("my first")
logging.info("my first")
log.handlers[0].stream
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt")
logging.critical('message')
logging.critical('wednesday')
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test...")
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG)
logging.debug("Debug logging test... XXXXXXXjj")
logging.info("my first")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG,
                    format="%(asctime)s %(message)s", filemode="w")
logging.debug("Debug logging test...")
logging.info("Program is working as expected")
logging.warning("Warning, the program may not function properly")
logging.error("The program encountered an error")
logging.critical("The program crashed")
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

logging.info("Hypotenuse of {a}, {b} is {c}".format(a=3, b=4, c=hypotenuse(a,b)))
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
def hypotenuse(a, b):
    """Compute the hypotenuse"""
    return (a**2 + b**2)**0.5

kwargs = {'a':3, 'b':4, 'c':hypotenuse(3, 4)}
logging.debug("a = {a}, b = {b}".format(**kwargs))
logging.info("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
logging.warning("a={a} and b={b} are equal".format(**kwargs))
logging.error("a={a} and b={b} cannot be negative".format(**kwargs))
logging.critical("Hypotenuse of {a}, {b} is {c}".format(**kwargs))
import logging
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
import logging
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
logging.info("nothing")
jim="jim"
jim="steffes"
logging.info("{jim}")
logging.info(jim)
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'spaced is {spaced}')
logging.info(f'res is {res}')
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
import logging
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
logging.info(f'res is {res}')
long=[a for a in res if len(a)>100]
logging.info(f'long is {long}')
sorted(long, key=len)
sorted(long, key=len, reverse=True)
slong=sorted(long, key=len, reverse=True)
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import os
import re
logging.basicConfig(filename="log.txt", level=logging.DEBUG, format="%(asctime)s %(message)s", filemode="w")
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
spaced=[a for a in res if ' ' in a]
long=[a for a in res if len(a)>100]
slong=sorted(long, key=len, reverse=True)
slong[:3]
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
import datetime
x = datetime.datetime.now()
x
print(x)
1 = x.strftime("%d/%m/%Y")
nn = x.strftime("%d/%m/%Y")
nn
nn = x.strftime("%d%S")
nn
nn = x.strftime("%H-%S")
nn
first
long=[a for a in first if len(a)>100]
long
slong=sorted(long, key=len, reverse=True)
slong
slong[:3]
slong[1]
long[1]
first
first=walk()
res
res[1]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk('/mnt/c/you')
walk()
res[1]
res=[]
def walk():
    for (dir_path, dir_names, file_names) in os.walk(dp):
        res.append(f'{dir_path}{dir_names} {file_names}')
        
walk()
res[1]
res[1][1]
res=[]
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
            
n=mywalk('mnt/c/you')
n
res
dp
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
dp
os.listdir('/mnt/c/you')
os.listdir(dp)
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
res=[]
def mywalk(dp):
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            print(name)
            res.append(os.path.join(root, name))
    print(res)
    return res
    
n=mywalk('mnt/c/you')
import os
dp='/mnt/c/you'
for (dir_path, dir_names, file_names) in os.walk(dp):
    print(file_names)
    
res
res=[]
import os
import re
res=[]
dp=r'/mnt/c/you/'
for root, dirs, files in os.walk(dp, topdown=False):
   for name in files:
      res.append(os.path.join(root, name))
      
res
dp
from walk import mywalk
# ex.exer()
a=mywalk('/mnt/c/you')
print(a)
a
a
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
print(a)
a
all
del a
all
from walk import mywalk
# ex.exer()
all=mywalk('/mnt/c/you')
allLong={a for a in all if len(a)>100}
sallLong=sorted(allLong, key=len)
sallLong=sorted(allLong, key=len)
sallLong[:3]
all
allLong
long
all
[a for a in all]
[a for a in all if len(a)>100]
all[1]
import sys
for x in sys.path:
    print(x)
    
for x in sys.path: print x
print(sys.path)
sys.path[0]='/mnt/c/projects/p3'
print(sys.path)
from export import mywalk
all=mywalk('/mnt/c/you')
all
ins("mywalk")
ins(mywalk)
all=mywalk('/mnt/c/you')
all
all=mywalk('/mnt/c/you/')
all
all=mywalk('.')
all
ins(mywalk)
import os
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
        return res
        
ff=mywalk('.')
ff
def mywalk(dp):
    res=[]
    for root, dirs, files in os.walk(dp, topdown=False):
        for name in files:
            res.append(os.path.join(root, name))
    return res
    
ff=mywalk('.')
ff
de ff
del ff
from export import mywalk
all=mywalk('/mnt/c/you')
all
from export import mywalk
ins(mywalk)
all=mywalk('/mnt/c/you')
all
import os
import export
dir(export)
import bs
import time
import requests
import export
import export
import requests
from export import mywalk
all=mywalk('/mnt/c/you')
all
[a for a in all if len(a)>100]
long=[a for a in all if len(a)>100]
sorted(long, key=len, reverse=True)
slong
with open('long.txt', 'w') as filehandle:
    for a in slong:
        print(a,file=filehandle)
        
from export import mywalk
all=mywalk('/mnt/c/you')
all
long=[a for a in all if len(a)>100]
long
sorted(long, key=len, reverse=True)
slong=(sorted(long, key=len, reverse=True))
slong[:3]
import os
import re
from export import mywalk
all=mywalk('/mnt/c/you/')
all
import sys
print(sys.path)
all=mywalk('/mnt/c/you/')
all
long=sorted([a for a in all and len(a)>100], key=len(a))
long=[a for a in all if len(a)>100]
long=sorted([a for a in all and len(a)>100], key=len)
long=sorted([a for a in all if len(a)>100], key=len)
long[:3]
long[:13]
long
long=sorted([a for a in all if len(a)>100], key=len, reverse=True)
long[:13]
import requests
type(Item)
type(item1)
dir("fred')
dir('fred')
print(dir('fred'))
class Item():
    def cprice(self, x, y):
        return x*y
item1=Item()
item1.name='Fred'
item1.price=200
item1.no=5
item1.cprice(item1.price, item1.no)
item3=Item()
item3=Item()
item1=Item('j')
xx=Item('noth')
dir(xx)
dir(xx.__init__)
xx
item1=Item('ethel', 20, 20)
class Item():
    def __init__(self, name, price, quantity) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20, 20)
del Item
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
        
item1=Item('ethel', 20)
item1
print(item1)
item1.name
item1.quantity
dir(item1)
item1.h='ricky'
zdir(item1)
item1.h
assert 1==1
assert 1==2
assert 1==2, 'no'
try:
    assert 1==0
except Exception:
    print('no')
    
try:
    assert 3/0
except Exception:
    print('no')
    
3/0
a=1
print(a.__dict__)
print(item1.__dict__)
print(Item.__dict__)
vars(item1)
vars(Item)
item2=Item('fred', 20, 20)
item2.price(1 ,2)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self, x, y):
        return self.x*self.y
        
hi()
item2.price(1 ,2)
item1=Item('ethel', 20)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
item1.cprice(30)
item1.cprice(30, 20)
item1.cprice(30)
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.x *self.y
item1=Item('ethel', 20)
vars(Item1)
var(Item1)
vars(item1)
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.cprice()
class Item():
    def __init__(self, name, price, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1.cprice()
item2=Item('fred', 20, 20)
item2.cprice()
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item('ethel', 20)
item1=Item('ethel', 't')
vars(item1)
item1=Item('fred', 't')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0) -> None:
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
item1=Item('ethel', 20)
item1=Item('ethel', 'j')
item1=Item('ethel', 'j', 'b')
item1=Item(2, 'j', 'b')
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
vars(item1)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 'j', 'b')
item1=Item(2, 2,3)
class Item():
    def __init__(self, name: str, price: float, quantity=0):
        pay=20
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
vars(item1)
item1=Item(2, 2,3)
vars(item1)
item1.pay
class Item():
    pay=20
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1=Item(2, 2,3)
vars(item1)
item1.pay
print(Item.__dict__)
print(item1.__dict__)
item1.pay
item1.pay=222
print(item1.__dict__)
item1=Item(2, 2,3)
print(item1.__dict__)
item1.pay
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
        
item1.pay
item1=Item(2, 2,3)
item1.pay
item1.pay=222
item1.pay
class Item():
    pay=220
    def __init__(self, name: str, price: float, quantity=0):
        assert price >=0, f'{price} greater than zero'
        self.name=name
        self.price=price
        self.quantity=quantity
    def cprice(self):
        return self.price *self.quantity
    def discount(self):
        self.price=self.price * self.pay
item1=Item('ethel', 20)
item1.cprice(30, 20)
item2=Item('fred', 20, 20)
item1.cprice()
vars(item1)
item1.discount()
vars(item1)
48304000*1000
cps(str(48304000*1000))
item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)
vars(item1)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
item3=Item(1,100,1)
item3
item3.__repr__
vars(item3)
item3=Item(1,100,-1)
for a in item3:
    print(a)
    
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
print(Item.all)
for a in Item.all:
    print(a)
    
for a in Item.all:
    print(a.name)
    
for a in Item.all:
    print(a.name, a.price)
    
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f'{self.name}'

    def xx(self) -> str:
        return f'{self.name}'

item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item1.xx
item2.xx
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}'"
        
item2.__repr__
print(Item.all)
class Item:
    all=[]
    def __init__(self, name: str, price: float, quantity=0):
        # Run validations to the received arguments
        assert price >= 0, f"Price {price} is not greater than or equal to zero!"
        assert quantity >= 0, f"Quantity {quantity} is not greater or equal to zero!"

        # Assign to self object
        self.name = name
        self.price = price
        self.quantity = quantity

        Item.all.append(self)

    def calculate_total_price(self):
        return self.price * self.quantity

    def __repr__(self) -> str:
        return f"Item('{self.name}', {self.price}"




item1 = Item("Phone", 100, 1)
item2 = Item("Laptop", 1000, 3)
item3 = Item("Cable", 10, 5)
item4 = Item("Mouse", 50, 5)
item5 = Item("Keyboard", 75, 5)

print(item1.calculate_total_price())
print(item2.calculate_total_price())
print(Item.all)
impor csv
import csv
sheet('files')
sheet('data')
l1=sheet('data')
l1['values']
for a in l1['values']:
    print(a)
    
with open('c.csv', 'w') as f
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
for a in l1['values']:
    print(a, file=f)
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(a, file=f)
        
with open('c.csv', 'w') as f:
    for a in l1['values']:
        print(str(a), file=f)
        
for a in l1['values']:
    print(str(a))
    
l2=l1['values']
l2
str(l2)
' '.join(l2)
' '.join(str(l2))
l2
with open(r'c.csv', 'w') as fp:
    for item in l2:
        # write each item on a new line
        fp.write("%s\n" % item)
    print('Done')
    
writer = csv.writer('b.csv')
mm=open('b.csv', 'w')
writer = csv.writer(mm)
for a in l1['values']:
    writer.writerow(a)
    
mm.close()
b = (n+1 for n in a)
a='timmy'
b = (n+1 for n in a)
b
next(b)
a=40
b = (n+1 for n in a)
class me():
    def __init__(self, name) -> None:
        self.name=name
        
class Me():
    def __init__(self, name) -> None:
        self.name=name
        
del me
me=Me('jim')
vars(me)
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
        
vars(me)
del me
me=Me('jim')
me.add('tom')
me=Me('jim')
me.add('tom')
vars(me)
me.add('dick')
vars(me)
me.add('harry')
vars(me)
lll='tom'
lll.type=Str
lll.type==Str
lll.type==str
type(lll)==str
class Me():
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
me.add('harry')
vars(me)
me.isString
Me.isString(2)
Me.isString('tom')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
        
m1=Me('tom')
m1
vars(m1)
my1.add('dick')
fc
import os
os.chdir('oop')
with open('b.csv','r') as f:
        b=f.readlines()
        
b
type(b)
b.split('\n')
len(b)
with open('b.csv','r') as f:
        b=f.read()
        
b
type(b)
b.split('\n')
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            b=f.readlines()
        for a in b:
            print(a)
            
m1=Me('tom')
m1.csv
m1.csv()
vars(m1)
with open('b.csv','r') as f:
        lol=[line.strip() for line in f]
        
lol
class Me():
    cv="i class propery"
    def __init__(self, name) -> None:
        self.people=[]
        self.name=name
    def add(self, name):
        self.people.append(name)
    @staticmethod
    def isString(ok):
        return type(ok)==str
    @classmethod
    def csv(cls):
        with open('b.csv','r') as f:
            lol=[line.strip() for line in f]
        for a in lol:
            print(a)
            
m1=Me('tom')
m1.csv()
p3='htc',2,2)
p3=('htc',2,2)
vars(p3)
p3
phone1
m1=Item('x',3,3)
vars(m1)
m1.calculate_total_price
m1.calculate_total_price()
Item.instantiate_from_csv()
Item.all
mx=Item('ipad',3,3)
Item.all
Item.instantiate_from_csv()
Item.all
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
with open('items.csv', 'r') as f:
        reader = csv.DictReader(f)
        items = list(reader)
        
items
import mywalk from export
from export import mywalk
all=mywalk('/mnt/c/you/')
len(all)
all[:10]
[a for a in all if len(a)>100]
sorted([a for a in all if len(a)>100])
long=sorted([a for a in all if len(a)>100])
long
with open('long', 'w') as f:
    f.write(long)
    
with open('long', 'w') as f:
    f.write('\n'.join(long))
    
class Person:
    def __init__(self, name) -> None:
        self.name=name
        
p1=Person('tom')
p1
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name
     
    def __repr__(self):
        return f"{self.__class__.__name__}('{self.name}', {self.price}, {self.quantity})"
        
p1=Person('tom')
print(p1)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.__class__.__name__}"
        
p1=Person('tom')
print(p1)
p1.__dict__
p2=Person('dick')
print(p2)
class Person:
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
print(p1)
class Student(Person):
    pass
    
s1=Student('sue')
print(s1)
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
        
s1.__dict__
s1=Student('sue')
s1.__dict__
class Person:
    species="human"
    def __init__(self, name) -> None:
        self.name=name

    def __repr__(self):
        return f"{self.name}"
p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
s1.__dict__
p1.__dict__
p1.species
s1.species
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
    pass

s1=Student("sue")
Person.all
s2=Student('mary')
Person.all
s1.species
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
s1.__dict__
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","graf")
s1=Student("sue" "graf")
class Person:
    species="human"
    all=[]
    def __init__(self, name) -> None:
        self.name=name
        Person.all.append(self)

    def __repr__(self):
        return f"{self.name}"

p1=Person('tom')
class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019

s1=Student("sue")
s1=Student("sue","non")
x = Student("Mike", "Olsen", 2019)
p1
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
y=Person("non")
y=Person("non", "nnn")
del Person
x
print(x)
x.printname()
try:
  print(x)
except:
  print("Something went wrong")
finally:
  print("The 'try except' is finished")
  
x
x.__dict__
print(x)
class Person:
  def __init__(self, fname, lname):
    all=[]
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()
Person.all
class Person:
  all=[]
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname
    Person.all.append(self) 

  def printname(self):
    print(self.firstname, self.lastname)

  def __repr__(self):
    return f"{self.firstname}"

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
    def __init__(self, fname, lname, dob):
      super().__init__(fname, lname)
      self.dob=dob
      
s1=Student("sue","non")
s1=Student("sue","non",1)
s1
s1.__dict__
p1=Person('tom')
p1=Person('tom', 'smith')
p1
s2=Student('mary')
class Student(Person):
    def __init__(self, fname, lname, dob=22):
      super().__init__(fname, lname)
      self.dob=dob
      
s2=Student('mary')
s2=Student('mary', 'sue')
s2.__dict__
import csv
from export import mywalk
all=mywalk('/mnt/c/you/')
print(phone1)
class Files(Item):
    def __init__(self) -> None:
        super().__init__()
        
f1=Files('a',2,3)
f1=Files('a')
f1=Files()
f1=Files(2,3)
phone1 = Files("jscPhonev10", 500, 5, 1)
class Files(Item):
    pass
    
phone1 = Files("jscPhonev10", 500, 5, 1)
phone1 = Files("jscPhonev10", 500, 5)
Phone.all
Item.all
phone1 = Phone("jscPhonev10", 500, 5, 1)
Phone.all
Item.all
phone1 = Item("jscPhonev10", 500, 5, 1)
phone1 = Item("jscPhonev10", 500, 5)
Item.all
Phone.all
phone1.ronly
phone1.ronly='jj'
print(Item.all)
phone1.quantity=333
Item.instantiate_from_csv()
os.listdir('.')
os.scandir('.')
di=[]
for a in os.scandir('.'):
    di.append(a)
    
di
di[1]
print(list(enumerate(di)))
type(di[1])
for a in os.walk('.'):
    print(a)
    
os.chdir('/mnt/c/projects/p3/gar')
import json
with open('jq.json', 'r') as f:
    cc=f.readlines()
    
cc
dd=json.loads(cc)
def scandirtree(path):
    for p in os.scandir(path):
        if p.is_dir(follow_symlinks=False):
            yield p
            yield from scandirtree(p)
        else:
            yield p
            
scandirtree('.')
for a in scandirtree('.'):
    print(a)
    
e4
for a in scandirtree('..'):
    print(a)
    
with open('jq.json' 'r') as f:
    f.read()
    
with open('jq.json', 'r') as f:
    f.read()
    
f
with open('jq.json', 'r') as f:
    print(f.read())
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
import json
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print(f.read())
    
rr
type(rr)
for a in rr:
    print(a)
    
[a for a in rr]
sorted([a for a in rr])
sorted([rr[a] for a in rr])
sorted(rr[a] for a in rr])
rr('name')
rr['name']
for a in rr:
    print(rr[a])
    
for a in rr:
    print(f'{a} {rr[a]}')
    
[f'{a}' for a in rr]
[f'{a} {rr[a]}' for a in rr]
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    [f'{a} {rr[a]}' for a in rr]
    
with open('jq.json', 'r') as f:
    rr=json.loads(f.read())
    print([f'{a} {rr[a]}' for a in rr])
    
match 'jim'
'i am'.split()
import json
with open('j.json','w') as f:
    print(json.loads(f))
    
#!/usr/bin/python3.10 
import json
with open('j.json','r') as f:
    print(json.loads(f))
    
kk=open('j.json','r')
type(kk)
for a in kk:
    print(a)
    
kk.readline()
kk.readlines()
os.chdir('/mnt/c/projects/p3/less')
kk=open('j.json','r')
kk.readlines()
kk.read()
kk.readlines()
kk=open('j.json','r')
type(kk)
ll=json.loads(kk)
ll=json.loads('j.json')
ll=json.loads('j.json')
with open('j.json','r') as f:
    print(json.loads(f))
    
with open('j.json','r') as f:
    print(json.load(f))
    
with open('j.json','r') as f:
    my=json.load(f)
    
my
[f'{a} {my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my]
[f'{a}--{my[a]}' for a in my if not a.startswith('i')]
[f'{a}--{my[a]}' for a in my if not a.startswith('p')]
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('p')])
sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])
with open('x','w') as f:
    f.write('\n'.join(sorted([f'{a}--{my[a]}' for a in my if not a.startswith('a')])))
    
d()
dir(In)
kk=dir(In)
type(kk)
print(kk)
import json
json.dumps(kk)
mm=json.dumps(kk)
mm
type(mm)
with open('xy','w') as f:
    f.write(mm)
    
mm
mm.split(',')
mm[1]
mm[:10]
mm[:40]
mm.split(',')
type(mm.split(','))
mm
dir(In)
type(dir(In))
[a for a in dir(In) if not a.startswith('__')]
aa=[a for a in dir(In) if not a.startswith('__')]
type(aa)
json.dumps(aa)
type(json.dumps(aa))
os.listdir('.')
json.load('j.json')
with open('j.json','r') as f:
    json.load(f)
    
with open('j.json','r') as f:
    ll=json.load(f)
    
ll
type(ll)
ll.items()
sorted(ll.items())
type(sorted(ll.items()))
sorted(ll.items())[:3]
type(sorted(ll.items(),key=x:x[1]))
type(sorted(ll.items(),key=lambda x:x[1]))
sorted(ll.items(),key=lambda x:x[1])
type(ll.items())
hi()
sorted(ll.items(), key=lambda x:x[1])

fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
fb = {'Eusebio': 120, 'Cruyff': 104, 'Pele': 150, 'Ronaldo': 132, 'Messi': 125}
sorted(fb.items(),key=lambda x:x[1])
ll
import json
with open('j.json','r') as f:
    my=json.load(f)
    
my
type(my)
print(json.dumps(my))
print(json.dumps(my),,indent=4)
print(json.dumps(my),indent=4)
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
my
print(json.dumps(my,indent=4))
print(json.dumps(my,indent=14))
print(json.dumps(my,sort_keys=True,indent=14))
print(json.dumps(my,sort_keys=True,indent=3))
2+3j
type(2+3j)
isinstance('jim',Str)
isinstance('jim',str)
isinstance('jim',float)
isinstance(2.0,float)
isinstance(2,float)
def encode_complex(object):
    # check using isinstance method
    if isinstance(object, complex):
        return [object.real, object.imag]
    # raised error if object is not complex
    raise TypeError(repr(object) + " is not JSON serialized")
    
encode_complex('jim')
repr('jim')
repr(2+3j)
repr(my)
my
type(my)
sorted(my)
sorted(my, key=len)
import operator
my
m1[1]
my[1]
type(my)
repr(my)
str(my)
my
my.items()
my.items()[1]
for a in my.items():
    print(a)
    
nnn=[]
for a in my.items():
    nnn.append(a)
    
nnn
nnn[3]
nnn[3][1]
nnn[3][0]
dir(operator)
operator.lt(2,3)
operator.lt(4,3)
my
my['login']
my['login'][1]
d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}
sort(d)
sorted(d)
d.keys()
d.values()
my
my['new']='jim'
my
my.update({"weight": 50, "height": 6})
my
my.update({3:30, 4:40})
my
my.update({3:50, 4:40})
my
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
my.update(dic3)
my
my[3]
my['company']='3m'
my
help(requests)
help
import requests
help(requests)
help(requests)
r
help(requests)
r.text()
r.text
json.loads(r.text)
jr=json.loads(r.text)
type(jr)
jr[:3]
jr[:2]
jr[:1]
jr[:1][1]
type(jr)
jr[0]
type(jr[0])
jr=jr[0]
jr.keys()
for a in jr:
    print(a)
    
for a in jr:
    print(jr[a])
    
for a in jr:
    print(f'{a} {jr[a]}')
    
len(jr)
for a in jr:
    print(f'{a} {jr[a]}')
    
for a in jr:
    print(f'{a} {jr[name]}')
    
jr[1]
cps(str(jr))
type(jr)
json.dumps(jr)
json.dumps(jr,indent=2)
print(json.dumps(jr,indent=2))
with open('git','r') as f:
    print(json.dumps(jr,indent=2)file=f)
with open('git','r') as f:
    print(json.dumps(jr,indent=2), file=f)
    
with open('git','w') as f:
    print(json.dumps(jr,indent=2), file=f)
    
r.text
json.dumps(r.text,indent=2)
json.dumps(r.text,indent=3)
json.loads(r.text)
jr=json.loads(r.text)
len(jr)
type(jr)
jr[2]
jr[3]
jr[3]['name']
for a in jr:
    print(a['name'])
    
jr[1].keys()
hi()
jr[1].keys()
d()
d()
Out
print(Out)
r.text
print(Out)
type(Out)
Out.keys()
Out['8']
Out[8]
for a in Out[8]:
    print(a)
    
Out[8].keys()
type(Out[8])
OUT
Out
jr=json.loads(r.text)
import json
jr=json.loads(r.text)
json.dumps(jr,indent=3)
for a in jr:
    print(a['name'])
    
jr.keys()
jr[0].keys()
[a for a jr[0].keys()]
[a for a in jr[0].keys()]
[a for a in jr[0].keys() if a.find('issu')]
[a for a in jr[0].keys() if a.find('issu')=-1]
'jim'.find('i')
'jim'.find('x')
[a for a in jr[0].keys() if a.find('issu')==-1]
[a for a in jr[0].keys() if a.find('a')==-1]
[a for a in jr[0].keys() if a.find('upd')==1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('p')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('last')>1]
[a for a in jr[0].keys() ]
print([a for a in jr[0].keys() ])
print([a for a in jr[0].keys() if a.find('has'>0 )])
hi()
[a for a in jr[0].keys() if a.find('up')>1]
[a for a in jr[0].keys() if a.find('upd')>1]
[a for a in jr[0].keys() if a.find('u')>1]
[a for a in jr[0].keys() if a.find('iss')>1]
[a for a in jr[0].keys() if a.find('up')>1]
print([a for a in jr[0].keys() ])
[a for a in jr[0].keys() if a.find('dat')>1]
[a for a in jr[0].keys() if a.find('dat')>0]
for a in jr:
    print(f"{a['name']}: {a['updated_at']}")
    
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    
ls=[]
for a in jr:
    ls.append(f"{a['name']}: \t {a['updated_at']}")
    
ls
type(ls)
print(ls)
ls=[]
for a in jr:
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls[2]
import re
re.split(r'\s+',ls[2])
ls=[]
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    ls.append(f"{a['name']}:  {a['updated_at']}")
    
ls
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))
    
ls
ls[1][1]
sorted(ls)
sorted(ls, key=lambda x:x[1])
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])r
ls=[]
import re
for a in jr:
    print(f"{a['name']}: \t {a['updated_at']}")
    part=f"{a['name']}:  {a['updated_at']}"
    ls.append(re.split(r'\s+',part))

lss=sorted(ls, key=lambda x:x[1])
lss
for a in jr:
    print(a)
    
for a in jr.keys():
    print(a)
    
j4
jr
type(jr)
for a in jr:
    print(a['name'])
    
jr[1]
[a['name'] for a in j]
[a['name'] for a in jr]
[m for m in jr.keys()]
[m for m in jr[1].keys()]
i in 'jim'
'i' in 'jim'
[m for m in jr[1].keys()]
[m for m in jr[1].keys() if 'at' in m]
lss
sorted(lss)
[m for m in jr[1].keys() if 'at' in m]
lss
lss
dic1={1:10, 2:20}
for a in dic1:
    print(a)
    
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
print(dic1)
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
dic4 = {}
for d in (dic1, dic2, dic3): dic4.update(d)
print(dic4)
for d in (dic1, dic2, dic3): print(d)
j={1,3,}
print(j)
j={1,3}
j
j={1:"A",3}
j={1:"A",3:"b"}
j
j={1:"A",3:None}
j
j={1:"A",3:}
j={1:"A",3}
j={1:"A",3:j}
j
j.update(j)
j
k.update(j)
j
3 in j
4 in j
os.listdir('.')
lss
a
lss
sorted(a)
[x for x in a]
[x a[x] for x in a]
[x, a[x] for x in a]
[(x, a[x]) for x in a]
[[x, a[x]] for x in a]
[[x, a[x]] for x in a]
a['new': 'xxx']
a['license']
a[:3]
a
list(a)
del a['license']
a
a
a['watchers']
a['watchers':2]
a.update({watchers:33})
a.update({'watchers':33})
a
print(a)
sorted(a)
def ex(x):
    if x in a:
        return 'nope'
        
ex('a')
a.update({'a':333})
ex('a')
ex('b')
def ex(x):
    if x in a:
        return 'yep' 
    else:
        return 'nope'
        
ex('b')
ex('a')
for g, h in a.items():
    print(g,h)
    
for g, h in a.items():
    print(h)
    
l={}
for a in range(20):
    l.update(a, a**a)
    
l
l.update('a','j')
l.update({'a','j'})
l
h
hi()
l.update({'a':'j'})
l
l={}
for a in range(20):
    l.update({a: a**a})
    
l
n=int(input("number"))
n=int(input("\nnumber: "))
n=int(input("\n\tnumber: "))
for a in range(20):
    print(a)
    
for a in range(1,20):
    print(a)
    
for a in range(1,16):
    print(a)
    
di={}
for a in range(1,16):
    di.update({a:a**2})
    
di
def mer(x, y):
    return x.update(y)
    
mer(ls, lss)
mer(di, l)
tt=mer(di, l)
print(tt)
di.update(di)
di
di.update(l)
di
l
for a in range(30,40):
    l.update({a: 'nnn'})
    
l
p={}
mer(di, l)
p
di
l
os.listdir('.')
[a for a in os.scandir('.')]
def subdirs(path):
    """Yield directory names not starting with '.' under given path."""
    for entry in os.scandir(path):
        if not entry.name.startswith('.') and entry.is_dir():
            yield entry.name
            
subdirs('.')
[a for a in subdirs('.')]
[a for a in subdirs('/mnt/c/you')]
[a for a in subdirs('/mnt/c/you/kb')]
jr
type(jr)
type(jr[0])
jr[0].keys()
jr[0].items()
[(a,b) for (a,b) in jr.items()]
[(a,b) for (a,b) in jr[0].items()]
[(a,b) for (a,b) in jr[0].items() del jr[0][a]]
[(a,b) for (a,b) in jr[0].items()]
with open('xx', 'w') as f:
    f.write( [(a,b) for (a,b) in jr[0].items()])
    
with open('xx', 'w') as f:
    f.write(str([(a,b) for (a,b) in jr[0].items()]))
    
[(a,b) for (a,b) in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()]
[[a,b] for [a,b] in jr[0].items()][0]
l2=[[a,b] for [a,b] in jr[0].items()]
l2
'xx'.joint(l2)
'xx'.join(l2)
l2
l2[:3]
'xx'.join(l2)
'xx'.join(l2[1])
' '.join(l2[1])
"->".join(jr)
"->".join(jr[0])
"->\n".join(jr[0])
l3={}
for a in range(2,20):
    l3.update({a:a*3})
    
l3
2+=3
c=0
for a,b in l3:
    c=c+b
    
l3
for a,b in l3:
    print(a,b)
    
c=0
for a,b in l3.items():
    c=c+b
    
c
l3
c=0
for a,b in l3.items():
    c=c+b
    
c
d+=c
l3
l3.items()
sum(l3.items())
l3.values()
sum(l3.values())
jr
jr
s=jr[0]
del s['watchers']
s
for a,b in s.items():
    print(a,b)
    
[a,b for a,b in s]
[(a,b) for a,b in s]
[(a,b) for a,b in s.items()]
[str((a,b)) for a,b in s.items()]
[str(a,b) for a,b in s.items()]
del a b
del b, a
l2
del l2
del c
'jim'[1]
'jim'[:1]
'jimmy'[:1]
'jimmy'[:3]
'jimmy'[:-1]
'jimmy'[::-1]
'jimmy'[::1]
'jimmy'[::4]
'jimmy'[::-1]
ji={}
for a in range(2,20):
    ji.update({a:a*3})
    
ji
del ji[2]
ji
for q,t in jim.items():
    print(q, t*30)
    
for q,t in ji.items():
    print(q, t*30)
    
[a for a in range(3,20)]
[a for a in range(3,20,3)]
dic1={1:10, 2:20}
dic2={3:30, 4:40}
dic3={5:50,6:60}
for d in (dic1, dic2, dic3): print(d)
for d in (dic1, dic2, dic3): print(d)
nn={}
for d in (dic1, dic2, dic3): nn.update(d)
nn
d1
dic1
[a for a in dic1]
[(a,b) for a, b in dic1]
[(a,b) for (a, b) in dic1]
dic1
[(a,b) for a, b in dic1.items()]
[(a,b) for a, b in dic1.items()][1]
mm=[(a,b) for a, b in dic1.items()].copy()
mm
d()
def d():
    global dd
    dd=sorted([a for a in globals() if not a.startswith('_')])
    return dd
    
d()
del mm
one=[x for x in range(10,15)]
two=[x for x in range(20,25)]
del dic1, dic2, dic3
one
two
zip(one,two)
list(zip(one,two))
two.append(33)
list(zip(one,two))
two
dict(zip(one,two))
from export import sheet
t=sheet('shakes')
t
type(t)
[a for a in t]
a['values']
t['values']
import random
randdom.random
random.random
random.random()
def rnd():
    return int(random.random*1000)
    
rnd()
def rnd():
    return int(random.random()*1000)
    
rnd()
rnd()
rnd()
rnd()
[rnd() for a in range(30)]
def rnd(a=1000):
    return int(random.random()*a)
    
rnd()
rnd(1000000)
rnd(1000000)
[rnd(100000) for a in range(10)]
max(1,3)
ll={}
for a in range(2):
    ll.update({a:rnd()})
     
ll
for a in range(20):
    ll.update({a:rnd()})
    
ll
max[b for b in ll.values()]
max([b for b in ll.values()])
ss={}
len(ss)
bool(ss)
bool(0)
bool(None)
bool(jr)
bool(ll)
bool(False)
bool(True)
bool(3)
bool(xxx)
xxx=None
bool(xxx)
xxx=Non
xxx='n'
bool(xxx)
from export import rnd
rnd()
[rnd() for a in range(30)]
uu={}
for a in range(20):
    uu.update({rnd():rnd()})
    
uu
sort(uu)
sorted(uu)
a
uu
for a in sorted(uu):
    print(a)
    
for a in sorted(uu):
    print(a, uu[a])
    
d1 = {'a': 100, 'b': 200, 'c':300}
for a,b in d1.items():
    print(a,b)
    
d2 = {'a': 300, 'b': 200, 'd':400}
d1['a']
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
[x for x in d1.keys()]
[x for x in d1.keys()]
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
one
two
dict(zip(one,two))
print(d1)
print(d2)
d1['c']
d1['d']
from export import rnd
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
[x for x in d2.keys()]
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
one
two
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
for a in one:
    if a in two:
        print(f'{a}')
        
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        print(c)
        
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
up.update(d2)
up
up.update(d1)
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
up={}
for a in one:
    up.update(d1)
    up.update(d2)
    if a in two:
        print(f'{a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(c)
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}
for a in one:
    up.update(d1)
    up.update(d2)
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 30, 'b': 2200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}

up.update(d1)
up.update(d2)
for a in one:
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
d1 = {'a': 100, 'b': 200, 'c':300}
d2 = {'a': 300, 'b': 200, 'd':400}
one=[x for x in d1.keys()]
two=[x for x in d2.keys()]
up={}

up.update(d1)
up.update(d2)
for a in one:
    if a in two:
        print(f'a is {a}')
        c=d1[a]+d2[a]
        up.update({a:c})
        print(f'c is {c}')
        
up
c
c
c
del c
from collections import counter
from collections import Counter
jj="nothing from nothing"
Counter(jj)
from export import sheet
t=sheet('shakes')
t['values']
str(t['values'])
t1=t['values']
t1
sum(ll,[])
sum(t1,[])
type(sum(t1,[]))
sum(t1,[])[1]
sum(t1,[])[2]
t3=sum(t1,[])
t3
''.join(t3)
' '.join(t3)
'\n'.join(t3)
print('\n'.join(t3))
counter('\n'.join(t3))
Counter('\n'.join(t3))
d1 = {'a': 100, 'b': 200, 'c':300}
Counter(d1)
Counter(d1)+Counter(d2)
d = dict(a=1, b=2, c=3)
d
data = open('input', 'r', encoding='utf-8').read().splitlines()
data
data = open('input', 'r', encoding='utf-8').read().splitlines()
data = open('input', 'r', encoding='utf-8').read().splitlines()
data
data[1]
sum(data,[])
type(data)
data
from export import sheet
ll=sheet('shakes')
type(ll)
[a for a in ll.items()]
[a for a in ll.keys()]
tu=tuple([a for a in ll.keys()])
tu
a,b,c = tu
a
b
c
ll[c]
ll
c
ll[c]
with open('xx', 'w').write(ll)
with open('xx', 'w').writelines(ll)
open('xx', 'w').writelines(ll)
open('xx', 'w').writelines(ll[c])
open('xx', 'w').writelines(str(ll[c]))
tx=(1,2,3)
tx+4
tx+(9,)
tx+(9)
tx+(9,20,2,)
tx=tx+(9,20,2,)
tx
tx[:3]
set(tx)
2 in tx
6 in tx
c
c
del c
tx
del tx[1]
tx[1]=90
tx
tx.remove(1)
tx[:3]
tx[3:]
ty=tx+tx
ty
ty.count(2)
tz=tuple(set(ty))
tz
ty[3:5]
typ
typ
typ
ty
print(enumerate(ty))
[a for a in enumerate(ty)]
ty
dict([a for a in enumerate(ty)])
tzz=dict([a for a in enumerate(ty)])
tzz.keys()
tzz.values()
from export import rnd
[rnd() for a in range(30)]
[rnd() for a in range(10)]
rn=[rnd() for a in range(10)]
tuple(rn)
[a for a in enumerate(rn)]
rn
ty
ty[::-1]
ty[::]
str(ty)
t=()
if t:
    print(t)
    
if t:
    print(t)
else    
    print('null')
if t:
    print(t)
else:
    print('null')
    
t=('')
if t:
    print(t)
else:
    print('null')
    
t=('a')
if t:
    print(t)
else:
    print('null')
    
type(t)
t=('a',)
type(t)
t=('')
if t
if t:print('yes')
t=1
if t:print('yes')
av=((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))
[a for a in av)
[a for a in av]
ty
sum(ty)
def aver(a):
    den=len(a)
    nu=sum(a)
    return nu/den
    
aver(1,20)
aver([1,2,3])
aver([rnd() for a in range(10)])
aver([rnd() for a in range(10)])
aver([rnd() for a in range(10)])
[aver(a) for a in av]
def gg(*nums):
    print(nums)
    
g(1,3,4)
gg(1,3,4)
def gg(*nums):
    print(type(nums))
    
gg(1,3,4)
ty
ll[c]
ll
x,y,z=[a for a in ll.keys()]
z
ll[z]
ll[z][:3]
ll[z][3:]
ll[z][:-3]
ll[z][-3:]
ll[z][:-3]
ll[z][1:-3]
sl=[a for a in range(8)]
sl
sl[-1]
sl[-1:3]
sl[-1:-3]
sl[-4]
sl[-4:2]
sl[4:2]
sl[:4]
sl[:-4]
sl[-4:]
ll[z][-3:]
ll[z][-6:]
