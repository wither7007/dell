.help
exit
exit;
quit;
.tables
.schema
use history;
select * from history
;
clear;
.quit
.show
/home/steff007/.ipython/profile_default/history.sqliteasdf
select * from output_history
.quite
show tables;
select * from coins;
SELECT name FROM sqlite_schema 
WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'
ORDER BY 1;
SELECT name FROM sqlite_master;
use coins;
select * from history;
.table
.schema history
.output x
select * from history limit 10;
!ls
CREATE TABLE mystuf 
                    (session integer, line integer, source text, source_raw text,
                    PRIMARY KEY (session, line));
select * from mystuf;
PRAGMA table_info(history);
CREATE TABLE IF NOT EXISTS linux ( distro TEXT NOT NULL);
INSERT INTO linux (distro) VALUES ('Slackware'), ('RHEL'), ('Fedora'),('Debian');
selet * from linux;
select * from linux;
.database
.fullschema
.read x;
.read s;
CREATE TABLE IF NOT EXISTS "albums"
(
    [AlbumId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Title] NVARCHAR(160)  NOT NULL,
    [ArtistId] INTEGER  NOT NULL,
    FOREIGN KEY ([ArtistId]) REFERENCES "artists" ([ArtistId])
                ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX [IFK_AlbumArtistId] ON "albums" ([ArtistId]);
.header on
.mode column
pragma table_info('albums');
.output y
SELECT sql 
FROM sqlite_schema 
WHERE name = 'albums';
select sqlite_version();
FROM sqlite_master
select * from sqlite_master
select * from sqlite_master;
.output z
SELECT * FROM sqlite_master;
.read first.sql
.read "first.sql"
SELECT source from history;
.open /home/steff007/.ipython/profile_default/history.sqlite
DELETE from history;
select * from output_history 
select * from output_history;
select * from sessions;
.exit
.schem
select * from polls_question;
SELECT * FROM polls_question ;
use polls_question 
select * from polls_question ;
select * from polls_choice ;
select * from next_member ;
CREATE TABLE IF NOT EXISTS "something" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "firstname" varchar(255) NOT NULL, "lastname" varchar(255) NOT NULL);
SELECT name FROM sqlite_schema
WHERE type='table'
ORDER BY name;
.schema next_book
.schema something
DROP something;
drop table something;
.schema next_book 
.schema pages_page
.schema catalog_mymodelname 
.schema catalog_bookinstance
SELECT 
    name
FROM 
    sqlite_schema
WHERE 
    type ='table' AND 
    name NOT LIKE 'sqlite_%';
SELECT name FROM sqlite_schema;
SELECT name FROM sqlite_master where name like 'cat%'
SELECT name FROM sqlite_master where name like 'cat%';
c
.
q
SELECT * FROM sqlite_master where name like 'cat%';
SELECT * FROM sqlite_master where name like 'cat%' and type='table';
SELECT name FROM sqlite_master where name like 'cat%' and type='table';
SELECT sql FROM sqlite_master where name like 'cat%' and type='table';
.schema sqlite_master
select name from sqlite_master order by name;
select name from sqlite_master where name like 'cat%' order by name;
.schema catalog_book
his
.output file
.output tables
.ouput
.output
.output ctable
SELECT * FROM sqlite_master where name like 'cat%;'
.schema sqlite_master;
.shell
SELECT * FROM sqlite_master where name like 'cat%' and type='table';SELECT * FROM sqlite_master where name like 'cat%;'
limit 5;
.read f
.shell nvim f
.output sh
select name from sqlite_master;
select name from sqlite_master where name like '%book%'
select name from sqlite_master where name like 'cat%book%'
select name from sqlite_master where name like 'cat%book%';
select name from sqlite_master where name like 'cat%book';
select * from catalog_book limit 1;
select sql from sqlite_master where name like 'cat%book';
.output catalog_book
INSERT INTO catalog_book (id, title, summary, isbn, author_id, catalog_author) values (2,'3','3','3','3','3');
cat catalog_book
INSERT INTO catalog_book (id, title, summary, isbn, author_id ) values (2,'3','3','3','3');
select * from catalog_book;
.headers ON
SELECT DISTINCT m.name || '.' || ii.name AS 'indexed-columns'
  FROM sqlite_schema AS m,
       pragma_index_list(m.name) AS il,
       pragma_index_info(il.name) AS ii
 WHERE m.type='table'
 ORDER BY 1;
select * from books;
INSERT INTO books (title) values  ("example.db)";
INSERT INTO books (title) values  ("example.db)"
INSERT INTO books (title) values  ("example.db");
INSERT INTO books (title) values  ("schema");
INSERT INTO books (title) values ('crime and punishment');
delete from books;
select * from books limit 2;
cls
clear

.schema albums
SELECT
  concat (first_name, ' ', last_name) AS "full_name"
FROM
  "user"
  concat (AlbumId, ' ', Title) AS "full_name"
  "albums"
SELECT 'SQLite ' || 'CONCAT';
    FirstName || ' ' || LastName AS FullName
    Employees
ORDER BY
    FullName;
.tables like '%c'
.tables like '%c%'
.columns
.column
.once h
PRAGMA table_info(catalog_bookinstance);
select * from catalog_bookinstance
.headers on
select * from catalog_book where title="Faust"
select * from catalog_book where book =1
.dump
.tables
.tables like '%cat%'
select * from catalog_book;
.tables like '%c%'
.tables like '%'
select sql from sqlite_schema where name like 'cat%book';
select sql from sqlite_schema where name like 'cat%book';
.schema catalog_book
pragma table_info('catalog_book');
SELECT SQLITE_VERSION()
;
.mode column
.headers on
select * from catalog_book
;
select * from catalog_book limit 1;
c
;
.tables
select * from cars limit 1
;
select * from cars;
pragma
;
PRAGMA table_info(catalog_book);
PRAGMA table_info(cars);
select * from catalog_book;
PRAGMA table_info(sql_schema);
PRAGMA table_info(sql_schemass);
select * from sql_schema;
select sql from sqlite_schema;
select sql from sqlite_schema;
PRAGMA table_info(sqlite_schema);
PRAGMA table_info(sqlite_schema);
select * from sqlite_schema limit 1;
select * from sqlite_schema where name like "c%"
;
select * from sqlite_schema where name like "c%";
select * from sqlite_schema where name like "c%" limit 2;
select * from sqlite_schema where name like "c%" and type like "%tab" limit 2;
select * from sqlite_schema where name like "c%" and type like "tab%" limit 2;
select * from sqlite_schema where name like "c%" and type like "tab%" limit 2;
.tables
PRAGMA table_info(
;
PRAGMA table_info('sqlite_schema');
select tbl_name from sqlite_schema;
select tbl_name from sqlite_schema;
select tbl_name from sqlite_schema where type='table';
insert into cars values(1,'non')
;
insert into cars values(1,'non','non;);
;
;
l;lkjj
aeasdfl;kqjwer
insert into cars values(1,'non','non');
select * from cars;
select * from catalog_book;
insert into catalog_book values( 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
insert into catalog_book values(33 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1)
;
insert into catalog_book values(33 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
insert into catalog_book values(33, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1)
;
select * from catalog_books;
select * from catalog_book;
insert into catalog_book values(33, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
select * from catalog_book;
insert into catalog_book values(1, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(122, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(1, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(122, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '1942', 1);
select * from catalog_book;
select * from catalog_book;
select * from catalog_book;
select * from sqlite_schema;
select sql from sqlite_schema;
select sql from sqlite_schema limit 3;
.headers on
select sql from sqlite_schema;
sq
;
.tables
select * from history;
c
;
.tables
select * from output_history;
select * from history;
SELECT source from history where source not like '%get%';
.tables
delete * from history;
delete history;
select count(*) from history;
select count(*) from history;
.tables
delete from history;
select count(*) from history;
SELECT source from history where source not like '%get%';
select * from history;
select * from history;
select * from downloads;
;
select * from download
;
PRAGMA table_info(downloads);
select target_path from download;
.table
select target_path from downloads;
select count(*) from downloads;
.tables
.tables
select * from history;
.tables
.tables
.tables
select * from auth_user;
select * from django_session;
.tables
.tables
exit
.q
.x
.tables
select * from polls_question ;
.tables
select * from polls_question;
.schema polls_question ;
.schema polls_question
select * from polls_question;
help
;
?
;
help;
.help
.output results.txt
.help
.headers on
.tables
select * from polls_question;
update polls_question 
set question_text ="q one"
where id=1;
select * from polls_question;
.tables
select * from django_migrations 
;
.tables
select * from polls_question;
--what
select * from django_migrations ;
select * from polls_question;
.headers on
select * from polls_question;
.headers on
.tables
select * from polls_question limit 1
;
select * from polls_question limit 1;
UPDATE polls_question
SET question_text = 'whats your favorite day' 
WHERE id = 1;
.tables
select * from polls_choice;
UPDATE polls_choice
set choice_text ="Sunday"
where id=1;
UPDATE polls_choice
set choice_text ="Friday"
where id=3;
UPDATE polls_choice
set choice_text ="Monday"
where id=2;
.tables
select * from polls_question;
select * from polls_question;
select * from polls_choice;
.headers on
select * from polls_choice;
.schema polls_choice;
.tables
.schema polls_choice
pragma table_info(polls_choice)
;
INSERT INTO polls_question VALUES (4, 'MY new',8,1);
INSERT INTO polls_question VALUES ('MY new',8,1);
pragma table_info(polls_choice)
;
INSERT INTO polls_question VALUES ("MY new",8,1);
INSERT INTO polls_question VALUES (?,"MY new",8,1);
select * from polls_choice;
INSERT INTO polls_question VALUES("MY new",8,1);
INSERT INTO polls_question VALUES("MY new",8,2);
INSERT INTO polls_question VALUES("MY new",8,0);
INSERT INTO polls_question VALUES("MY new",8);
INSERT INTO polls_question VALUES('a',8,0);
pragma table_info(polls_choice);
.exit
.tables
INSERT INTO polls_choice VALUES("MY new",8,1);
INSERT INTO polls_choice VALUES(,"MY new",8,1);
INSERT INTO polls_choice VALUES(?,"MY new",8,1);
.exit
select * from polls_choice;
.exit
.tables
.tables
select * from student'
;
;
l
.exit
la;sdlfjf
asdf;lsjadf
q
.tables
.headers on
select * from student;
https://www.youtube.com/watch?v=aDOAxJ2ARnU&list=RDaDOAxJ2ARnU&start_radio=1
;
SELECT sql FROM sqlite_master WHERE tbl_name =
;
.tables
.tables
SELECT sql FROM sqlite_master WHERE tbl_name =;
SELECT sql FROM sqlite_master WHERE tbl_name = 'polls_question';
SELECT sql FROM sqlite_master WHERE tbl_name = 'polls_question';
.tables
drop table student;
.tables
CREATE TABLE IF NOT EXISTS student( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, surname TEXT NOT NULL);
SELECT sql FROM sqlite_master WHERE tbl_name = 'student';
INSERT INTO student VALUES (1, 'John', 'Smith');
INSERT INTO student VALUES (1, 'John', 'Smith');
INSERT INTO student VALUES (, 'John', 'Smith');
INSERT INTO student VALUES ('', 'John', 'Smith');
CREATE TABLE people (
   first_name TEXT NOT NULL,
   last_name TEXT NOT NULL
);
.tabls
.tables
INSERT INTO people (first_name, last_name)
VALUES('John', 'Doe');
select * from people;
select rowid from people;
DROP TABLE people;
CREATE TABLE people (
   person_id INTEGER PRIMARY KEY,
   first_name TEXT NOT NULL,
   last_name TEXT NOT NULL
);
INSERT INTO people (first_name,last_name)
VALUES('William','Gate');
select * from people;
INSERT INTO people (person_id,first_name,last_name)
VALUES(9223372036854775807,'Johnathan','Smith');
select * from people;
INSERT INTO people (first_name,last_name)
VALUES('William','Gate');
select * from people;
INSERT INTO people (first_name,last_name)
VALUES('William','Gate');
select * from people;
delete * from people;
delete from people;
select * from people;
.tables
select count(*) from history;
select count(*) from history;
.tabls
.tables
BEGIN;
--
-- Create model New
--
CREATE TABLE "polls_xxx" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL, "question_id" bigint NOT NULL REFERENCES "polls_question" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "polls_new_question_id_59dcac27" ON "polls_new" ("question_id");
COMMIT;
.tabls
.tables
.tables
select * from people;
.schema people
.tables
.schema song
create_query = '''CREATE TABLE IF NOT EXISTS song(
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL);
  '''
cursor.execute(create_query)
print("Table created!")
;
.schema song
INSERT INTO song VALUES ('c:\you\evans\A_House_Is_Not_A_Home.mp3');
INSERT INTO song VALUES (1,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
select * from song
;
INSERT INTO song VALUES ('c:\you\evans\A_House_Is_Not_A_Home.mp3');
SELECT sql FROM sqlite_master;
SELECT  FROM sqlite_master;
SELECT * FROM sqlite_master;
.columns on
.headers on
SELECT * FROM sqlite_master;
INSERT INTO song VALUES (2,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
SELECT * FROM sqlite_master;
INSERT INTO song ('c:\you\evans\A_House_Is_Not_A_Home.mp3');
.output old
.dump song
.tables
drop table song;
.read old
.tables
.schema son
.schema song
INSERT INTO song VALUES ('c:\you\evans\A_House_Is_Not_A_Home.mp3');
INSERT INTO song VALUES (,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
INSERT INTO song VALUES (?,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
select * from song;
INSERT INTO song VALUES (?,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
INSERT INTO song VALUES (?,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
select * from song;
.read new
select * from song;
.read tuff
select * from song;
.output old
.dump song
.table
.read ../old
.table
select * from song;
.table
.schema polls_question 
.tables
.tables
.tables
select * from polls_question ;
.schema polls_question ;
.schema polls_question 
CREATE TABLE song2 ("ques", varchar(200));
CREATE TABLE song2 ("ques" varchar(200));
.headers on
select * from songs limit 2;
.tables
select * from song limit 2;
select * from song2 limit 2;
.schema song2
insert into song2 (ques) select name from song;
select * from song2;
select * from song2;
select * from song2 limit 2;
.tables
c
;
INSERT INTO polls_question VALUES("MY new",8);
INSERT INTO polls_question VALUES("MY new",8,8);
INSERT INTO polls_question VALUES("MY new",8,'11/12/2023');
.schema polls_question 
INSERT INTO polls_question VALUES(?,'nothing',?);
select date()
;
select date();
INSERT INTO polls_question VALUES(?,'nothing','2023-04-05');
select * from polls_question ;
select '2023-04-05' as date from polls_question ;
select '2023-04-05' as date from song ;
.schema song
select '2023-04-05' as date name from song ;
select '2023-04-05' as date, name from song ;
select name, '2023-04-05' as date from song ;
select '?' as one, name, '2023-04-05' as date from song ;
select '?' as one, name, '2023-04-05' as date from song ;
.tables
.tables
.mode MODE ?OPTIONS?
?
;
help
?
.help
;
.help
.help mode
.mode insert
.table
.mode insert song
select * from song;
select * from song;
SELECT name FROM sqlite_schema
WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'
ORDER BY 1
;
INSERT INTO song VALUES('auth_group');
INSERT INTO song VALUES('auth_group_permissions');
INSERT INTO song VALUES('auth_permission');
INSERT INTO song VALUES('auth_user');
INSERT INTO song VALUES('auth_user_groups');
INSERT INTO song VALUES('auth_user_user_permissions');
INSERT INTO song VALUES('django_admin_log');
INSERT INTO song VALUES('django_content_type');
INSERT INTO song VALUES('django_migrations');
INSERT INTO song VALUES('django_session');
INSERT INTO song VALUES('polls_choice');
INSERT INTO song VALUES('polls_new');
INSERT INTO song VALUES('polls_question');
INSERT INTO song VALUES('polls_xxx');
INSERT INTO song VALUES('song');
INSERT INTO song VALUES('song2');
select * from song;
.tables
select * from polls_question ;
select * from polls_question ;
INSERT INTO polls_question VALUES(?,'c:\you\evans\A_House_Is_Not_A_Home.mp3','2023-04-05');
select * from polls_question ;
.mode list
select * from polls_question ;
SELECT IIF(1 < 2, 'Yes', 'No' ) result;
CREATE TABLE people (
   person_id INTEGER PRIMARY KEY,
   first_name TEXT NOT NULL,
   last_name TEXT NOT NULL
);
INSERT INTO people (person_id,first_name,last_name)
VALUES(9223372036854775807,'Johnathan','Smith');
SELECT * FROM people;
INSERT INTO people (person_id,first_name,last_name)
VALUES(9223372036854775807,'Johnathan','Smith');
INSERT INTO people (first_name,last_name)
VALUES('William','Gate');
Code language: SQL (Structured Query Language) (sql)
;
select * from people;
INSERT INTO people (first_name,last_name)
VALUES('William','Gate');
Code language: SQL (Structured Query Language) (sql)
Try It
;
INSERT INTO people (first_name,last_name)
VALUES('William','Gate');
.schema people;
.tables
CREATE TABLE t1(c text);
.schema t1
INSERT INTO t1(c) VALUES('A');
INSERT INTO t1(c) values('B');
INSERT INTO t1(c) values('C');
INSERT INTO t1(c) values('D');
.schema t1
SELECT rowid, c FROM t1;
delete from t1;
SELECT rowid, c FROM t1;
CREATE TABLE none (one TEXT);
.tables
CREATE TABLE docs (t1 TEXT);
.tables
.schema docs
ALTER TABLE docs ADD COLUMN COLNew TEXT;
.schema docs
PRAGMA TABLE docs
;
PRAGMA TABLE_INFO docs;
PRAGMA TABLE_INFO 
;
PRAGMA busy_timeout;
PRAGMA database_list;
.help
.databases
.tables
.talbes
.tables
.tables
.tables
select * from song;
.table
select * from polls_question ;
.tables
.tables
.schema song3
INSERT INTO song3 (name) values "new";
INSERT INTO song3 (name) values ("new")
;
select * from song3;
INSERT INTO song3 (name) values ("new")
;
select * from song3;
select * from song3;
select * from song3;
select * from song3;
.tables
.schema
.schema pol*
.schema pol*
.output schema.txt
.schema pol*
.output
.tables
DROP TABLE polls_xxx ;
DROP TABLE polls_new;
.tables
.tables
DROP TABLE SONG;
.table
drop table song2;
.table
.tables
.tables
.output schema
SELECT tbl_name, sql FROM sqlite_master where name like 'poll%' and type='table';
.tables
select * from song3 ;
.tables
select * from song3 ;
select * from song3 ;
select * from song3 ;
exit
.tables
select * from visits
;
c
;
.output schema
.schema
SELECT
  datetime(visit_time / 1000000 + (strftime('%s', '1601-01-01')), 'unixepoch', 'localtime')
FROM visits
ORDER BY visit_time DESC
LIMIT 10;
.schema visits
.headers on
select * from visits limit 1;
select url from visits;
select count(*) url from visits;
SELECT tbl_name FROM sqlite_master;
SELECT distinct tbl_name FROM sqlite_master;
.output listtables.txt
SELECT distinct tbl_name FROM sqlite_master;
.tables
.talbes
.tables
.tables
.tables
x
.tables
select * from history:
;
select * from history;
exit
.tables
select * from history;
.tables
.tables
.tables
.exit
.tables
.tables
.tables
select * from Main;
.set headers on
.help
select * from Main limit 5;
.headers on
select * from Main limit 5;
select lDate from Main limit 5;
select lDate, mText from Main limit 5;
.tables
select count(*) from Main;
delete from Main;
.tables
delete from Main;
select * from Main;
select * from Main;
select * from Main;
select * from Main;
select * from Main;
select * from Main;
select * from Main;
.tables
.tables
gst
.tables
.tables
.tables
.tables
.tables
.tables
.tables
.tables
delete from polls_question 
;
select * from polls_question ;
.tables
select * from new_developers ;
.tables
select * from polls_question ;
select * from polls_question ;
delete polls_question ;
delete from polls_question ;
select * from polls_question ;
select * from polls_question ;
select * from polls_question ;
select * from polls_question ;
.tables
select * from polls_choice;
.schema polls_choice
select * from auth_user;
select * from auth_user;
.schema
select * from catalog_author;
delete from catalog_author;
select * from catalog_author;
delete from catalog_author;
INSERT INTO catalog_book (id,title,summary,isbn, author_id, catalog_author)
VALUES(9223372036854775807,'Johnathan','Smith', '44','44', '44');
INSERT INTO catalog_book (id,title,summary,isbn, author_id )
VALUES(9223372036854775807,'Johnathan','Smith', '44','44', '44');
INSERT INTO catalog_book (id,title,summary,isbn, author_id )
VALUES(9223372036854775807,'Johnathan','Smith', '44','44');
select * from catalog_book;
.schema catalog_language 
select * from catalog_book;
delete from catalog_book;
select * from catalog_book;
SELECT sql FROM sqlite_master;
SELECT sql FROM sqlite_master limit=2;
SELECT sql FROM sqlite_master limit 2;
SELECT sql FROM sqlite_master limit 2;
SELECT sql FROM sqlite_master where sql like '%catalog%' limit 2;
SELECT sql FROM sqlite_master where sql like '%catalog%' and sql like '%table%';
SELECT sql FROM sqlite_master where sql like '%catalog%' and sql like '%table%';
SELECT 
    name
FROM 
    sqlite_schema
WHERE 
    type ='table' AND 
    name NOT LIKE 'sqlite_%';
SELECT 
    name
FROM 
    sqlite_schema
WHERE 
    type ='table' AND 
    name  LIKE 'catalog%';
select * from catalog_bookinstance;
help
;
?
;
.help
.show
 SELECT name FROM sqlite_schema WHERE type ='table' AND name  LIKE 'catalog%';
.mode
.help
.ouput
.shell
.output out
 SELECT name FROM sqlite_schema WHERE type ='table' AND name  LIKE 'catalog%';
.schema
select * from articles_article ;
SELECT sql FROM sqlite_master where sql like '%artic%' and sql like '%table%';
.tables
.tables
select * from tasks_task ;
.schema tasks_task 
CREATE TABLE employees (
employee_id serial PRIMARY KEY,
full_name VARCHAR NOT NULL,
manager_id INT
);
.tables
INSERT INTO employees (
employee_id,
full_name,
manager_id
)
VALUES
(1, 'Michael North', NULL),
(2, 'Megan Berry', 1),
(3, 'Sarah Berry', 1),
(4, 'Zoe Black', 1),
(5, 'Tim James', 1),
(6, 'Bella Tucker', 2),
(7, 'Ryan Metcalfe', 2),
(8, 'Max Mills', 2),
(9, 'Benjamin Glover', 2),
(10, 'Carolyn Henderson', 3),
(11, 'Nicola Kelly', 3),
(12, 'Alexandra Climo', 3),
(13, 'Dominic King', 3),
(14, 'Leonard Gray', 4),
(15, 'Eric Rampling', 4),
(16, 'Piers Paige', 7),
(17, 'Ryan Henderson', 7),
(18, 'Frank Tucker', 8),
(19, 'Nathan Ferguson', 8),
(20, 'Kevin Rampling', 8);
.tables
select * from employes;
select * from employees;
.schema employees;
.schema employees
tables;
.tables
.tables
select * from tutorials_tutorial ;
.tables
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
.tables
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
mem
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
delete * from tutorials_tutorial ;
delete  from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
delete from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
delete from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
delete from tutorials_tutorial ;
.schema tutorials_tutorial 
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
.tables
select * from tutorials_tutorial ;
.tables
delete from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
delete from tutorials_tutorial ;
CREATE TABLE "react" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "text" varchar(70) NOT NULL, "day" varchar(200) NOT NULL, "reminder" bool NOT NULL);
.tables
INSERT INTO react(id, text, day)
VALUES (1, 'MANUAL' 'JAN-1')
INSERT INTO react(id, text, day)
VALUES (1, 'MANUAL' 'JAN-1')
;
INSERT INTO react(id, text, day)
VALUES (1, 'MANUAL', 'JAN-1');
INSERT INTO react(id, text, day)
VALUES (1, 'MANUAL', 'JAN-1', 'false');
INSERT INTO react(id, text, day, reminder)
VALUES (, 'MANUAL', 'JAN-1', 'false');
INSERT INTO react(id, text, day, reminder)
VALUES ('1', 'MANUAL', 'JAN-1', 'false');
.tables
select * from react;
.schema tutorials_tutorial 
.tables
.schema tutorials_tutorial 
.schema tutorials_tutorial 
INSERT INT;
INSERT INTO react(id, text, day, reminder)
VALUES ('1', 'MANUAL', 'JAN-1', 'false');
.tables
INSERT INTO tutorials_tutorial(id, text, day, reminder)
VALUES ('1', 'MANUAL', 'JAN-1', 'false');
.schema tutorials_tutorial 
select * from tutorials_tutorial ;
.schema tutorials_tutorial 
select * from tutorials_tutorial ;
.schema tutorials_tutorial 
.tables
drop table react;
.tables
.tables
from sqlalchemy import create_engine,text
file=r'/mnt/c/projects/alchemy/sample.db'
db_uri = f"sqlite:///{file}"
# db_uri='sqlite:////mnt/c/projects/alchemy/sample.db'
engine=create_engine(db_uri)
with engine.connect() as connection:
    result=connection.execute(text('select "hello"'))
    print(result.all());;;;;
SELECT users.id AS users_id, users.first_name AS users_first_name, users.last_name AS users_last_name, users.email AS users_email, users.created_at AS users_created_at, users.updated_at AS users_updated_at
FROM users
 LIMIT ? OFFSET ?;
.tables
SELECT users.id AS users_id, users.first_name AS users_first_name, users.last_name AS users_last_name, users.email AS users_email, users.created_at AS users_created_at, users.updated_at AS users_updated_at
FROM users
 LIMIT ? OFFSET ?;
SELECT users.id AS users_id, users.first_name AS users_first_name, users.last_name AS users_last_name, users.email AS users_email, users.created_at AS users_created_at, users.updated_at AS users_updated_at
FROM users;
SELECT count(*) AS count_1
FROM (SELECT users.id AS users_id, users.first_name AS users_first_name, users.last_name AS users_last_name, users.email AS users_email, users.created_at AS users_created_at, users.updated_at AS users_updated_at
FROM users) AS anon_1;
select * from users;
.tables
select * from preferences;
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
delete from tutorials_tutorial where id=5
;
select * from tutorials_tutorial ;
update tutorials_tutorial set description="new stuf";
select * from tutorials_tutorial ;
select * from tutorials_tutorial ;
update tutorials_tutorial set description="Satuday";
update tutorials_tutorial set description="Thursday";
.tables
.tables
.tables
.tables
.schema user
