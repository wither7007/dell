.help
exit
exit;
quit;
.tables
.schema
use history;
select * from history
;
clear;
.quit
.show
/home/steff007/.ipython/profile_default/history.sqliteasdf
select * from output_history
.quite
show tables;
select * from coins;
SELECT name FROM sqlite_schema 
WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'
ORDER BY 1;
SELECT name FROM sqlite_master;
use coins;
select * from history;
.table
.schema history
.output x
select * from history limit 10;
!ls
CREATE TABLE mystuf 
                    (session integer, line integer, source text, source_raw text,
                    PRIMARY KEY (session, line));
select * from mystuf;
PRAGMA table_info(history);
CREATE TABLE IF NOT EXISTS linux ( distro TEXT NOT NULL);
INSERT INTO linux (distro) VALUES ('Slackware'), ('RHEL'), ('Fedora'),('Debian');
selet * from linux;
select * from linux;
.database
.fullschema
.read x;
.read s;
CREATE TABLE IF NOT EXISTS "albums"
(
    [AlbumId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Title] NVARCHAR(160)  NOT NULL,
    [ArtistId] INTEGER  NOT NULL,
    FOREIGN KEY ([ArtistId]) REFERENCES "artists" ([ArtistId])
                ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX [IFK_AlbumArtistId] ON "albums" ([ArtistId]);
.header on
.mode column
pragma table_info('albums');
.output y
SELECT sql 
FROM sqlite_schema 
WHERE name = 'albums';
select sqlite_version();
FROM sqlite_master
select * from sqlite_master
select * from sqlite_master;
.output z
SELECT * FROM sqlite_master;
.read first.sql
.read "first.sql"
SELECT source from history;
.open /home/steff007/.ipython/profile_default/history.sqlite
SELECT source from history;
DELETE from history;
.quit
SELECT source from history;
.help
.tables
select * from output_history 
;
select * from output_history;
select * from sessions;
.quit
