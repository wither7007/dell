.help
exit
exit;
quit;
.tables
.schema
use history;
select * from history
;
clear;
.quit
.show
/home/steff007/.ipython/profile_default/history.sqliteasdf
select * from output_history
.quite
show tables;
select * from coins;
SELECT name FROM sqlite_schema 
WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'
ORDER BY 1;
SELECT name FROM sqlite_master;
use coins;
select * from history;
.table
.schema history
.output x
select * from history limit 10;
!ls
CREATE TABLE mystuf 
                    (session integer, line integer, source text, source_raw text,
                    PRIMARY KEY (session, line));
select * from mystuf;
PRAGMA table_info(history);
CREATE TABLE IF NOT EXISTS linux ( distro TEXT NOT NULL);
INSERT INTO linux (distro) VALUES ('Slackware'), ('RHEL'), ('Fedora'),('Debian');
selet * from linux;
select * from linux;
.database
.fullschema
.read x;
.read s;
CREATE TABLE IF NOT EXISTS "albums"
(
    [AlbumId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Title] NVARCHAR(160)  NOT NULL,
    [ArtistId] INTEGER  NOT NULL,
    FOREIGN KEY ([ArtistId]) REFERENCES "artists" ([ArtistId])
                ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX [IFK_AlbumArtistId] ON "albums" ([ArtistId]);
.header on
.mode column
pragma table_info('albums');
.output y
SELECT sql 
FROM sqlite_schema 
WHERE name = 'albums';
select sqlite_version();
FROM sqlite_master
select * from sqlite_master
select * from sqlite_master;
.output z
SELECT * FROM sqlite_master;
.read first.sql
.read "first.sql"
SELECT source from history;
.open /home/steff007/.ipython/profile_default/history.sqlite
DELETE from history;
select * from output_history 
select * from output_history;
select * from sessions;
.exit
.schem
select * from polls_question;
SELECT * FROM polls_question ;
use polls_question 
select * from polls_question ;
select * from polls_choice ;
select * from next_member ;
CREATE TABLE IF NOT EXISTS "something" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "firstname" varchar(255) NOT NULL, "lastname" varchar(255) NOT NULL);
SELECT name FROM sqlite_schema
WHERE type='table'
ORDER BY name;
.schema next_book
.schema something
DROP something;
drop table something;
.schema next_book 
.schema pages_page
.schema catalog_mymodelname 
.schema catalog_bookinstance
SELECT 
    name
FROM 
    sqlite_schema
WHERE 
    type ='table' AND 
    name NOT LIKE 'sqlite_%';
SELECT name FROM sqlite_schema;
SELECT name FROM sqlite_master where name like 'cat%'
SELECT name FROM sqlite_master where name like 'cat%';
c
.
q
SELECT * FROM sqlite_master where name like 'cat%';
SELECT * FROM sqlite_master where name like 'cat%' and type='table';
SELECT name FROM sqlite_master where name like 'cat%' and type='table';
SELECT sql FROM sqlite_master where name like 'cat%' and type='table';
.schema sqlite_master
select name from sqlite_master order by name;
select name from sqlite_master where name like 'cat%' order by name;
.schema catalog_book
his
.output file
.output tables
.ouput
.output
.output ctable
SELECT * FROM sqlite_master where name like 'cat%;'
.schema sqlite_master;
.shell
SELECT * FROM sqlite_master where name like 'cat%' and type='table';SELECT * FROM sqlite_master where name like 'cat%;'
limit 5;
.read f
.shell nvim f
.output sh
select name from sqlite_master;
select name from sqlite_master where name like '%book%'
select name from sqlite_master where name like 'cat%book%'
select name from sqlite_master where name like 'cat%book%';
select name from sqlite_master where name like 'cat%book';
select * from catalog_book limit 1;
select sql from sqlite_master where name like 'cat%book';
.output catalog_book
INSERT INTO catalog_book (id, title, summary, isbn, author_id, catalog_author) values (2,'3','3','3','3','3');
cat catalog_book
INSERT INTO catalog_book (id, title, summary, isbn, author_id ) values (2,'3','3','3','3');
select * from catalog_book;
.headers ON
SELECT DISTINCT m.name || '.' || ii.name AS 'indexed-columns'
  FROM sqlite_schema AS m,
       pragma_index_list(m.name) AS il,
       pragma_index_info(il.name) AS ii
 WHERE m.type='table'
 ORDER BY 1;
select * from books;
INSERT INTO books (title) values  ("example.db)";
INSERT INTO books (title) values  ("example.db)"
INSERT INTO books (title) values  ("example.db");
INSERT INTO books (title) values  ("schema");
INSERT INTO books (title) values ('crime and punishment');
delete from books;
select * from books limit 2;
cls
clear

.schema albums
SELECT
  concat (first_name, ' ', last_name) AS "full_name"
FROM
  "user"
  concat (AlbumId, ' ', Title) AS "full_name"
  "albums"
SELECT 'SQLite ' || 'CONCAT';
    FirstName || ' ' || LastName AS FullName
    Employees
ORDER BY
    FullName;
.tables like '%c'
.tables like '%c%'
.columns
.column
.once h
PRAGMA table_info(catalog_bookinstance);
select * from catalog_bookinstance
.headers on
select * from catalog_book where title="Faust"
select * from catalog_book where book =1
.dump
.tables
.tables like '%cat%'
select * from catalog_book;
.tables like '%c%'
.tables like '%'
select sql from sqlite_schema where name like 'cat%book';
select sql from sqlite_schema where name like 'cat%book';
.schema catalog_book
pragma table_info('catalog_book');
SELECT SQLITE_VERSION()
;
.mode column
.headers on
select * from catalog_book
;
select * from catalog_book limit 1;
c
;
.tables
select * from cars limit 1
;
select * from cars;
pragma
;
PRAGMA table_info(catalog_book);
PRAGMA table_info(cars);
select * from catalog_book;
PRAGMA table_info(sql_schema);
PRAGMA table_info(sql_schemass);
select * from sql_schema;
select sql from sqlite_schema;
select sql from sqlite_schema;
PRAGMA table_info(sqlite_schema);
PRAGMA table_info(sqlite_schema);
select * from sqlite_schema limit 1;
select * from sqlite_schema where name like "c%"
;
select * from sqlite_schema where name like "c%";
select * from sqlite_schema where name like "c%" limit 2;
select * from sqlite_schema where name like "c%" and type like "%tab" limit 2;
select * from sqlite_schema where name like "c%" and type like "tab%" limit 2;
select * from sqlite_schema where name like "c%" and type like "tab%" limit 2;
.tables
PRAGMA table_info(
;
PRAGMA table_info('sqlite_schema');
select tbl_name from sqlite_schema;
select tbl_name from sqlite_schema;
select tbl_name from sqlite_schema where type='table';
insert into cars values(1,'non')
;
insert into cars values(1,'non','non;);
;
;
l;lkjj
aeasdfl;kqjwer
insert into cars values(1,'non','non');
select * from cars;
select * from catalog_book;
insert into catalog_book values( 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
insert into catalog_book values(33 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1)
;
insert into catalog_book values(33 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
insert into catalog_book values(33, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1)
;
select * from catalog_books;
select * from catalog_book;
insert into catalog_book values(33, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
select * from catalog_book;
insert into catalog_book values(1, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(122, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(1, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(122, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '1942', 1);
select * from catalog_book;
select * from catalog_book;
select * from catalog_book;
select * from sqlite_schema;
select sql from sqlite_schema;
select sql from sqlite_schema limit 3;
.headers on
select sql from sqlite_schema;
sq
;
.tables
select * from history;
c
;
.tables
select * from output_history;
select * from history;
SELECT source from history where source not like '%get%';
.tables
delete * from history;
delete history;
select count(*) from history;
select count(*) from history;
.tables
delete from history;
select count(*) from history;
SELECT source from history where source not like '%get%';
select * from history;
select * from history;
select * from downloads;
;
select * from download
;
PRAGMA table_info(downloads);
select target_path from download;
.table
select target_path from downloads;
select count(*) from downloads;
.tables
