.help
exit
exit;
quit;
.tables
.schema
use history;
select * from history
;
clear;
.quit
.show
/home/steff007/.ipython/profile_default/history.sqliteasdf
select * from output_history
.quite
show tables;
select * from coins;
SELECT name FROM sqlite_schema 
WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'
ORDER BY 1;
SELECT name FROM sqlite_master;
use coins;
select * from history;
.table
.schema history
.output x
select * from history limit 10;
!ls
CREATE TABLE mystuf 
                    (session integer, line integer, source text, source_raw text,
                    PRIMARY KEY (session, line));
select * from mystuf;
PRAGMA table_info(history);
CREATE TABLE IF NOT EXISTS linux ( distro TEXT NOT NULL);
INSERT INTO linux (distro) VALUES ('Slackware'), ('RHEL'), ('Fedora'),('Debian');
selet * from linux;
select * from linux;
.database
.fullschema
.read x;
.read s;
CREATE TABLE IF NOT EXISTS "albums"
(
    [AlbumId] INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    [Title] NVARCHAR(160)  NOT NULL,
    [ArtistId] INTEGER  NOT NULL,
    FOREIGN KEY ([ArtistId]) REFERENCES "artists" ([ArtistId])
                ON DELETE NO ACTION ON UPDATE NO ACTION
);
CREATE INDEX [IFK_AlbumArtistId] ON "albums" ([ArtistId]);
.header on
.mode column
pragma table_info('albums');
.output y
SELECT sql 
FROM sqlite_schema 
WHERE name = 'albums';
select sqlite_version();
FROM sqlite_master
select * from sqlite_master
select * from sqlite_master;
.output z
SELECT * FROM sqlite_master;
.read first.sql
.read "first.sql"
SELECT source from history;
.open /home/steff007/.ipython/profile_default/history.sqlite
DELETE from history;
select * from output_history 
select * from output_history;
select * from sessions;
.exit
.schem
select * from polls_question;
SELECT * FROM polls_question ;
use polls_question 
select * from polls_question ;
select * from polls_choice ;
select * from next_member ;
CREATE TABLE IF NOT EXISTS "something" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "firstname" varchar(255) NOT NULL, "lastname" varchar(255) NOT NULL);
SELECT name FROM sqlite_schema
WHERE type='table'
ORDER BY name;
.schema next_book
.schema something
DROP something;
drop table something;
.schema next_book 
.schema pages_page
.schema catalog_mymodelname 
.schema catalog_bookinstance
SELECT 
    name
FROM 
    sqlite_schema
WHERE 
    type ='table' AND 
    name NOT LIKE 'sqlite_%';
SELECT name FROM sqlite_schema;
SELECT name FROM sqlite_master where name like 'cat%'
SELECT name FROM sqlite_master where name like 'cat%';
c
.
q
SELECT * FROM sqlite_master where name like 'cat%';
SELECT * FROM sqlite_master where name like 'cat%' and type='table';
SELECT name FROM sqlite_master where name like 'cat%' and type='table';
SELECT sql FROM sqlite_master where name like 'cat%' and type='table';
.schema sqlite_master
select name from sqlite_master order by name;
select name from sqlite_master where name like 'cat%' order by name;
.schema catalog_book
his
.output file
.output tables
.ouput
.output
.output ctable
SELECT * FROM sqlite_master where name like 'cat%;'
.schema sqlite_master;
.shell
SELECT * FROM sqlite_master where name like 'cat%' and type='table';SELECT * FROM sqlite_master where name like 'cat%;'
limit 5;
.read f
.shell nvim f
.output sh
select name from sqlite_master;
select name from sqlite_master where name like '%book%'
select name from sqlite_master where name like 'cat%book%'
select name from sqlite_master where name like 'cat%book%';
select name from sqlite_master where name like 'cat%book';
select * from catalog_book limit 1;
select sql from sqlite_master where name like 'cat%book';
.output catalog_book
INSERT INTO catalog_book (id, title, summary, isbn, author_id, catalog_author) values (2,'3','3','3','3','3');
cat catalog_book
INSERT INTO catalog_book (id, title, summary, isbn, author_id ) values (2,'3','3','3','3');
select * from catalog_book;
.headers ON
SELECT DISTINCT m.name || '.' || ii.name AS 'indexed-columns'
  FROM sqlite_schema AS m,
       pragma_index_list(m.name) AS il,
       pragma_index_info(il.name) AS ii
 WHERE m.type='table'
 ORDER BY 1;
select * from books;
INSERT INTO books (title) values  ("example.db)";
INSERT INTO books (title) values  ("example.db)"
INSERT INTO books (title) values  ("example.db");
INSERT INTO books (title) values  ("schema");
INSERT INTO books (title) values ('crime and punishment');
delete from books;
select * from books limit 2;
cls
clear

.schema albums
SELECT
  concat (first_name, ' ', last_name) AS "full_name"
FROM
  "user"
  concat (AlbumId, ' ', Title) AS "full_name"
  "albums"
SELECT 'SQLite ' || 'CONCAT';
    FirstName || ' ' || LastName AS FullName
    Employees
ORDER BY
    FullName;
.tables like '%c'
.tables like '%c%'
.columns
.column
.once h
PRAGMA table_info(catalog_bookinstance);
select * from catalog_bookinstance
.headers on
select * from catalog_book where title="Faust"
select * from catalog_book where book =1
.dump
.tables like '%cat%'
.tables like '%'
select sql from sqlite_schema where name like 'cat%book';
pragma table_info('catalog_book');
SELECT SQLITE_VERSION()
select * from catalog_book
select * from cars limit 1
select * from cars;
pragma
PRAGMA table_info(catalog_book);
PRAGMA table_info(cars);
PRAGMA table_info(sql_schema);
PRAGMA table_info(sql_schemass);
select * from sql_schema;
select sql from sqlite_schema;
PRAGMA table_info(sqlite_schema);
select * from sqlite_schema limit 1;
select * from sqlite_schema where name like "c%"
select * from sqlite_schema where name like "c%";
select * from sqlite_schema where name like "c%" limit 2;
select * from sqlite_schema where name like "c%" and type like "%tab" limit 2;
select * from sqlite_schema where name like "c%" and type like "tab%" limit 2;
PRAGMA table_info(
PRAGMA table_info('sqlite_schema');
select tbl_name from sqlite_schema;
select tbl_name from sqlite_schema where type='table';
insert into cars values(1,'non')
insert into cars values(1,'non','non;);
l;lkjj
aeasdfl;kqjwer
insert into cars values(1,'non','non');
insert into catalog_book values( 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
insert into catalog_book values(33 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1)
insert into catalog_book values(33 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
insert into catalog_book values(33, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1)
select * from catalog_books;
insert into catalog_book values(33, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '8461', 1);
insert into catalog_book values(1, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(122, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '19461', 1);
insert into catalog_book values(122, 'Faust', 'The erudite Faust is highly successful yet dissatisfied with his life, which leads him to make a pact with the Devil at a crossroads, exchanging his soul for unlimited knowledge and worldly pleasures.', '1942', 1);
select * from sqlite_schema;
select sql from sqlite_schema limit 3;
sq
SELECT source from history where source not like '%get%';
delete * from history;
delete history;
select count(*) from history;
delete from history;
select * from downloads;
select * from download
PRAGMA table_info(downloads);
select target_path from download;
select target_path from downloads;
select count(*) from downloads;
select * from auth_user;
select * from django_session;
.q
.x
.schema polls_question ;
.schema polls_question
help
?
help;
.output results.txt
update polls_question 
set question_text ="q one"
where id=1;
select * from django_migrations 
--what
select * from django_migrations ;
select * from polls_question limit 1
select * from polls_question limit 1;
UPDATE polls_question
SET question_text = 'whats your favorite day' 
WHERE id = 1;
select * from polls_choice;
UPDATE polls_choice
set choice_text ="Sunday"
set choice_text ="Friday"
where id=3;
set choice_text ="Monday"
where id=2;
.schema polls_choice;
.schema polls_choice
pragma table_info(polls_choice)
INSERT INTO polls_question VALUES (4, 'MY new',8,1);
INSERT INTO polls_question VALUES ('MY new',8,1);
INSERT INTO polls_question VALUES ("MY new",8,1);
INSERT INTO polls_question VALUES (?,"MY new",8,1);
INSERT INTO polls_question VALUES("MY new",8,1);
INSERT INTO polls_question VALUES("MY new",8,2);
INSERT INTO polls_question VALUES("MY new",8,0);
INSERT INTO polls_question VALUES("MY new",8);
INSERT INTO polls_question VALUES('a',8,0);
pragma table_info(polls_choice);
INSERT INTO polls_choice VALUES("MY new",8,1);
INSERT INTO polls_choice VALUES(,"MY new",8,1);
INSERT INTO polls_choice VALUES(?,"MY new",8,1);
select * from student'
l
la;sdlfjf
asdf;lsjadf
select * from student;
https://www.youtube.com/watch?v=aDOAxJ2ARnU&list=RDaDOAxJ2ARnU&start_radio=1
SELECT sql FROM sqlite_master WHERE tbl_name =
SELECT sql FROM sqlite_master WHERE tbl_name =;
SELECT sql FROM sqlite_master WHERE tbl_name = 'polls_question';
drop table student;
CREATE TABLE IF NOT EXISTS student( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, surname TEXT NOT NULL);
SELECT sql FROM sqlite_master WHERE tbl_name = 'student';
INSERT INTO student VALUES (1, 'John', 'Smith');
INSERT INTO student VALUES (, 'John', 'Smith');
INSERT INTO student VALUES ('', 'John', 'Smith');
CREATE TABLE people (
   first_name TEXT NOT NULL,
   last_name TEXT NOT NULL
.tabls
INSERT INTO people (first_name, last_name)
VALUES('John', 'Doe');
select * from people;
select rowid from people;
DROP TABLE people;
   person_id INTEGER PRIMARY KEY,
INSERT INTO people (first_name,last_name)
VALUES('William','Gate');
INSERT INTO people (person_id,first_name,last_name)
VALUES(9223372036854775807,'Johnathan','Smith');
delete * from people;
delete from people;
BEGIN;
--
-- Create model New
CREATE TABLE "polls_xxx" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "choice_text" varchar(200) NOT NULL, "votes" integer NOT NULL, "question_id" bigint NOT NULL REFERENCES "polls_question" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE INDEX "polls_new_question_id_59dcac27" ON "polls_new" ("question_id");
COMMIT;
.schema people
.schema song
create_query = '''CREATE TABLE IF NOT EXISTS song(
  id INTEGER PRIMARY KEY,
  name TEXT NOT NULL);
  '''
cursor.execute(create_query)
print("Table created!")
INSERT INTO song VALUES ('c:\you\evans\A_House_Is_Not_A_Home.mp3');
INSERT INTO song VALUES (1,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
select * from song
SELECT sql FROM sqlite_master;
SELECT  FROM sqlite_master;
.columns on
INSERT INTO song VALUES (2,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
INSERT INTO song ('c:\you\evans\A_House_Is_Not_A_Home.mp3');
.output old
.dump song
drop table song;
.read old
.schema son
INSERT INTO song VALUES (,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
INSERT INTO song VALUES (?,'c:\you\evans\A_House_Is_Not_A_Home.mp3');
select * from song;
.read new
.read tuff
.read ../old
.schema polls_question 
CREATE TABLE song2 ("ques", varchar(200));
CREATE TABLE song2 ("ques" varchar(200));
select * from songs limit 2;
select * from song limit 2;
select * from song2 limit 2;
.schema song2
insert into song2 (ques) select name from song;
select * from song2;
INSERT INTO polls_question VALUES("MY new",8,8);
INSERT INTO polls_question VALUES("MY new",8,'11/12/2023');
INSERT INTO polls_question VALUES(?,'nothing',?);
select date()
select date();
INSERT INTO polls_question VALUES(?,'nothing','2023-04-05');
select '2023-04-05' as date from polls_question ;
select '2023-04-05' as date from song ;
select '2023-04-05' as date name from song ;
select '2023-04-05' as date, name from song ;
select name, '2023-04-05' as date from song ;
select '?' as one, name, '2023-04-05' as date from song ;
.mode MODE ?OPTIONS?
.help mode
.mode insert
.mode insert song
ORDER BY 1
INSERT INTO song VALUES('auth_group');
INSERT INTO song VALUES('auth_group_permissions');
INSERT INTO song VALUES('auth_permission');
INSERT INTO song VALUES('auth_user');
INSERT INTO song VALUES('auth_user_groups');
INSERT INTO song VALUES('auth_user_user_permissions');
INSERT INTO song VALUES('django_admin_log');
INSERT INTO song VALUES('django_content_type');
INSERT INTO song VALUES('django_migrations');
INSERT INTO song VALUES('django_session');
INSERT INTO song VALUES('polls_choice');
INSERT INTO song VALUES('polls_new');
INSERT INTO song VALUES('polls_question');
INSERT INTO song VALUES('polls_xxx');
INSERT INTO song VALUES('song');
INSERT INTO song VALUES('song2');
INSERT INTO polls_question VALUES(?,'c:\you\evans\A_House_Is_Not_A_Home.mp3','2023-04-05');
.mode list
SELECT IIF(1 < 2, 'Yes', 'No' ) result;
SELECT * FROM people;
Code language: SQL (Structured Query Language) (sql)
Try It
.schema people;
CREATE TABLE t1(c text);
.schema t1
INSERT INTO t1(c) VALUES('A');
INSERT INTO t1(c) values('B');
INSERT INTO t1(c) values('C');
INSERT INTO t1(c) values('D');
SELECT rowid, c FROM t1;
delete from t1;
CREATE TABLE none (one TEXT);
CREATE TABLE docs (t1 TEXT);
.schema docs
ALTER TABLE docs ADD COLUMN COLNew TEXT;
PRAGMA TABLE docs
PRAGMA TABLE_INFO docs;
PRAGMA TABLE_INFO 
PRAGMA busy_timeout;
PRAGMA database_list;
.databases
.talbes
.schema song3
INSERT INTO song3 (name) values "new";
INSERT INTO song3 (name) values ("new")
select * from song3;
.schema pol*
.output schema.txt
DROP TABLE polls_xxx ;
DROP TABLE polls_new;
DROP TABLE SONG;
drop table song2;
.output schema
SELECT tbl_name, sql FROM sqlite_master where name like 'poll%' and type='table';
select * from song3 ;
select * from visits
  datetime(visit_time / 1000000 + (strftime('%s', '1601-01-01')), 'unixepoch', 'localtime')
FROM visits
ORDER BY visit_time DESC
LIMIT 10;
.schema visits
select * from visits limit 1;
select url from visits;
select count(*) url from visits;
SELECT tbl_name FROM sqlite_master;
SELECT distinct tbl_name FROM sqlite_master;
.output listtables.txt
x
select * from history:
select * from Main;
.set headers on
select * from Main limit 5;
select lDate from Main limit 5;
select lDate, mText from Main limit 5;
select count(*) from Main;
delete from Main;
gst
delete from polls_question 
select * from new_developers ;
delete polls_question ;
delete from polls_question ;
select * from catalog_author;
delete from catalog_author;
INSERT INTO catalog_book (id,title,summary,isbn, author_id, catalog_author)
VALUES(9223372036854775807,'Johnathan','Smith', '44','44', '44');
INSERT INTO catalog_book (id,title,summary,isbn, author_id )
VALUES(9223372036854775807,'Johnathan','Smith', '44','44');
.schema catalog_language 
delete from catalog_book;
SELECT sql FROM sqlite_master limit=2;
SELECT sql FROM sqlite_master limit 2;
SELECT sql FROM sqlite_master where sql like '%catalog%' limit 2;
SELECT sql FROM sqlite_master where sql like '%catalog%' and sql like '%table%';
    name  LIKE 'catalog%';
select * from catalog_bookinstance;
 SELECT name FROM sqlite_schema WHERE type ='table' AND name  LIKE 'catalog%';
.mode
.output out
select * from articles_article ;
SELECT sql FROM sqlite_master where sql like '%artic%' and sql like '%table%';
select * from tasks_task ;
.schema tasks_task 
CREATE TABLE employees (
employee_id serial PRIMARY KEY,
full_name VARCHAR NOT NULL,
manager_id INT
INSERT INTO employees (
employee_id,
full_name,
manager_id
)
VALUES
(1, 'Michael North', NULL),
(2, 'Megan Berry', 1),
(3, 'Sarah Berry', 1),
(4, 'Zoe Black', 1),
(5, 'Tim James', 1),
(6, 'Bella Tucker', 2),
(7, 'Ryan Metcalfe', 2),
(8, 'Max Mills', 2),
(9, 'Benjamin Glover', 2),
(10, 'Carolyn Henderson', 3),
(11, 'Nicola Kelly', 3),
(12, 'Alexandra Climo', 3),
(13, 'Dominic King', 3),
(14, 'Leonard Gray', 4),
(15, 'Eric Rampling', 4),
(16, 'Piers Paige', 7),
(17, 'Ryan Henderson', 7),
(18, 'Frank Tucker', 8),
(19, 'Nathan Ferguson', 8),
(20, 'Kevin Rampling', 8);
select * from employes;
select * from employees;
.schema employees;
.schema employees
tables;
select * from tutorials_tutorial ;
mem
delete * from tutorials_tutorial ;
delete  from tutorials_tutorial ;
delete from tutorials_tutorial ;
.schema tutorials_tutorial 
CREATE TABLE "react" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "text" varchar(70) NOT NULL, "day" varchar(200) NOT NULL, "reminder" bool NOT NULL);
INSERT INTO react(id, text, day)
VALUES (1, 'MANUAL' 'JAN-1')
VALUES (1, 'MANUAL', 'JAN-1');
VALUES (1, 'MANUAL', 'JAN-1', 'false');
INSERT INTO react(id, text, day, reminder)
VALUES (, 'MANUAL', 'JAN-1', 'false');
VALUES ('1', 'MANUAL', 'JAN-1', 'false');
select * from react;
INSERT INT;
INSERT INTO tutorials_tutorial(id, text, day, reminder)
drop table react;
from sqlalchemy import create_engine,text
file=r'/mnt/c/projects/alchemy/sample.db'
db_uri = f"sqlite:///{file}"
# db_uri='sqlite:////mnt/c/projects/alchemy/sample.db'
engine=create_engine(db_uri)
with engine.connect() as connection:
    result=connection.execute(text('select "hello"'))
    print(result.all());;;;;
SELECT users.id AS users_id, users.first_name AS users_first_name, users.last_name AS users_last_name, users.email AS users_email, users.created_at AS users_created_at, users.updated_at AS users_updated_at
FROM users
 LIMIT ? OFFSET ?;
FROM users;
SELECT count(*) AS count_1
FROM (SELECT users.id AS users_id, users.first_name AS users_first_name, users.last_name AS users_last_name, users.email AS users_email, users.created_at AS users_created_at, users.updated_at AS users_updated_at
FROM users) AS anon_1;
select * from users;
select * from preferences;
delete from tutorials_tutorial where id=5
update tutorials_tutorial set description="new stuf";
update tutorials_tutorial set description="Satuday";
update tutorials_tutorial set description="Thursday";
.schema user
.schema users
select * from hero;
insert into hero(name, secret_name,age) values ('joe','tom',22)
select * from notes;
.schema projects 
.schema notes
insert into notes (text, word) values ('one','tow');
.schema movie
insert into movie (title, year, score) values ('n','n','n')
select * from movie;
def bulkInsert(records):
    try:
        sql_insert_query = """ INSERT INTO notes (text, word) 
                           VALUES (%s,%s) """
        result = cursor.executemany(sql_insert_query, records)
        conn.commit()
    # except (Exception, psycopg.Error) as error:
    #     print("Failed inserting record into  table {}".format(error))
    #     breakpoint()
    finally:
        # closing database connection.
        if conn:
            # cursor.close()
            # conn.close()
            print("PostgreSQL connection is commented")
delete from notes;
select * from notes limit 2;
INSERT INTO notes (text, word)
VALUES ('first', 'word');
select * from notes ;
.schema items
select * from stores;
create table notes (text TEXT, word TEXT);
insert into stores (name) values('wal');
select word from notes;
!pwd
.output help
.system ls
.system nvim
.once h2
.system nvim h2
insert into store (name) select word from notes;
insert into stores (name) select word from notes;
.schema stores
.once schema.txt
select * from items;
.system nvim schema
.schema sharks 
delete from main;
In the sales field, the Ben Franklin effect can be used to build rapport with a client.[9] Instead of offering to help the potential client, a salesperson can instead ask the potential client for assistance: "For example, ask them to share with you what product benefits they find most compelling, where they think the market is headed, or what products may be of interest several years from now. This pure favor, left unrepaid, can build likability that will enhance your ability to earn that client's time and investment in the future."[10]
The Benjamin Franklin effect can also be observed in successful mentor-protege relationships. Such relationships, one source points out, "are defined by their fundamental imbalance of knowledge and influence. Attempting to proactively reciprocate favors with a mentor can backfire, as the role reversal and unsolicited assistance may put your mentor in an unexpected, awkward situation".[10] The Ben Franklin effect was cited in Dale Carnegie's bestselling book How to Win Friends and Influence People. Carnegie interprets the request for a favor as "a subtle but effective form of flattery".
As Carnegie suggests:
...when we ask a colleague to do us a favour, we are signalling that we consider them to have something we don't, whether more intelligence, more knowledge, more skills, or whatever. This is another way of showing admiration and respect, something the other person may not have noticed from us before. This immediately raises their opinion of us and makes them more willing to help us again both because they enjoy the admiration and have genuinely started to like us.[11]
Psychologist Yu Niiya suggests that the Ben Franklin effect vindicates Takeo Doi's theory of amae (甘え), as described in The Anatomy of Dependence. It states that dependent, childlike behavior can induce a parent-child bond where one partner sees themselves as the caretaker.[5] In effect, amae creates a relationship where one person feels responsible for the other, who is then free to act immaturely and make demands.
One commentator has discussed the Ben Franklin effect in connection with dog training, thinking "more about the human side of the relationship rather than about the dogs themselves." While trainers often distinguish between the impact of positive and negative reinforcement-based training methods on the dogs, it can also be relevant to "consider the effects that these two approaches may have upon the trainer. The Ben Franklin Effect suggests that how we treat our dogs during training influences how we think about them as individuals – specifically, how much we like (or dislike) them. When we do nice things for our dogs in the form of treats, praise, petting and play to reinforce desired behaviors, such treatment may result in our liking them more. And, if we use harsh words, collar jerks or hitting in an attempt to change our dog's behavior, then...we will start to like our dog less."[12]
Converse
The opposite case is also believed to be true, namely that we come to hate a person to whom we did wrong. We de-humanize them to justify the bad things we did to them.[3]
It has been suggested that if soldiers who have killed enemy servicemen in combat situations later come to hate them, it is because this psychological maneuver helps to "decrease the dissonance of killing".[3] Such a phenomenon might also "explain long-standing grudges like Hatfield vs. McCoy" or vendetta situations in various cultures: "Once we start, we may not be able to stop and engage in behavior we would normally never allow."[13] As one commentator has put it, "Jailers come to look down on inmates; camp guards come to dehumanize their captives; soldiers create derogatory terms for their enemies. It's difficult to hurt someone you admire. It's even more difficult to kill a fellow human being. Seeing the casualties you create as something less than you, something deserving of damage, makes it possible to continue seeing yourself as a good and honest person, to continue being sane."[1]
select * from Data;
select * from CopyBuffers 
.schema Data;
.schema Data
select strClipBoardFormat from Data;
select ooData from Data;
select lID from Data;
select 'turkey';
.help
.tables
.schema Data
select * from Main;
.schema Data
.schema Main
.tables
select * from Main;
select * from Data;
.schema Data;
.tables
.schema Data
select ooData from Data;
select ooData from Data;
select ooData from Data;
.output x
select ooData from Data;
.tables
select * from Main;
select * from Main limit 5;
select * from Main limit 1;
.table Main
.schema Main
.output y
.schema Main
delete from ooData;
.tables
delete from Data;
.output all
.tables
delete from Data;
.tables
delete from Main;
delete from MainDeletes;
select * from main m inner join data d on d.'lParentID' = m.'lID'
where d.strClipBoardFormat = 'CF_DIB'
--limit 1000;
select * from main m inner join data d on d.'lParentID' = m.'lID' where d.strClipBoardFormat = 'CF_DIB';
select * from main m inner join data d on d.'lParentID' = m.'lID';
select select * from main m inner join data d on d.'lParentID' = m.'lID' where d.strClipBoardFormat = 'CF_DIB'; from main m inner join data d on d.'lParentID' = m.'lID' limit 10;
select * from main m inner join data d on d.'lParentID' = m.'lID' limit 1;
select d.strClipBoardFormat from main m inner join data d on d.'lParentID' = m.'lID' limit 1;
select * from main m inner join data d on d.'lParentID' = m.'lID' where d.strClipBoardFormat = 'CF_TEXT';
.help
.headers on
select * from main m inner join data d on d.'lParentID' = m.'lID' where d.strClipBoardFormat = 'CF_TEXT' limit 1;
.schema Data
.schema Main
.tables
SELECT source from history where source not like '%get%';
SELECT count(*) from history where source not like '%get%';
.tables
select * from linux;
.table
select * from history;
select count(*) from history;
select * from history limit 3;
select * from history limit 13;
